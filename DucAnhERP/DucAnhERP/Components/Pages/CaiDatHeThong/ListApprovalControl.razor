@page "/ApprovalControls"
@using System.Linq
@using DucAnhERP.Components.Pages.Common
@using DucAnhERP.Helpers
@using DucAnhERP.Models

@using DucAnhERP.SeedWork
@using DucAnhERP.ViewModel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject IApprovalControlRepository ApprovalControlService
@inject IJSRuntime JS
@inject NavigationManager navigation
@inject DucAnhERP.Services.ToastService ToastService
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<IdentityUser> SignInManager


<div class="mx-5 my-2">
    <h3>Danh sách</h3>
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" id="formInput" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="CompanyId">Chi nhánh</label>
                        <Select2 Id="CompanyId" Items="@selectCompanyIdInput" OnChange="@OnSelectCompanyIdInput"></Select2>
                        <ValidationMessage For="()=>Input.CompanyId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ParentMajorId">Nghiệp vụ</label>
                        <Select2 Id="ParentMajorId" Items="@selectParentMajorIdInput" OnChange="@OnSelectParentMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.ParentMajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="MajorId">Phân loại nghiệp vụ</label>
                        <Select2 Id="MajorId" Items="@selectMajorIdInput" OnChange="@OnSelectMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.MajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="DeptId">Phòng ban</label>
                        <Select2 Id="DeptId" Items="@selectDeptIdInput" OnChange="@OnSelectDeptIdInput"></Select2>
                        <ValidationMessage For="()=>Input.DeptId"></ValidationMessage>
                    </div>

                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="UserId">Người dùng</label>
                        <Select2 Id="UserId" Items="@selectUserIdInput" OnChange="@OnSelectUserIdInput"></Select2>
                        <ValidationMessage For="()=>Input.UserId"></ValidationMessage>
                    </div>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                <button class="btn btn-primary mr-2" form="formInput" type="submit">Save</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </div>
        </FooterTemplate>
    </CustomModal>
    <CustomModal IsVisible="isModalDetail" OnClose="HandleModalDetailClose" Title="Thông tin lịch sử" Size="modal-lg">
        <BodyTemplate>
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                            <span class="arrow @(GetSortStyle("CompanyId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("DeptId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Phòng ban</div>
                            <span class="arrow @(GetSortStyle("DeptId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserId"))"></span>
                        </th>

                    </tr>
                </thead>
                @if (listDetails.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listDetails)
                        {
                            stt++;
                            <tr>
                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyId</td>
                                <td class="text-left">@item.ParentMajorId</td>
                                <td class="text-left">@item.MajorId</td>
                                <td class="text-left">@item.DeptId</td>
                                <td class="text-left">@item.UserId</td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="6">Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </BodyTemplate>
    </CustomModal>
    <div>
        <EditForm Model="pageModel" FormName="SearchData" id="SearchData" OnValidSubmit="@Search">
            <DataAnnotationsValidator />
            <div class="d-flex row">
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="CompanyIdSearch">Chi nhánh</label>
                    <Select2 Id="CompanyIdSearch" Items="@selectCompanyIdSearch" OnChange="@OnSelectCompanyIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.CompanyId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="ParentMajorIdSearch">Nghiệp vụ cha</label>
                    <Select2 Id="ParentMajorIdSearch" Items="@selectParentMajorIdSearch" OnChange="@OnSelectParentMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.ParentMajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="MajorIdSearch">Nghiệp vụ</label>
                    <Select2 Id="MajorIdSearch" Items="@selectMajorIdSearch" OnChange="@OnSelectMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.MajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="DeptId">Bộ phận</label>
                    <Select2 Id="DeptId" Items="@selectDeptIdSearch" OnChange="@OnSelectDeptIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.DeptId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="UserIdSearch">Người dùng</label>
                    <Select2 Id="UserIdSearch" Items="@selectUserIdSearch" OnChange="@OnSelectUserIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.UserId"></ValidationMessage>
                </div>

                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="submit" form="SearchData" class="btn btn-primary form-control">Tìm kiếm</button>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="button" @onclick="ShowModal" class="btn btn-primary form-control">Tạo mới</button>
                </div>
            </div>
        </EditForm>
        <div class="row mt-3 our-table">
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2">
                        </th>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                            <span class="arrow @(GetSortStyle("CompanyId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("DeptId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Phòng ban</div>
                            <span class="arrow @(GetSortStyle("DeptId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserId"))"></span>
                        </th>

                        @* <th onclick="@(() => SortTable("IsStatus"))" rowspan="2" class="text-center sortable" scope="col">
                        <div class="pb-3">Trạng thái</div>
                        <span class="arrow @(GetSortStyle("IsStatus"))"></span>
                        </th> *@
                    </tr>
                </thead>
                @if (listApprovalControlControl.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listApprovalControlControl)
                        {
                            stt++;
                            <tr>
                                <td class="d-flex flex-column text-center nowrap">
                                    <div class="d-inline-block">
                                        <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.UserId )">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        <button class="btn btn-sm btn-primary m-1" title="Chi tiết" @onclick="()=>DetailAction(item.Id)">
                                            <i class="fa fa-info-circle"></i>
                                        </button>
                                    </div>
                                </td>

                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyId</td>
                                <td class="text-left">@item.ParentMajorId</td>
                                <td class="text-left">@item.MajorId</td>
                                <td class="text-left">@item.DeptId</td>
                                <td class="text-left">@item.UserId</td>
                                @* <td class="text-left">@item.IsStatus</td> *@
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7">Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        @if (listApprovalControlControl.Any())
        {
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
        }
    </div>
    <SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
    <ErrorModal @ref="errorModal"></ErrorModal>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>
@code {
    private ApprovalControl Input = new();
    private List<DepartmentModel> listDepartment = new List<DepartmentModel>();
    private List<Major> listParentMajor = new List<Major>();
    private List<Major> listMajor = new List<Major>();
    private List<ChiNhanhModel>? listCompanyIdSearch = new();
    private List<ChiNhanh> listCompanyIdInput = new();
    public string CompanyIdText { get; set; } = "";
    private List<MajorModel>? listParentMajorIdSearch = new();
    private List<Major> listParentMajorIdInput = new();
    public string ParentMajorIdText { get; set; } = "";
    private List<MajorModel>? listMajorIdSearch = new();
    private List<Major> listMajorIdInput = new();
    public string MajorIdText { get; set; } = "";
    private List<ApplicationUserModel>? listUserIdSearch = new();
    private List<ApplicationUser> listUserIdInput = new();
    public string UserIdText { get; set; } = "";
    private bool isModalVisible = false;
    private bool isModalDetail = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm";
    private bool isEdit = false;
    private DateTime baseTime;
    private string deleteId;
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;
    private List<SelectedItem> selectCompanyIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectCompanyIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private async Task OnSelectCompanyIdInput(SelectedItem selectedItem)
    {
        Input.CompanyId = selectedItem.Value;
        CompanyIdText = selectedItem.Text;
        listParentMajor = await ApprovalStepSettingService.LoadParentMajors(Input.CompanyId ?? "");
        selectParentMajorIdInput = listParentMajor.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectParentMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });


        //chọn deptId
        listDepartment = !string.IsNullOrEmpty(Input.CompanyId) ? await DepartmentService.GetAllByVM(new DepartmentModel { CompanyId = Input.CompanyId }, groupId) : new();
        selectMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };

        selectDeptIdInput = listDepartment.Select(item => new SelectedItem { Text = item.DeptName, Value = item.Id }).ToList();
        selectDeptIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        selectUserIdInput = new();
        selectUserIdInput.Add(new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

    }
    private async Task OnSelectCompanyIdSearch(SelectedItem selectedItem)
    {
        pageModel.CompanyId = selectedItem.Value;
        listMajor = await ApprovalStepSettingService.LoadParentMajors(pageModel.CompanyId ?? "");
        selectParentMajorIdSearch = listMajor.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectParentMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        //chọn deptId
        listDepartment = !string.IsNullOrEmpty(pageModel.CompanyId) ? await DepartmentService.GetAllByVM(new DepartmentModel { CompanyId = pageModel.CompanyId }, groupId) : new();
        selectMajorIdSearch = new();
        selectDeptIdSearch = new();
        selectUserIdSearch = new();

        selectDeptIdSearch = listDepartment.Select(item => new SelectedItem { Text = item.DeptName, Value = item.Id }).ToList();
        selectDeptIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

        selectUserIdSearch = new();
        selectUserIdSearch.Add(new SelectedItem { Text = "", Value = "", IsSelected = true });

    }

    private List<SelectedItem> selectParentMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectParentMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectParentMajorIdInput(SelectedItem selectedItem)
    {
        Input.ParentMajorId = selectedItem.Value;
        ParentMajorIdText = selectedItem.Text;
        Input.MajorId = "";
        listMajorIdInput = MajorService.GetMajorByParentId1(Input.ParentMajorId);
        selectMajorIdInput = listMajorIdInput.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
    }
    private void OnSelectParentMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.ParentMajorId = selectedItem.Value;
        selectMajorIdSearch = new();
        pageModel.MajorId = "";
        listMajor = MajorService.GetMajorByParentId1(pageModel.ParentMajorId);
        selectMajorIdSearch = listMajor.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

    }

    private List<SelectedItem> selectMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectMajorIdInput(SelectedItem selectedItem)
    {
        Input.MajorId = selectedItem.Value;
        MajorIdText = selectedItem.Text;

    }
    private void OnSelectMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.MajorId = selectedItem.Value;
    }

    private List<SelectedItem> selectDeptIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectDeptIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private async Task OnSelectDeptIdInput(SelectedItem selectedItem)
    {
        Input.DeptId = selectedItem.Value;
        selectUserIdInput = new();
        if (string.IsNullOrEmpty(Input.DeptId))
        {
            selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        }
        else
        {
            listUserIdSearch = await ApplicationUserService.GetAllByVM(new ApplicationUserModel { DeptId = Input.DeptId }, groupId);
            selectUserIdInput = listUserIdSearch.Select(item => new SelectedItem { Text = item.UserName, Value = item.Id, }).ToList();
            selectUserIdInput.Add(new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        }
    }
    private async Task OnSelectDeptIdSearch(SelectedItem selectedItem)
    {
        pageModel.DeptId = selectedItem.Value;
        selectUserIdSearch = new();
        if (string.IsNullOrEmpty(pageModel.DeptId))
        {
            selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        }
        else
        {
            listUserIdSearch = await ApplicationUserService.GetAllByVM(new ApplicationUserModel { DeptId = pageModel.DeptId }, groupId);
            selectUserIdSearch = listUserIdSearch.Select(item => new SelectedItem { Text = item.UserName, Value = item.Id, }).ToList();
            selectUserIdSearch.Add(new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        }
    }

    private List<SelectedItem> selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectUserIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectUserIdInput(SelectedItem selectedItem)
    {
        Input.UserId = selectedItem.Value;
        UserIdText = selectedItem.Text;
    }
    private void OnSelectUserIdSearch(SelectedItem selectedItem)
    {
        pageModel.UserId = selectedItem.Value;
    }

    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }
    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
        Refresh();
    }
    private void HandleModalDetailClose(bool isVisible)
    {
        isModalDetail = isVisible;
    }
    private void HandleSave()
    {
        isModalVisible = false;
    }
    private void HandleCancel()
    {
        isModalVisible = false;
        Input = new();
        isEdit = false;
        Refresh();
    }

    private void Refresh()
    {
        foreach (var item in selectCompanyIdInput)
        {
            item.IsSelected = item.Value == "";
        }
        selectMajorIdInput = new();
        selectUserIdInput = new();
        selectDeptIdInput = new();
    }
    public List<ApprovalControlModel> listApprovalControlControl
    {
        get;
        set;
    } = new();
    public List<ApprovalControlModel> listDetails
    {
        get;
        set;
    } = new();
    public List<ApprovalControlModel> listModel
    {
        get;
        set;
    } = new();
    [SupplyParameterFromForm(FormName = "SearchData")]
    public ApprovalControlModel pageModel
    {
        get;
        set;
    }
    public MetaData MetaData
    {
        get;
        set;
    }
    protected override async Task OnInitializedAsync()
    {

        var isValid = await LoginService.CheckLogin();
        if (!isValid)
        {
            navigation.NavigateTo("/Account/Login", forceLoad: true);
        }
        pageModel = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;

            if (user.CreateBy == "symtem")
            {
                userId = user.Id;
                groupId = user.GroupId;

                // listParentMajor = await MajorService.GetParentMajor();

                // if (parentMajor != null)
                // {
                //     approvalStepSetting.MajorId = parentMajor.Id;
                // }

                // listMajor = await MajorService.GetMajorByParentId(parentmajorId);
                var lisChiNhanhs = await ChiNhanhService.GetAll(groupId);
                selectCompanyIdInput = lisChiNhanhs.Select(data => new SelectedItem
                    {
                        Value = data.Id,
                        Text = data.TenChiNhanh
                    }).ToList();
                selectCompanyIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
                selectCompanyIdSearch = selectCompanyIdInput;
                baseTime = DateTime.Now;
            }
            else
            {
                navigation.NavigateTo("/");
            }
        }


    }
    private async Task LoadData()
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "AAC96A58-857C-47AF-BAD1-EBDEA02645A4");
            baseTime = DateTime.Now;

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task HandleEdit(string id)
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "ef6f00e4-347e-471d-a9d9-d7661ca6c1b1");
            TitleModal = "Cập nhật";
            Input = await ApprovalControlService.GetById(id);
            selectCompanyIdInput = new();
            selectParentMajorIdInput = new();
            selectMajorIdInput = new();
            selectDeptIdInput = new();
            selectUserIdInput = new();
            var lisChiNhanhs = await ChiNhanhService.GetAll(groupId);
            selectCompanyIdInput = lisChiNhanhs.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh,
                    IsSelected = data.Id == Input.CompanyId
                }).ToList();

            var listpm = await ApprovalStepSettingService.LoadParentMajors(Input.CompanyId ?? "");
            selectParentMajorIdInput = listpm.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName,
                    IsSelected = data.Id == Input.ParentMajorId
                }).ToList();

            listMajorIdInput = MajorService.GetMajorByParentId1(Input.ParentMajorId);
            selectMajorIdInput = listMajorIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName,
                    IsSelected = data.Id == Input.MajorId
                }).ToList();

            var listdept = !string.IsNullOrEmpty(Input.CompanyId) ? await DepartmentService.GetAllByVM(new DepartmentModel { CompanyId = Input.CompanyId }, groupId) : new();
            selectDeptIdInput = listdept.Select(item => new SelectedItem { Text = item.DeptName, Value = item.Id, IsSelected = item.Id == Input.DeptId }).ToList();

            var list = await ApplicationUserService.GetAllByVM(new ApplicationUserModel { DeptId = Input.DeptId }, groupId);
            selectUserIdInput = list.Select(item => new SelectedItem { Text = item.UserName, Value = item.Id, IsSelected = item.Id == Input.UserId }).ToList();

            isEdit = true;
            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task DetailAction(string id)
    {
        try
        {
            listDetails = await ApprovalControlService.GetHistory(id);
            isModalDetail = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();
    }
    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    var query = await ApprovalControlService.GetById(deleteId);
                    if (query.IsActive == 2)
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                        "Thông tin bạn chọn đang chờ ",
                        cssClass: "toast-success",
                        iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 7000
                        );
                    }
                    else
                    {
                        var checkDelete = await ApprovalControlService.CheckDelete(query);
                        var checkquyen = await PhanQuyenService.CheckPermission(groupId, query.CompanyId, user, "b4980859-618c-46a8-b0e5-eb27dde628ab");
                        string[] ids = { deleteId };
                        var isValid = await ApprovalControlService.CheckExclusive(ids, baseTime);
                        if (isValid)
                        {
                            query.IsActive = 100;
                            query.CreateAt = DateTime.Now;
                            query.CreateBy = userId;
                            await ApprovalControlService.Update(query, "");
                            string content = "";
                            content += "<h3>Thông tin xóa</h3>";
                            content += "<table class=\"table table-hover table-bordered\">";
                            content += "<thead class=\"bg-info\">";
                            content += "<tr>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Chi nhánh</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Người dùng</div>";
                            content += "</th>";
                            content += "</tr>";
                            content += "</thead>";
                            content += "<tbody>";
                            content += "<tr>";
                            content += "<td class=\"text-left\">" + CompanyIdText + "</td>";
                            content += "<td class=\"text-left\">" + ParentMajorIdText + "</td>";
                            content += "<td class=\"text-left\">" + MajorIdText + "</td>";
                            content += "<td class=\"text-left\">" + UserIdText + "</td>";
                            content += "</tr>";
                            content += "</tbody>";
                            content += "</table>";
                            var listInsert = new List<EmailHistory>();
                            var emailhistory = new EmailHistory()
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    Receiver = UserIdText,
                                    Subject = "Phân quyền cài đặt - Xóa",
                                    Content = content,
                                    CompanyId = query.CompanyId,
                                    UserId = Input.UserId,
                                    ParentMajorId = Input.ParentMajorId,
                                    MajorId = Input.MajorId,
                                    IdCheck = query.Id,
                                    IdLog = "",
                                    IsMail = true,
                                    IsNotification = true,
                                    IsSMS = true,
                                    GroupId = groupId,
                                    CreateAt = DateTime.Now,
                                    CreateBy = user.Id,
                                    IsRead = 0
                                };
                            // await EmailService.Insert(emailhistory, "");
                            ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                            await LoadData();
                            await Search();
                            deleteId = "";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var CompanyIdValid = await ChiNhanhService.CheckStatus(Input.CompanyId, CompanyIdText);
            // var ParentMajorIdValid = await MajorService.CheckStatus(Input.ParentMajorId, ParentMajorIdText);
            // var MajorIdValid = await MajorService.CheckStatus(Input.MajorId, MajorIdText);
            var UserIdValid = await ApplicationUserService.CheckStatus(Input.UserId, UserIdText);
            Input.GroupId = groupId;
            Input.CreateBy = userId;
            Input.CreateAt = DateTime.Now;
            bool editcheck = (isEdit) || (isEdit == true && Input.IsActive == 3);
            if (editcheck)
            {
                string[] ids = { Input.Id };
                var isValid = await ApprovalControlService.CheckExclusive(ids, baseTime);
                var checkEdit = await ApprovalControlService.CheckEdit(Input);
                var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "ef6f00e4-347e-471d-a9d9-d7661ca6c1b1");
                if (isValid)
                {
                    // var firstApproval = await PhanQuyenService.GetFirstApprovalStep(Input.GroupId, "cabf898a-1920-47ef-a55b-cd4228e947dd", "ef6f00e4-347e-471d-a9d9-d7661ca6c1b1");
                    // var lastApproval = await PhanQuyenService.GetLastApprovalStep(Input.GroupId, "cabf898a-1920-47ef-a55b-cd4228e947dd", "ef6f00e4-347e-471d-a9d9-d7661ca6c1b1");
                    // Input.DepartmentId = firstApproval.DepartmentId;
                    // Input.ApprovalId = firstApproval.Id;
                    // Input.LastApprovalId = lastApproval.Id;

                    Input.IsActive = 1;
                    // Input.IsStatus = firstApproval.Content;
                    await ApprovalControlService.Update(Input, "");
                    string content = "";
                    content += "<h3>Thông tin sửa</h3>";
                    content += "<table class=\"table table-hover table-bordered\">";
                    content += "<thead class=\"bg-info\">";
                    content += "<tr>";
                    content += "<th class=\"text-center\" rowspan=\"2\" scope=\"col\">";
                    content += "<div class=\"pb-3\">No.</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Chi nhánh</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Phòng ban</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Người dùng</div>";
                    content += "</th>";
                    content += "</tr>";
                    content += "</thead>";
                    var IsValidModel = await ApprovalControlService.GetHistoryIsValidEdit(Input.Id);
                    @if (IsValidModel.Any())
                    {
                        content += "<tbody>";
                        int stt = 0;
                        @foreach (var item in IsValidModel)
                        {
                            stt++;
                            content += "<tr>";
                            content += "<td class=\"text-center\" scope=\"row\">";
                            content += stt == 1 ? "Dữ liệu cũ" : "Dữ liệu mới";
                            content += "</td>";
                            content += "<td class=\"text-left\">" + @item.CompanyId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.ParentMajorId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.MajorId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.DeptId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.UserId + "" + "</td>";
                            content += "</tr>";
                        };
                        content += "</tbody>";
                    }
                    else
                    {
                        content += "<tbody>";
                        content += "<tr>";
                        content += "<td class=\"text-danger\" colspan=\"7\">Không có dữ liệu</td>";
                        content += "</tr>";
                        content += "</tbody>";
                    }
                    content += "</table>";

                    var emailhistory = new EmailHistory()
                        {
                            Id = Guid.NewGuid().ToString(),
                            Receiver = UserIdText,
                            Subject = "Phân quyền cài đặt duyệt",
                            Content = content,
                            CompanyId = Input.CompanyId,
                            UserId = Input.UserId,
                            ParentMajorId = Input.ParentMajorId,
                            MajorId = Input.MajorId,
                            IdCheck = Input.Id,
                            IdLog = "",
                            IsMail = true,
                            IsNotification = true,
                            IsSMS = true,
                            GroupId = groupId,
                            CreateAt = DateTime.Now,
                            CreateBy = user.Id,
                            IsRead = 0
                        };

                    await EmailService.Insert(emailhistory, "");
                    ToastService.ShowToast(
                    "Thông báo",
                    "Cập nhật thành công.",
                    iconClass: "fa fa-check-circle",
                    progressBarClass: "bg-info",
                    duration: 5000
                    );
                    Input.Id = Guid.NewGuid().ToString();
                    await LoadData();
                    await Search();
                    isEdit = false;
                    isModalVisible = false;
                }
            }
            else
            {
                var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "6113e06f-6495-42a3-ad65-8ea440510fa0");
                Input.IsActive = 0;
                var checkSave = await ApprovalControlService.CheckSave(Input);
                // var firstApproval = await PhanQuyenService.GetFirstApprovalStep(Input.GroupId, "cabf898a-1920-47ef-a55b-cd4228e947dd", "6113e06f-6495-42a3-ad65-8ea440510fa0");
                // var lastApproval = await PhanQuyenService.GetLastApprovalStep(Input.GroupId, "cabf898a-1920-47ef-a55b-cd4228e947dd", "6113e06f-6495-42a3-ad65-8ea440510fa0");
                // Input.DepartmentId = firstApproval.DepartmentId;
                // Input.ApprovalId = firstApproval.Id;
                // Input.LastApprovalId = lastApproval.Id;

                // Input.IsStatus = firstApproval.Content;
                if (isEdit)
                {
                    await ApprovalControlService.Update(Input, "");
                }
                else
                {
                    await ApprovalControlService.Insert(Input, "");
                }
                string content = "";
                content += "<h3>Thông tin thêm</h3>";
                content += "<table class=\"table table-hover table-bordered\">";
                content += "<thead class=\"bg-info\">";
                content += "<tr>";
                content += "<th>";
                content += "<div class=\"pb-3\">Chi nhánh</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Người dùng</div>";
                content += "</th>";
                content += "</tr>";
                content += "</thead>";
                content += "<tbody>";
                content += "<tr>";
                content += "<td class=\"text-left\">" + CompanyIdText + "</td>";
                content += "<td class=\"text-left\">" + ParentMajorIdText + "</td>";
                content += "<td class=\"text-left\">" + MajorIdText + "</td>";
                content += "<td class=\"text-left\">" + UserIdText + "</td>";
                content += "</tr>";
                content += "</tbody>";
                content += "</table>";

                var emailhistory = new EmailHistory()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Receiver = UserIdText,
                        Subject = "Phân quyền cài đặt - Thêm",
                        Content = content,
                        CompanyId = Input.CompanyId,
                        UserId = Input.UserId,
                        ParentMajorId = Input.ParentMajorId,
                        MajorId = Input.MajorId,
                        IdCheck = Input.Id,
                        IdLog = "",
                        IsMail = true,
                        IsNotification = true,
                        IsSMS = true,
                        GroupId = groupId,
                        CreateAt = DateTime.Now,
                        CreateBy = user.Id,
                        IsRead = 0
                    };

                // await EmailService.Insert(emailhistory, "");
                ToastService.ShowToast(
                "Thông báo",
                "Lưu thành công.",
                iconClass: "fa fa-check-circle",
                progressBarClass: "bg-info",
                duration: 5000
                );
                Input.Id = Guid.NewGuid().ToString();
                await LoadData();
                await Search();
                isEdit = false;
                isModalVisible = false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    public async Task Search()
    {
        var checkquyen = await PhanQuyenService.CheckPermission(groupId, pageModel.CompanyId, user, "9f8a01b1-8c14-4d78-8620-92e631caf03c");
        pageModel.PageNumber = 1;
        listModel = await ApprovalControlService.GetAllByVM(pageModel, groupId);
        listApprovalControlControl = Paging(listModel);
    }
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        pageModel.PageNumber = 1;
        Paging(listModel);
    }
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    private void SelectedPage(int page)
    {
        pageModel.PageNumber = page;
        Paging(listModel);
    }
    private void ChangePageSize(int pageSize)
    {
        pageModel.PageNumber = 1;
        pageModel.pageSize = pageSize;
        Paging(listModel);
    }
    private List<ApprovalControlModel> Paging(List<ApprovalControlModel> list)
    {
        var count = list.Count();
        list = list.Skip((pageModel.PageNumber - 1) * pageModel.PageSize).Take(pageModel.PageSize).ToList();
        listApprovalControlControl.Clear();
        foreach (var item in list)
        {
            listApprovalControlControl.Add(item);
        }
        var pagelist = new PageList<ApprovalControlModel>(listApprovalControlControl, count, pageModel.PageNumber, pageModel.PageSize);
        MetaData = pagelist.MetaData;
        return list;
    }
    private void Redirect()
    {
        Input = new();
    }
}

