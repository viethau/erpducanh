@page "/CaiDatHeThong/ApprovalControls"
@using DucAnhERP.Helpers
@using DucAnhERP.ViewModel
@using DucAnhERP.Models
@using DucAnhERP.Components.Pages.Common
@using System.Linq
@using DucAnhERP.SeedWork
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity

@inject IJSRuntime JS
@inject NavigationManager navigation
@inject DucAnhERP.Services.ToastService ToastService
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<IdentityUser> SignInManager
<div class="mx-5 my-2">
    <h3>Danh sách</h3>
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="CompanyId">Chi nhánh</label>
                        <Select2 Id="CompanyId" Items="@selectCompanyIdInput" OnChange="@OnSelectCompanyIdInput"></Select2>
                        <ValidationMessage For="()=>Input.CompanyId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ParentMajorId">Nghiệp vụ cha</label>
                        <Select2 Id="ParentMajorId" Items="@selectParentMajorIdInput" OnChange="@OnSelectParentMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.ParentMajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="MajorId">Nghiệp vụ con</label>
                        <Select2 Id="MajorId" Items="@selectMajorIdInput" OnChange="@OnSelectMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.MajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="UserId">Người dùng</label>
                        <Select2 Id="UserId" Items="@selectUserIdInput" OnChange="@OnSelectUserIdInput"></Select2>
                        <ValidationMessage For="()=>Input.UserId"></ValidationMessage>
                    </div>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mt-5 justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>
    <div>
        <EditForm Model="pageModel" FormName="SearchData" OnValidSubmit="@Search">
            <DataAnnotationsValidator />
            <div class="d-flex row">
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="CompanyIdSearch">Chi nhánh</label>
                    <Select2 Id="CompanyIdSearch" Items="@selectCompanyIdSearch" OnChange="@OnSelectCompanyIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.CompanyId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="ParentMajorIdSearch">Nghiệp vụ cha</label>
                    <Select2 Id="ParentMajorIdSearch" Items="@selectParentMajorIdSearch" OnChange="@OnSelectParentMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.ParentMajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="MajorIdSearch">Nghiệp vụ con</label>
                    <Select2 Id="MajorIdSearch" Items="@selectMajorIdSearch" OnChange="@OnSelectMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.MajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="UserIdSearch">Người dùng</label>
                    <Select2 Id="UserIdSearch" Items="@selectUserIdSearch" OnChange="@OnSelectUserIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.UserId"></ValidationMessage>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="submit" class="btn btn-primary form-control">Tìm kiếm</button>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button @onclick="ShowModal" class="btn btn-primary form-control">Tạo mới</button>
                </div>
            </div>
        </EditForm>
        <div class="row mt-3 our-table">
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2">
                        </th>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                            <span class="arrow @(GetSortStyle("CompanyId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ con</div>
                            <span class="arrow @(GetSortStyle("MajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserId"))"></span>
                        </th>
                    </tr>
                </thead>
                @if (listApprovalControl.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listApprovalControl)
                        {
                            stt++;
                            <tr>
                                <td class="d-flex flex-column text-center nowrap">
                                    <div class="d-inline-block">
                                        <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.ParentMajorId )">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyId</td>
                                <td class="text-left">@item.ParentMajorId</td>
                                <td class="text-left">@item.MajorId</td>
                                <td class="text-left">@item.UserId</td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7">Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        @if (listApprovalControl.Any())
        {
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
        }
    </div>
    <SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
    <ErrorModal @ref="errorModal"></ErrorModal>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>
@code {
    private ApprovalControl Input = new();
    private List<ChiNhanhModel> listCompanyIdSearch = new();
    private List<ChiNhanh> listCompanyIdInput = new();
    public string CompanyIdText { get; set; } = "";
    private List<MajorModel> listParentMajorIdSearch = new();
    private List<Major> listParentMajorIdInput = new();
    public string ParentMajorIdText { get; set; } = "";
    private List<MajorModel> listMajorIdSearch = new();
    private List<Major> listMajorIdInput = new();
    public string MajorIdText { get; set; } = "";
    private List<ApplicationUserModel> listUserIdSearch = new();
    private List<ApplicationUser> listUserIdInput = new();
    public string UserIdText { get; set; } = "";
    private bool isModalVisible = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm";
    private bool isEdit = false;
    private DateTime baseTime;
    private string deleteId;
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;
    private List<SelectedItem> selectCompanyIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectCompanyIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectCompanyIdInput(SelectedItem selectedItem)
    {
        Input.CompanyId = selectedItem.Value;
        CompanyIdText = selectedItem.Text;
    }
    private void OnSelectCompanyIdSearch(SelectedItem selectedItem)
    {
        pageModel.CompanyId = selectedItem.Value;
    }
    private List<SelectedItem> selectParentMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectParentMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectParentMajorIdInput(SelectedItem selectedItem)
    {
        Input.ParentMajorId = selectedItem.Value;
        ParentMajorIdText = selectedItem.Text;
        listMajorIdInput = new();
        listMajorIdInput = MajorService.GetMajorByParentId1(selectedItem.Value).ToList();
        selectMajorIdInput = new List<SelectedItem>();
        foreach (var item in listMajorIdInput)
        {
            selectMajorIdInput.Insert(0, new SelectedItem { Value = item.Id, Text = item.MajorName, IsSelected = false });
        }
        selectMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
    }
    private void OnSelectParentMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.ParentMajorId = selectedItem.Value;
    }
    private List<SelectedItem> selectMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectMajorIdInput(SelectedItem selectedItem)
    {
        Input.MajorId = selectedItem.Value;
        MajorIdText = selectedItem.Text;
    }
    private void OnSelectMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.MajorId = selectedItem.Value;
    }
    private List<SelectedItem> selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectUserIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectUserIdInput(SelectedItem selectedItem)
    {
        Input.UserId = selectedItem.Value;
        UserIdText = selectedItem.Text;
    }
    private void OnSelectUserIdSearch(SelectedItem selectedItem)
    {
        pageModel.UserId = selectedItem.Value;
    }
    [Parameter]
    public SuccessModal successModal { get; set; }
    [Parameter]
    public ErrorModal errorModal { get; set; }
    [Parameter]
    public ConfirmModal confirmModal { get; set; }
    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }
    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
    }
    private void HandleSave()
    {
        isModalVisible = false;
    }
    private void HandleCancel()
    {
        isModalVisible = false;
        Input = new();
        isEdit = false;
    }
    public List<ApprovalControlModel> listApprovalControl
    {
        get;
        set;
    } = new();
    public List<ApprovalControlModel> listModel
    {
        get;
        set;
    } = new();
    [SupplyParameterFromForm(FormName = "SearchData")]
    public ApprovalControlModel pageModel
    {
        get;
        set;
    }
    public MetaData MetaData
    {
        get;
        set;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
        }
        pageModel = new();
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "607a49e3-62df-406e-987e-d38226684621");
            listCompanyIdSearch = await ApprovalControlService.GetChiNhanhs(groupId);
            selectCompanyIdSearch = listCompanyIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh
                }).ToList();
            selectCompanyIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            listCompanyIdInput = await ChiNhanhService.GetAll(groupId);
            selectCompanyIdInput = listCompanyIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh
                }).ToList();
            selectCompanyIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            listParentMajorIdSearch = await ApprovalControlService.GetMMajors(groupId);
            selectParentMajorIdSearch = listParentMajorIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectParentMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            listParentMajorIdInput = await MajorService.GetAllParentMajor();
            selectParentMajorIdInput = listParentMajorIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectParentMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            listMajorIdSearch = await ApprovalControlService.GetMMajors(groupId);
            selectMajorIdSearch = listMajorIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listUserIdSearch = await ApprovalControlService.GetApplicationUsers(groupId);
            selectUserIdSearch = listUserIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.UserName
                }).ToList();
            selectUserIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            listUserIdInput = await ApplicationUserService.GetAll(groupId);
            selectUserIdInput = listUserIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.UserName
                }).ToList();
            selectUserIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            baseTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task HandleEdit(string id)
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "b54436c7-2bd0-47b0-a10f-afa7508c61d5");
            TitleModal = "Cập nhật";
            Input = await ApprovalControlService.GetById(id);

            listMajorIdInput = new();
            listMajorIdInput = MajorService.GetMajorByParentId1(Input.ParentMajorId).ToList();
            selectMajorIdInput = new List<SelectedItem>();
            foreach (var item in listMajorIdInput)
            {
                selectMajorIdInput.Insert(0, new SelectedItem { Value = item.Id, Text = item.MajorName, IsSelected = false });
            }
            selectMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            foreach (var item in selectCompanyIdInput)
            {
                item.IsSelected = item.Value == Input.CompanyId;
            }
            foreach (var item in selectParentMajorIdInput)
            {
                item.IsSelected = item.Value == Input.ParentMajorId;
            }
            foreach (var item in selectMajorIdInput)
            {
                item.IsSelected = item.Value == Input.MajorId;
            }
            foreach (var item in selectUserIdInput)
            {
                item.IsSelected = item.Value == Input.UserId;
            }
            isEdit = true;
            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();
    }
    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    var query = await ApprovalControlService.GetById(deleteId);
                    var checkquyen = await PhanQuyenService.CheckPermission(groupId, query.CompanyId, user, "20fc5a21-cd14-45aa-8802-6e2ed34fccf7");
                    string[] ids = { deleteId };
                    var isValid = await ApprovalControlService.CheckExclusive(ids, baseTime);
                    if (isValid)
                    {
                        await ApprovalControlService.DeleteById(deleteId, "");
                        ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await LoadData();
                        await Search();
                        deleteId = "";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task ApprovalAction(string id)
    {
        try
        {
            var entity = await ApprovalControlService.GetById(id);
            var checkquyen = await PhanQuyenService.CheckApproval(entity.GroupId, entity.DepartmentId, user, entity.ApprovalId);
            if (entity.ApprovalId == entity.LastApprovalId)
            {
                entity.IsActive = 3;
                entity.IsStatus = "Ðã duyệt";
            }
            else
            {
                var nextApproval = await PhanQuyenService.GetNextApprovalStep(entity.GroupId, "96a2b0cb-37d5-4040-8b00-9b8b67b62a67", entity.CompanyId, entity.DepartmentId, entity.DepartmentOrder, entity.ApprovalOrder);
                entity.DepartmentId = nextApproval.DeptId;
                entity.IsStatus = nextApproval.Content;
                entity.ApprovalId = nextApproval.Id;
                entity.ApprovalOrder = nextApproval.ApprovalStep;
            }
            await ApprovalControlService.Update(entity, userId);
            await Search();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task HandleValidSubmit()
    {
        try
        {
            var CompanyIdValid = await ChiNhanhService.CheckStatus(Input.CompanyId, CompanyIdText);
            var ParentMajorIdValid = await MajorService.CheckStatus(Input.ParentMajorId, ParentMajorIdText);
            var MajorIdValid = await MajorService.CheckStatus(Input.MajorId, MajorIdText);
            var UserIdValid = await ApplicationUserService.CheckStatus(Input.UserId, UserIdText);
            Input.GroupId = groupId;
            Input.CreateBy = userId;
            Input.CreateAt = DateTime.Now;
            if (isEdit)
            {
                string[] ids = { Input.Id };
                var isValid = await ApprovalControlService.CheckExclusive(ids, baseTime);
                var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "b54436c7-2bd0-47b0-a10f-afa7508c61d5");
                if (isValid)
                {
                    // var firstApproval = await PhanQuyenService.GetFirstApprovalStep(Input.GroupId, "96a2b0cb-37d5-4040-8b00-9b8b67b62a67", "b54436c7-2bd0-47b0-a10f-afa7508c61d5");
                    // var lastApproval = await PhanQuyenService.GetLastApprovalStep(Input.GroupId, "96a2b0cb-37d5-4040-8b00-9b8b67b62a67", "b54436c7-2bd0-47b0-a10f-afa7508c61d5");
                    // Input.DepartmentId = firstApproval.DeptId;
                    // Input.ApprovalId = firstApproval.Id;
                    // Input.LastApprovalId = lastApproval.Id;
                    Input.IsActive = 3;
                    Input.ApprovalOrder = 1;
                    await ApprovalControlService.Update(Input, "");
                    ToastService.ShowToast(
                    "Thông báo",
                    "Cập nhật thành công.",
                    iconClass: "fa fa-check-circle",
                    progressBarClass: "bg-info",
                    duration: 5000
                    );
                    Input.Id = Guid.NewGuid().ToString();
                    await LoadData();
                    await Search();
                    isEdit = false;
                    isModalVisible = false;
                }
            }
            else
            {
                var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "49735f27-da2b-430e-82af-be52cc92cc6b");
                Input.IsActive = 0;
                // var firstApproval = await PhanQuyenService.GetFirstApprovalStep(Input.GroupId, "96a2b0cb-37d5-4040-8b00-9b8b67b62a67", "49735f27-da2b-430e-82af-be52cc92cc6b");
                // var lastApproval = await PhanQuyenService.GetLastApprovalStep(Input.GroupId, "96a2b0cb-37d5-4040-8b00-9b8b67b62a67", "49735f27-da2b-430e-82af-be52cc92cc6b");
                // Input.DepartmentId = firstApproval.DeptId;
                // Input.ApprovalId = firstApproval.Id;
                // Input.LastApprovalId = lastApproval.Id;
                Input.ApprovalOrder = 3;
                await ApprovalControlService.Insert(Input, "");
                ToastService.ShowToast(
                "Thông báo",
                "Thêm thành công.",
                iconClass: "fa fa-check-circle",
                progressBarClass: "bg-info",
                duration: 5000
                );
                Input.Id = Guid.NewGuid().ToString();
                await LoadData();
                await Search();
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    public async Task Search()
    {
        var checkquyen = await PhanQuyenService.CheckPermission(groupId, pageModel.CompanyId, user, "9f33895c-b14c-4998-90ec-e8cddfd52697");
        pageModel.PageNumber = 1;
        listModel = await ApprovalControlService.GetAllByVM(pageModel, groupId);
        listApprovalControl = Paging(listModel);
    }
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        pageModel.PageNumber = 1;
        Paging(listModel);
    }
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    private void SelectedPage(int page)
    {
        pageModel.PageNumber = page;
        Paging(listModel);
    }
    private void ChangePageSize(int pageSize)
    {
        pageModel.PageNumber = 1;
        pageModel.pageSize = pageSize;
        Paging(listModel);
    }
    private List<ApprovalControlModel> Paging(List<ApprovalControlModel> list)
    {
        var count = list.Count();
        list = list.Skip((pageModel.PageNumber - 1) * pageModel.PageSize).Take(pageModel.PageSize).ToList();
        listApprovalControl.Clear();
        foreach (var item in list)
        {
            listApprovalControl.Add(item);
        }
        var pagelist = new PageList<ApprovalControlModel>(listApprovalControl, count, pageModel.PageNumber, pageModel.PageSize);
        MetaData = pagelist.MetaData;
        return list;
    }
    private void Redirect()
    {
        Input = new();
    }
}
