@page "/CaiDatHeThong/listMajorUserPermission"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<div class="mx-5 my-2">
    <h3>Danh sách quyền theo người dùng nghiệp vụ </h3>
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="CompanyId">Công ty</label>
                        <Select2 Id="CompanyId" Items="@selectCompanys" OnChange="@OnSelectCompany"></Select2>
                        <ValidationMessage For="()=>Input.CompanyId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-3 col-md-3">
                        <label for="Table">Nghiệp vụ cha</label>
                        <Select2 Id="selectParentMajor" Items="@selectParentMajors" OnChange="@OnSelectParentMajor"></Select2>
                        <ValidationMessage For="()=>Input.ParentMajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="MajorId">Nghiệp vụ</label>
                        <Select2 Id="MajorId" Items="@selectMajors" OnChange="@OnSelectMajor"></Select2>
                        <ValidationMessage For="()=>Input.MajorId"></ValidationMessage>
                    </div>

                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="UserId">Người dùng</label>
                        <Select2 Id="UserId" Items="@selectUsers" OnChange="@OnSelectUser"></Select2>
                        <ValidationMessage For="()=>Input.UserId"></ValidationMessage>
                    </div>
                    <div class="form-floating col mt-2">
                        <p>Loại quyền: @string.Join(", ", selectedItems.Select(item => item.Text))</p>
                        <MultiSelect Items="listPer" ItemsChanged="OnItemsChanged" />
                        <ValidationMessage For="()=>Input.PermissionId"></ValidationMessage>
                    </div>
                </div>
                <div class="row">
                    <div class="form-floating col-sm-12 col-md-12">
                        <label>Thứ <span class="text-danger">*</span> : @string.Join(", ", selectedDays.Select(item => item.Text)) </label>
                        <MultiSelect Items="listDayinWeek" ItemsChanged="ToggleSelection" />
                        <ValidationMessage For="()=>Input.DayinWeek"></ValidationMessage>
                    </div>
                    <p></p>

                </div>
                <DataAnnotationsValidator />

                <div class="row mt-5 justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <div>
        <EditForm Model="majorUserPermissionModel" FormName="SearchNghiepVu" OnValidSubmit="@Search">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="CompanyId">Công ty</label>
                    <Select2 Id="CompanyId1" Items="@selectCompanys" OnChange="@OnSelectCompanySear"></Select2>
                    <ValidationMessage For="()=>majorUserPermissionModel.CompanyId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="MajorId">Nghiệp vụ cha</label>
                    <Select2 Id="selectParentMajorsSear" Items="@selectParentMajorsSear" OnChange="@OnSelectParentMajorsSear"></Select2>
                    <ValidationMessage For="()=>majorUserPermissionModel.ParentMajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="MajorId">Nghiệp vụ</label>
                    <Select2 Id="selectMajorsSear" Items="@selectMajorsSear" OnChange="@OnSelectMajorSear"></Select2>
                    <ValidationMessage For="()=>majorUserPermissionModel.MajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="UserId1">Người dùng</label>
                    <Select2 Id="UserId1" Items="@selectUsers" OnChange="@OnSelectUserSear"></Select2>
                    <ValidationMessage For="()=>majorUserPermissionModel.UserId"></ValidationMessage>
                </div>

                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="submit" class="btn btn-primary form-control">Tìm kiếm</button>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button @onclick="ShowModal" class="btn btn-primary form-control">Tạo mới</button>
                </div>
            </div>
        </EditForm>

        <div class="row mt-3 our-table">
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2">
                        </th>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyName"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">
                                Chi nhánh
                                <span class="arrow @(GetSortStyle("CompanyName"))"></span>
                            </div>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorName"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorName"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorName"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorName"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserName"))" rowspan="2" class="text-center sortable" scope="col" sortable>
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserName"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("PermissionId"))" rowspan="2" class="text-center sortable" scope="col" sortable>
                            <div class="pb-3">Loại quyền</div>
                            <span class="arrow @(GetSortStyle("PermissionId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("DayinWeek"))" rowspan="2" class="text-center sortable" scope="col" sortable>
                            <div class="pb-3">Ngày trong tuần</div>
                            <span class="arrow @(GetSortStyle("DayinWeek"))"></span>
                        </th>
                        @* <th class="text-center" colspan="2" scope="col">Thông tin tạo</th> *@
                    </tr>
                    @*  <tr>
                    <th class="text-center" scope="col">Người tạo</th>
                    <th class="text-center" scope="col">Ngày tạo</th>
                    </tr> *@
                </thead>
                @if (listMajorUserPermissionModel.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listMajorUserPermissionModel)
                        {
                            selectedItemstemp = JsonSerializer.Deserialize<List<SelectedItem>>(item?.PermissionId);
                            selectedItemDaysTemp = JsonSerializer.Deserialize<List<SelectedItem>>(item?.DayinWeek);
                            stt++;
                            <tr>
                                <td class="d-flex flex-column text-center nowrap">
                                    <div class="d-inline-block">
                                        <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item)">
                                            <i class="fas fa-edit"></i>
                                        </button>

                                        <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick='()=>ConfirmDelete(item.Id ,"Cài đặt quyền")'>
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyName</td>
                                <td class="text-center">@item.ParentMajorName</td>
                                <td class="text-center">@item.MajorName</td>
                                <td class="text-left">@item.UserName</td>
                                <td class="text-left">@string.Join(", ", selectedItemstemp.Select(item => item.Text))</td>
                                <td class="text-left">@string.Join(", ", selectedItemDaysTemp.Select(item => item.Text))</td>
                                @*    <td class="text-center">@item.CreateBy</td>
                        <td class="text-center">@item.CreateAt</td> *@
                            </tr>
                        }

                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7"> không có dữ liệu ...</td>
                        </tr>
                    </tbody>
                }

            </table>

        </div>

        @if (listMajorUserPermissionModel.Any())
        {
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
        }

    </div>

    <SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
    <ErrorModal @ref="errorModal"></ErrorModal>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>

</div>


@code {

    private MMajorUserPermission Input = new();
    private List<MMajor> listMajor = new();
    private List<MCompany> listCompany = new();
    private List<ApplicationUser> listApplicationUser = new();
    private List<MPermission> listPermission = new();
    PermissionModel permissionModel = new();
    private bool isModalVisible = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm";
    private bool isEdit = false;
    private DateTime baseTime;

    private List<SelectedItem> selectParentMajors = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectMajors = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectCompanys = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectUsers = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };

    private List<SelectedItem> selectMajorsSear = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectParentMajorsSear = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };

    private void OnSelectCompany(SelectedItem selectedItem)
    {
        Input.CompanyId = selectedItem.Value;
    }
    private async void OnSelectParentMajor(SelectedItem selectedItem)
    {
        try
        {
            selectMajors = new List<SelectedItem>{ new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true }};
            selectedItems = new();
            Input.ParentMajorId = selectedItem.Value;
            permissionModel.ParentMajorId = selectedItem.Value;
            if (!string.IsNullOrEmpty(selectedItem.Value))
            {
                var listMajor = await MajorRepository.GetMajorByParentId(selectedItem.Value);
                if (listMajor.Count() > 0)
                {
                    selectMajors = listMajor.Select(major => new SelectedItem
                        {
                            Value = major.Id,
                            Text = major.MajorName
                        }).ToList();
                    selectMajors.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
                }
                else
                {
                    Input.MajorId = "";
                    selectMajors = new();
                    Input.PermissionId = "";
                    listPer = new MultiSelectList(new List<SelectListItem> { }, "Value", "Text", "Selected");
                    ToastService.ShowToast(
                         "Thông báo",
                         "Nghiệp vụ cha:" + selectedItem.Text + ", chưa tồn tại nghiệp vụ nào !",
                         cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 7000
                     );
                }

            }

            await InvokeAsync(() =>{ StateHasChanged(); });
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                     "Thông báo",
                     ex.Message,
                     cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                     progressBarClass: "bg-info",
                     duration: 7000
                 );
        }
    }
    private async void OnSelectMajor(SelectedItem selectedItem)
    {
        try
        {
            Input.MajorId = selectedItem.Value;
            listPer = new MultiSelectList(new List<SelectListItem> { }, "Value", "Text", "Selected");
            if (!string.IsNullOrEmpty(selectedItem.Value))
            {
                permissionModel.MajorId = selectedItem.Value;
                var list = await PermissionService.GetAllByVM(permissionModel);
                if (list.Count() > 0)
                {
                    selectedItems = new();
                    Input.PermissionId = "[]";
                    listPer = new MultiSelectList(
                            list.Select(permission => new SelectListItem
                                {
                                    Value = permission.Id,
                                    Text = permission.PermissionName,
                                    Selected = false
                                }).ToList(),
                            "Value",
                            "Text"
                            );

                    MMajorUserPermission InputTemp = new();

                    InputTemp = await MajorUserPermissionService.GetMUPById(Input.Id);
                    if (InputTemp != null && !string.IsNullOrEmpty(InputTemp.PermissionId))
                    {
                        selectedItemstemp = JsonSerializer.Deserialize<List<SelectedItem>>(InputTemp.PermissionId);

                        // Thiết lập giá trị đã chọn dựa trên `selectedItemstemp`
                        foreach (var item in listPer)
                        {
                            // Kiểm tra nếu quyền này đã được chọn (dựa trên Value)
                            var selected = selectedItemstemp.FirstOrDefault(i => i.Value == item.Value);
                            if (selected != null)
                            {
                                // Đánh dấu quyền này là đã được chọn
                                item.Selected = true;
                                Input.PermissionId = InputTemp.PermissionId;
                            }
                        }
                    }
                }
                else
                {
                    Input.PermissionId ="";
                    listPer = new MultiSelectList(new List<SelectListItem>{}, "Value", "Text", "Selected");
                    ToastService.ShowToast(
                         "Thông báo",
                         "Nghiệp vụ :" + selectedItem.Text + ", chưa được khởi tạo loại quyền !",
                         cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 7000
                     );
                }

            }

            await InvokeAsync(() =>
              {
                  StateHasChanged();
              });

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                     "Thông báo",
                     ex.Message,
                     cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                     progressBarClass: "bg-info",
                     duration: 7000
                 );
        }
    }
    private void OnSelectUser(SelectedItem selectedItem)
    {
        Input.UserId = selectedItem.Value;
    }


    private void OnSelectCompanySear(SelectedItem selectedItem)
    {
        majorUserPermissionModel.CompanyId = selectedItem.Value;
    }
    private async void OnSelectParentMajorsSear(SelectedItem selectedItem)
    {
        try
        {
            majorUserPermissionModel.ParentMajorId = selectedItem.Value;
            selectMajorsSear = new List<SelectedItem>
                    {
                        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
                    };
            if (!string.IsNullOrEmpty(selectedItem.Value))
            {

                listMajor = await MajorRepository.GetMajorByParentId(selectedItem.Value);
                if (listMajor.Count() > 0)
                {
                    selectMajorsSear = listMajor.Select(major => new SelectedItem
                        {
                            Value = major.Id,
                            Text = major.MajorName
                        }).ToList();
                    selectMajorsSear.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
                }
                else
                {

                    ToastService.ShowToast(
                         "Thông báo",
                         "Nghiệp vụ cha:" + selectedItem.Text + ", chưa tồn tại nghiệp vụ nào !",
                         cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 7000
                     );
                }
                await InvokeAsync(() => { StateHasChanged(); });
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                     "Thông báo",
                     ex.Message,
                     cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                     progressBarClass: "bg-info",
                     duration: 7000
                 );
        }
    }
    private void OnSelectMajorSear(SelectedItem selectedItem)
    {
        majorUserPermissionModel.MajorId = selectedItem.Value;
    }
    private void OnSelectUserSear(SelectedItem selectedItem)
    {
        majorUserPermissionModel.UserId = selectedItem.Value;
    }

    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }


    // Danh sách quyền
    private MultiSelectList listPer = new MultiSelectList(
        new List<SelectListItem>
        {

        }, "Value", "Text", "Selected"
    );

    private MultiSelectList listDayinWeek = new MultiSelectList(
       new List<SelectListItem>
                                       {
            new SelectListItem { Value = "1", Text = "Thứ 2" },
            new SelectListItem { Value = "2", Text = "Thứ 3" },
            new SelectListItem { Value = "3", Text = "Thứ 4" },
            new SelectListItem { Value = "4", Text = "Thứ 5" },
            new SelectListItem { Value = "5", Text = "Thứ 6" },
            new SelectListItem { Value = "6", Text = "Thứ 7" },
            new SelectListItem { Value = "0", Text = "Chủ nhật" }
                                       }, "Value", "Text");

    private List<SelectedItem> selectedItems = new List<SelectedItem>();
    private List<SelectedItem> selectedItemstemp = new List<SelectedItem>();

    private List<SelectedItem> selectedDays = new List<SelectedItem>();
    private List<SelectedItem> selectedItemDaysTemp = new List<SelectedItem>();


    private void OnItemsChanged(IEnumerable<SelectListItem> items)
    {
        selectedItems = items
            .Where(i => i.Selected)
            .Select(i => new SelectedItem
                {
                    Value = i.Value,
                    Text = i.Text
                })
            .ToList();
        Input.PermissionId = JsonSerializer.Serialize(selectedItems);
    }

    private void ToggleSelection(IEnumerable<SelectListItem> items)
    {
        selectedDays = items
            .Where(i => i.Selected)
            .Select(i => new SelectedItem
                {
                    Value = i.Value,
                    Text = i.Text
                })
            .ToList();
        Input.DayinWeek = JsonSerializer.Serialize(selectedDays);
    }

    private void RefreshInput()
    {
        Input = new();
        selectedDays = new();
        selectedItems = new();
        listDayinWeek = new MultiSelectList(
       new List<SelectListItem>
                                               {
            new SelectListItem { Value = "1", Text = "Thứ 2" ,Selected =false},
            new SelectListItem { Value = "2", Text = "Thứ 3",Selected =false },
            new SelectListItem { Value = "3", Text = "Thứ 4" ,Selected =false},
            new SelectListItem { Value = "4", Text = "Thứ 5" ,Selected =false},
            new SelectListItem { Value = "5", Text = "Thứ 6",Selected =false },
            new SelectListItem { Value = "6", Text = "Thứ 7" ,Selected =false},
            new SelectListItem { Value = "0", Text = "Chủ nhật" }
                                               }, "Value", "Text");

        foreach (var item in listPer)
        {
            item.Selected = item.Value == "";
        }
        foreach (var item in selectCompanys)
        {
            item.IsSelected = item.Value == "";
        }
        selectMajors = new();
        foreach (var item in selectUsers)
        {
            item.IsSelected = item.Value == "";
        }
    }
    private void ShowModal()
    {
        isModalVisible = true;
        selectedItems = new();
        listPer = new MultiSelectList(new List<SelectListItem>{}, "Value", "Text", "Selected");
        
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        isEdit = false;
        RefreshInput();
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
        RefreshInput();
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
        selectedDays = new();
        selectedItems = new();
        isEdit = false;
        listDayinWeek = new MultiSelectList(
          new List<SelectListItem>
                             {
                new SelectListItem { Value = "1", Text = "Thứ 2" ,Selected =false},
                new SelectListItem { Value = "2", Text = "Thứ 3",Selected =false },
                new SelectListItem { Value = "3", Text = "Thứ 4" ,Selected =false},
                new SelectListItem { Value = "4", Text = "Thứ 5" ,Selected =false},
                new SelectListItem { Value = "5", Text = "Thứ 6",Selected =false },
                new SelectListItem { Value = "6", Text = "Thứ 7" ,Selected =false},
                new SelectListItem { Value = "0", Text = "Chủ nhật" }
                             }, "Value", "Text");
        RefreshInput();
    }

    public List<MajorUserPermissionModel> listMajorUserPermissionModel
    {
        get;
        set;
    } = new();

    public List<MajorUserPermissionModel> listModel
    {
        get;
        set;
    } = new();

    public MajorUserPermissionModel majorUserPermissionModel
    {
        get;
        set;
    }

    public MetaData MetaData
    {
        get;
        set;
    }


    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        majorUserPermissionModel = new();
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            listMajor = await MajorRepository.GetAll();
            var listParentMajor = await MajorRepository.GetAllParentMajor();
            listCompany = await CompanyService.GetAll();
            listApplicationUser = await UserService.GetAll();


            listModel = await MajorUserPermissionService.GetAllByVM(majorUserPermissionModel);

            listMajorUserPermissionModel = Paging(listModel);

            selectParentMajors = listParentMajor.Select(major => new SelectedItem
                {
                    Value = major.Id,
                    Text = major.MajorName
                }).ToList();

            // Thêm phần tử mặc định "chọn..."
            selectParentMajors.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectParentMajorsSear = selectParentMajors;
            selectCompanys = listCompany.Select(major => new SelectedItem
                {
                    Value = major.Id,
                    Text = major.CompanyName
                }).ToList();

            // Thêm phần tử mặc định "chọn..."
            selectCompanys.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });

            selectUsers = listApplicationUser.Select(major => new SelectedItem
                {
                    Value = major.Id,
                    Text = major.UserName
                }).ToList();

            // Thêm phần tử mặc định "chọn..."
            selectUsers.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            baseTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                      "Thông báo",
                      ex.Message,
                      cssClass: "toast-danger",
                     iconClass: "fa fa-exclamation-circle",
                      progressBarClass: "bg-info",
                      duration: 7000
                  );
        }

    }

    private async Task HandleEdit(MajorUserPermissionModel itemModel)
    {
        try
        {
            TitleModal = "Cập nhật!";
            Input = await MajorUserPermissionService.GetById(itemModel.Id);
            isEdit = true;
            isModalVisible = true;
            

            selectParentMajors = listMajor
                .Where(major => major.ParentId == null) 
                .Select(major => new SelectedItem
                    {
                        Value = major.Id,
                        Text = major.MajorName,
                        IsSelected = major.Id == itemModel.ParentMajorId
                    })
                .ToList();

            selectMajors = listMajor
                .Where(major => major.ParentId == itemModel.ParentMajorId)  
                .Select(major => new SelectedItem
                    {
                        Value = major.Id,
                        Text = major.MajorName,
                        IsSelected = major.Id == itemModel.MajorId
                    })
                .ToList();

            if (!string.IsNullOrEmpty(Input.PermissionId))
            {
                permissionModel.MajorId = Input.MajorId;
                var listPerTemp = await PermissionService.GetAllByVM(permissionModel);
                listPer = new MultiSelectList(
                listPerTemp.Select(permission => new SelectListItem
                    {
                        Value = permission.Id,
                        Text = permission.PermissionName,
                        Selected = false
                    }).ToList(),
                "Value",
                "Text"
                );
                // Chuyển đổi chuỗi JSON thành danh sách các quyền đã chọn (SelectedItem)
                selectedItemstemp = JsonSerializer.Deserialize<List<SelectedItem>>(Input.PermissionId);

                // Thiết lập giá trị đã chọn dựa trên `selectedItemstemp`
                foreach (var item in listPer)
                {
                    // Kiểm tra nếu quyền này đã được chọn (dựa trên Value)
                    var selected = selectedItemstemp.FirstOrDefault(i => i.Value == item.Value);
                    if (selected != null)
                    {
                        // Đánh dấu quyền này là đã được chọn
                        item.Selected = true;
                    }
                }
            }
            if (!string.IsNullOrEmpty(Input.DayinWeek))
            {

                // Chuyển đổi chuỗi JSON thành danh sách các quyền đã chọn (SelectedItem)
                selectedItemDaysTemp = JsonSerializer.Deserialize<List<SelectedItem>>(Input.DayinWeek);

                // Thiết lập giá trị đã chọn dựa trên `selectedItemstemp`
                foreach (var item in listDayinWeek)
                {
                    // Kiểm tra nếu quyền này đã được chọn (dựa trên Value)
                    var selected = selectedItemDaysTemp.FirstOrDefault(i => i.Value == item.Value);
                    if (selected != null)
                    {
                        // Đánh dấu quyền này là đã được chọn
                        item.Selected = true;
                    }
                }
            }

            foreach (var item in selectMajors)
            {
                item.IsSelected = item.Value == Input.MajorId;
            }
            foreach (var item in selectUsers)
            {
                item.IsSelected = item.Value == Input.UserId;
            }
            foreach (var item in selectCompanys)
            {
                item.IsSelected = item.Value == Input.CompanyId;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                      "Thông báo",
                      ex.Message,
                      cssClass: "toast-danger",
                     iconClass: "fa fa-exclamation-circle",
                      progressBarClass: "bg-info",
                      duration: 7000
                  );
        }
    }

    private string deleteId;
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    await MajorUserPermissionService.DeleteById(deleteId);
                    ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await LoadData();
                    deleteId = "";

                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                       "Thông báo",
                       ex.Message,
                       cssClass: "toast-danger",
                      iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 7000
                   );
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var condition = await MajorUserPermissionRepository.GetExist(Input);
            string[] idPermissions = [];
            selectedItemstemp = JsonSerializer.Deserialize<List<SelectedItem>>(Input.PermissionId);
            if (selectedItemstemp != null && selectedItemstemp.Count > 0)
            {
                idPermissions = selectedItemstemp.Select(item => item.Value).ToArray();
            }
            selectedItemstemp = new();
            var isValidPermission = await PermissionService.CheckExclusive(idPermissions, baseTime);
            string[] idMajors = { Input.MajorId };
            var isValidMajor = await MajorService.CheckExclusive(idMajors, baseTime);

            if (isEdit)
            {
                if (condition != null && condition.Count() > 0)
                {
                    if (condition[0].Id == Input.Id)
                    {
                        string[] ids = { Input.Id };
                        var isValid = await MajorUserPermissionService.CheckExclusive(ids, baseTime);

                        if (isValid && isValidPermission && isValidMajor)
                        {
                            await MajorUserPermissionService.Update(Input);
                            ToastService.ShowToast(
                                "Thông báo",
                                "cập nhật thành công.",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            Input.Id = Guid.NewGuid().ToString();
                            await LoadData();
                            isEdit = false;
                            isModalVisible = false;
                            RefreshInput();
                        }
                    }
                    else
                    {
                        ToastService.ShowToast(
                          "Thông báo",
                           "Đã tồn tại",
                          cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                          progressBarClass: "bg-info",
                          duration: 5000
                      );

                    }

                }
                else
                {
                    string[] ids = { Input.Id };
                    var isValid = await MajorUserPermissionService.CheckExclusive(ids, baseTime);
                    if (isValid && isValidPermission && isValidMajor)
                    {
                        await MajorUserPermissionService.Update(Input);
                        ToastService.ShowToast(
                            "Thông báo",
                            "cập nhật thành công.",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        Input.Id = Guid.NewGuid().ToString();
                        await LoadData();
                        isEdit = false;
                        isModalVisible = false;
                        RefreshInput();
                    }
                }
            }
            else
            {
                if (condition != null && condition.Count() > 0)
                {
                    ToastService.ShowToast(
                           "Thông báo",
                            "Đã tồn tại",
                           cssClass: "toast-danger",
                          iconClass: "fa fa-exclamation-circle",
                           progressBarClass: "bg-info",
                           duration: 5000
                       );
                    return;

                }
                else
                {
                    if (isValidPermission && isValidMajor)
                    {
                        await MajorUserPermissionRepository.InsertById(Input);
                        ToastService.ShowToast(
                            "Thông báo",
                            "Thêm thành công.",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        Input.Id = Guid.NewGuid().ToString();
                        await LoadData();
                        RefreshInput();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                       "Thông báo",
                       ex.Message,
                       cssClass: "toast-danger",
                      iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 7000
                   );
        }
    }

    // Xử lý tìm kiếm
    public async Task Search()
    {
        majorUserPermissionModel.PageNumber = 1;
        await LoadData();
    }



    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        majorUserPermissionModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        majorUserPermissionModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        majorUserPermissionModel.PageNumber = 1;
        majorUserPermissionModel.pageSize = pageSize;
        Paging(listModel);
    }

    // Xử lý paging
    private List<MajorUserPermissionModel> Paging(List<MajorUserPermissionModel> list)
    {
        // Đếm số bản ghi thỏa mãn
        var count = list.Count();

        // Lọc bản ghi theo page hiện tại và page size
        list = list.Skip((majorUserPermissionModel.PageNumber - 1) * majorUserPermissionModel.PageSize).Take(majorUserPermissionModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listMajorUserPermissionModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var item in list)
        {
            listMajorUserPermissionModel.Add(item);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<MajorUserPermissionModel>(listMajorUserPermissionModel, count, majorUserPermissionModel.PageNumber, majorUserPermissionModel.PageSize);
        MetaData = pagelist.MetaData;
        return list;
    }



    private void Redirect()
    {
        Input = new();
    }

}