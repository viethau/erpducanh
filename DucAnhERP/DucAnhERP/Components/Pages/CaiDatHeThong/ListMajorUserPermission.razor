@page "/CaiDatHeThong/MajorUserPermissions"
@using System.Linq
@using DucAnhERP.Components.Pages.Common
@using DucAnhERP.Helpers
@using DucAnhERP.Models

@using DucAnhERP.SeedWork
@using DucAnhERP.ViewModel
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject NavigationManager navigation
@inject DucAnhERP.Services.ToastService ToastService
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<IdentityUser> SignInManager

<div class="mx-5 my-2">
    <h3>Danh sách</h3>
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" id="formInput" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="CompanyId">Chi nhánh</label>
                        <Select2 Id="CompanyId" Items="@selectCompanyIdInput" OnChange="@OnSelectCompanyIdInput"></Select2>
                        <ValidationMessage For="()=>Input.CompanyId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ParentMajorId">Nghiệp vụ cha</label>
                        <Select2 Id="ParentMajorId" Items="@selectParentMajorIdInput" OnChange="@OnSelectParentMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.ParentMajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="MajorId">Nghiệp vụ</label>
                        <Select2 Id="MajorId" Items="@selectMajorIdInput" OnChange="@OnSelectMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.MajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="UserId">Người dùng</label>
                        <Select2 Id="UserId" Items="@selectUserIdInput" OnChange="@OnSelectUserIdInput"></Select2>
                        <ValidationMessage For="()=>Input.UserId"></ValidationMessage>
                    </div>

                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="DayInWeek">Ngày trong tuần</label>
                        @foreach (var item in dayInWeekModels)
                        {
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox class="custom-control-input" id="@item.Id" @bind-Value="item.IsCheck" onclick="@(() => DIWCheckboxChanged(item.Id))" />
                                <label for="@item.Id" class="custom-control-label">@item.Text</label>
                            </div>
                        }
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="PermissionId">Loại quyền</label>
                        @foreach (var item in permissionInputs)
                        {
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox class="custom-control-input" id="@item.Id" @bind-Value="item.IsCheck" onclick="@(() => CheckboxChanged(item.Id))" />
                                <label for="@item.Id" class="custom-control-label">@item.Text</label>
                            </div>
                        }
                    </div>
                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(validationMessage))
                {
                    <div class=" mt-1 text-danger" role="alert">
                        @validationMessage
                    </div>
                }
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                <button class="btn btn-primary mr-2" form="formInput" type="submit">Save</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </div>
        </FooterTemplate>
    </CustomModal>
    <CustomModal IsVisible="isModalDetail" OnClose="HandleModalDetailClose" Title="Thông tin lịch sử" Size="modal-lg">
        <BodyTemplate>
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                            <span class="arrow @(GetSortStyle("CompanyId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("PermissionId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Loại quyền</div>
                            <span class="arrow @(GetSortStyle("PermissionId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("DayInWeek"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Ngày trong tuần</div>
                            <span class="arrow @(GetSortStyle("DayInWeek"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("IdMain"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">IdMain</div>
                            <span class="arrow @(GetSortStyle("IdMain"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("IsStatus"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Trạng thái</div>
                            <span class="arrow @(GetSortStyle("IsStatus"))"></span>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Ngày tạo</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Người tạo</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Ngày duyệt</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Người duyệt</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Phòng ban duyệt</div>
                        </th>
                    </tr>
                </thead>
                @if (listDetails.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listDetails)
                        {
                            stt++;
                            <tr>
                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyId</td>
                                <td class="text-left">@item.ParentMajorId</td>
                                <td class="text-left">@item.MajorId</td>
                                <td class="text-left">@item.UserId</td>
                                <td class="text-left">@item.PermissionId</td>
                                <td class="text-left">@item.DayInWeek</td>
                                <td class="text-left">@item.IdMain</td>
                                <td class="text-left">@item.IsStatus</td>
                                <td class="text-center" scope="row">@item.CreateAt</td>
                                <td class="text-center" scope="row">@item.CreateBy</td>
                                <td class="text-center" scope="row">@item.DateApproval</td>
                                <td class="text-center" scope="row">@item.ApprovalUserId</td>
                                <td class="text-center" scope="row">@item.DepartmentId</td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7">Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </BodyTemplate>
    </CustomModal>
    <div>
        <EditForm Model="pageModel" FormName="SearchData" id="SearchData" OnValidSubmit="@Search">
            <DataAnnotationsValidator />
            <div class="d-flex row">
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="CompanyIdSearch">Chi nhánh</label>
                    <Select2 Id="CompanyIdSearch" Items="@selectCompanyIdSearch" OnChange="@OnSelectCompanyIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.CompanyId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="ParentMajorIdSearch">Nghiệp vụ cha</label>
                    <Select2 Id="ParentMajorIdSearch" Items="@selectParentMajorIdSearch" OnChange="@OnSelectParentMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.ParentMajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="MajorIdSearch">Nghiệp vụ</label>
                    <Select2 Id="MajorIdSearch" Items="@selectMajorIdSearch" OnChange="@OnSelectMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.MajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="UserIdSearch">Người dùng</label>
                    <Select2 Id="UserIdSearch" Items="@selectUserIdSearch" OnChange="@OnSelectUserIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.UserId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="PermissionIdSearch">Loại quyền</label>
                    <Select2 Id="PermissionIdSearch" Items="@selectPermissionIdSearch" OnChange="@OnSelectPermissionIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.PermissionId"></ValidationMessage>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="submit" form="SearchData" class="btn btn-primary form-control">Tìm kiếm</button>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="button" @onclick="ShowModal" class="btn btn-primary form-control">Tạo mới</button>
                </div>
            </div>
        </EditForm>
        <div class="row mt-3 our-table">
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2">
                        </th>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                            <span class="arrow @(GetSortStyle("CompanyId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("PermissionId"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Loại quyền</div>
                            <span class="arrow @(GetSortStyle("PermissionId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("DayInWeek"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Ngày trong tuần</div>
                            <span class="arrow @(GetSortStyle("DayInWeek"))"></span>
                        </th>
                    </tr>
                </thead>
                @if (listMajorUserPermission.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listMajorUserPermission)
                        {
                            stt++;
                            <tr>
                                <td class="d-flex flex-column text-center nowrap">
                                    <div class="d-inline-block">
                                        <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.IdMain)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.IdMain ,item.ParentMajorId )">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                        @* <button class="btn btn-sm btn-primary m-1" title="Chi tiết" @onclick="()=>DetailAction(item.IdMain)">
                                <i class="fa fa-info-circle"></i>
                                </button> *@
                                    </div>
                                </td>
                                <td class="text-center" scope="row">
                                    @stt
                                </td>
                                <td class="text-left">@item.CompanyId</td>
                                <td class="text-left">@item.ParentMajorId</td>
                                <td class="text-left">@item.MajorId</td>
                                <td class="text-left">@item.UserId</td>
                                <td class="text-left">@item.PermissionId</td>
                                <td class="text-left">@item.DayInWeekText</td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7">Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        @if (listMajorUserPermission.Any())
        {
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
        }
    </div>
    <SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
    <ErrorModal @ref="errorModal"></ErrorModal>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>
@code {
    private MajorUserPermission Input = new();
    private List<ChiNhanhModel>? listCompanyIdSearch = new();
    private List<ChiNhanh> listCompanyIdInput = new();
    public string CompanyIdText { get; set; } = "";
    private List<MajorModel>? listParentMajorIdSearch = new();
    private List<Major> listParentMajorIdInput = new();
    public string ParentMajorIdText { get; set; } = "";
    private List<MajorModel>? listMajorIdSearch = new();
    private List<Major> listMajorIdInput = new();
    public string MajorIdText { get; set; } = "";
    public string PermissionIdText { get; set; } = "";
    public string DayInWeekText { get; set; } = "";
    public string validationMessage = "";
    private List<ApplicationUserModel>? listUserIdSearch = new();
    private List<ApplicationUser> listUserIdInput = new();
    public string UserIdText { get; set; } = "";
    private List<PermissionModel>? listPermissionIdSearch = new();
    private List<Permission> listPermissionIdInput = new();
    private bool isModalVisible = false;
    private bool isModalDetail = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm";
    private bool isEdit = false;
    private DateTime baseTime;
    private string idMain = "";
    private string deleteId;
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;
    private List<SelectedItem> selectCompanyIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectCompanyIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };


    List<PermissionInput> permissionInputs = new List<PermissionInput>();

    public class PermissionInput
    {
        public string Id { get; set; } = Guid.NewGuid().ToString();
        public string Text { get; set; }
        public bool IsCheck { get; set; }
    }

    public class DayInWeekModel
    {
        public int Id { get; set; }
        public string Text { get; set; }
        public bool IsCheck { get; set; }
    }
    List<DayInWeekModel> dayInWeekModels = new List<DayInWeekModel>
    {
        new DayInWeekModel { Id = 1, Text = "Thứ 2", IsCheck = false },
        new DayInWeekModel { Id = 2, Text = "Thứ 3", IsCheck = false },
        new DayInWeekModel { Id = 3, Text = "Thứ 4", IsCheck = false },
        new DayInWeekModel { Id = 4, Text = "Thứ 5", IsCheck = false },
        new DayInWeekModel { Id = 5, Text = "Thứ 6", IsCheck = false },
        new DayInWeekModel { Id = 6, Text = "Thứ 7", IsCheck = false },
        new DayInWeekModel { Id = 0, Text = "Chủ nhật", IsCheck = false }
    };

    private void OnSelectCompanyIdInput(SelectedItem selectedItem)
    {
        Input.CompanyId = selectedItem.Value;
        CompanyIdText = selectedItem.Text;
    }
    private void OnSelectCompanyIdSearch(SelectedItem selectedItem)
    {
        pageModel.CompanyId = selectedItem.Value;
    }
    private List<SelectedItem> selectParentMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectParentMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectParentMajorIdInput(SelectedItem selectedItem)
    {
        Input.ParentMajorId = selectedItem.Value;
        ParentMajorIdText = selectedItem.Text;
        Input.MajorId = "";
        Input.PermissionId = "";
        permissionInputs = new List<PermissionInput>();
        listMajorIdInput = MajorService.GetMajorByParentId1(selectedItem.Value);
        selectMajorIdInput = listMajorIdInput.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

    }
    private void OnSelectParentMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.ParentMajorId = selectedItem.Value;

    }
    private List<SelectedItem> selectMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectMajorIdInput(SelectedItem selectedItem)
    {
        Input.MajorId = selectedItem.Value;
        MajorIdText = selectedItem.Text;
        Input.PermissionId = "";
        listPermissionIdInput = PermissionService.LoadByMajor1(selectedItem.Value);
        permissionInputs = new List<PermissionInput>();
        foreach (var item in listPermissionIdInput)
        {
            var iteminsert = new PermissionInput()
                {
                    Id = item.Id,
                    Text = item.PermissionName,
                    IsCheck = false
                };
            permissionInputs.Add(iteminsert);
        }
    }
    private void OnSelectMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.MajorId = selectedItem.Value;
    }
    private List<SelectedItem> selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectUserIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectUserIdInput(SelectedItem selectedItem)
    {
        Input.UserId = selectedItem.Value;
        UserIdText = selectedItem.Text;
    }
    private void OnSelectUserIdSearch(SelectedItem selectedItem)
    {
        pageModel.UserId = selectedItem.Value;
    }
    private List<SelectedItem> selectPermissionIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectPermissionIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectPermissionIdInput(SelectedItem selectedItem)
    {
        Input.PermissionId = selectedItem.Value;
        PermissionIdText = selectedItem.Text;
    }
    private void OnSelectPermissionIdSearch(SelectedItem selectedItem)
    {
        pageModel.PermissionId = selectedItem.Value;
    }
    private void CheckboxChanged(string id)
    {
        PermissionIdText = "";
        foreach (var item in permissionInputs)
        {
            if (item.Id == id)
            {
                item.IsCheck = !item.IsCheck;
            }
            if (item.IsCheck)
            {
                PermissionIdText += PermissionIdText == "" ? item.Text : ", " + item.Text;
            }
        }
    }
    private void DIWCheckboxChanged(int id)
    {
        DayInWeekText = "";
        foreach (var item in dayInWeekModels)
        {
            if (item.Id == id)
            {
                item.IsCheck = !item.IsCheck;
            }
            if (item.IsCheck)
            {
                DayInWeekText += DayInWeekText == "" ? item.Text : ", " + item.Text;
            }
        }
    }

    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }
    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
        Refresh();
    }
    private void HandleModalDetailClose(bool isVisible)
    {
        isModalDetail = isVisible;
    }
    private void HandleSave()
    {
        isModalVisible = false;
    }
    private void HandleCancel()
    {
        isModalVisible = false;
        Input = new();
        isEdit = false;
        Refresh();
    }
    private void Refresh()
    {
        //QuangMinh đặt select2 về mặc định
        foreach (var item in selectCompanyIdInput)
        {
            item.IsSelected = item.Value == "";
        }
        foreach (var item in selectParentMajorIdInput)
        {
            item.IsSelected = item.Value == "";
        }
        foreach (var item in selectMajorIdInput)
        {
            item.IsSelected = item.Value == "";
        }
        foreach (var item in selectUserIdInput)
        {
            item.IsSelected = item.Value == "";
        }
        foreach (var item in dayInWeekModels)
        {
            item.IsCheck = false;
        }
        foreach (var item in permissionInputs)
        {
            item.IsCheck = false;
        }
        permissionInputs = new List<PermissionInput>();
    }
    public List<MajorUserPermissionModel> listMajorUserPermission
    {
        get;
        set;
    } = new();
    public List<MajorUserPermissionModel> listDetails
    {
        get;
        set;
    } = new();
    public List<MajorUserPermissionModel> listModel
    {
        get;
        set;
    } = new();
    [SupplyParameterFromForm(FormName = "SearchData")]
    public MajorUserPermissionModel pageModel
    {
        get;
        set;
    }
    public MetaData MetaData
    {
        get;
        set;
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
        }
        pageModel = new();
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "AAC96A58-857C-47AF-BAD1-EBDEA02645A4");
            listCompanyIdSearch = await MajorUserPermissionService.GetChiNhanhsForCompanyId(groupId);
            selectCompanyIdSearch = listCompanyIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh
                }).ToList();
            selectCompanyIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listCompanyIdInput = await ChiNhanhService.GetAll(groupId);
            selectCompanyIdInput = listCompanyIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh
                }).ToList();
            selectCompanyIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listParentMajorIdSearch = await MajorUserPermissionService.GetMajorsForParentMajorId(groupId);
            selectParentMajorIdSearch = listParentMajorIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectParentMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listParentMajorIdInput = await MajorService.GetAllParentMajor();
            selectParentMajorIdInput = listParentMajorIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectParentMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listMajorIdSearch = await MajorUserPermissionService.GetMajorsForMajorId(groupId);
            selectMajorIdSearch = listMajorIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listUserIdSearch = await MajorUserPermissionService.GetApplicationUsersForUserId(groupId);
            selectUserIdSearch = listUserIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.Email
                }).ToList();
            selectUserIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listUserIdInput = await ApplicationUserService.GetAll(groupId);
            selectUserIdInput = listUserIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.Email
                }).ToList();
            selectUserIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listPermissionIdSearch = await MajorUserPermissionService.GetPermissionsForPermissionId(groupId);
            selectPermissionIdSearch = listPermissionIdSearch.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.PermissionName
                }).ToList();
            selectPermissionIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            baseTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task HandleEdit(string id)
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "04EDB742-5723-49E2-98BC-F85A9F693D18");
            TitleModal = "Cập nhật";
            Input = await MajorUserPermissionService.GetById(id);
            var getData = await MajorUserPermissionService.GetByIdMain(id);
            var dataselect = MajorUserPermissionService.GetToEdit(id);
            if (dataselect != null)
            {
                CompanyIdText = dataselect.CompanyId;
                ParentMajorIdText = dataselect.ParentMajorId;
                MajorIdText = dataselect.MajorId;
            }
            idMain = Input.IdMain;

            foreach (var item in selectCompanyIdInput)
            {
                item.IsSelected = item.Value == Input.CompanyId;
            }
            foreach (var item in selectParentMajorIdInput)
            {
                item.IsSelected = item.Value == Input.ParentMajorId;
            }

            listMajorIdInput = await MajorService.GetAll(Input.ParentMajorId);
            selectMajorIdInput = listMajorIdInput.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName
                }).ToList();
            selectMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            foreach (var item in selectMajorIdInput)
            {
                item.IsSelected = item.Value == Input.MajorId;
            }
            foreach (var item in selectUserIdInput)
            {
                item.IsSelected = item.Value == Input.UserId;
                UserIdText = item.Text;
            }

            listPermissionIdInput = PermissionService.LoadByMajor1(Input.MajorId);
            permissionInputs = new List<PermissionInput>();
            foreach (var item in listPermissionIdInput)
            {
                var iteminsert = new PermissionInput()
                    {
                        Id = item.Id,
                        Text = item.PermissionName,
                        IsCheck = false
                    };
                permissionInputs.Add(iteminsert);
            }
            PermissionIdText = "";
            foreach (var item in permissionInputs)
            {
                if (item.IsCheck)
                {
                    PermissionIdText += PermissionIdText == "" ? item.Text : ", " + item.Text;
                }
                foreach (var data in getData)
                {
                    if (item.Id == data.PermissionId)
                    {
                        item.IsCheck = true;
                    }
                }
            }
            DayInWeekText = "";
            foreach (var item in dayInWeekModels)
            {
                if (item.IsCheck)
                {
                    DayInWeekText += DayInWeekText == "" ? item.Text : ", " + item.Text;
                }
                foreach (var data in getData)
                {
                    if (item.Id == data.DayInWeek)
                    {
                        item.IsCheck = true;
                    }
                }
            }
            isEdit = true;
            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task DetailAction(string id)
    {
        try
        {
            listDetails = await MajorUserPermissionService.GetHistory(id);
            isModalDetail = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();
    }
    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    var query = await MajorUserPermissionService.GetById(deleteId);
                    if (query.IsActive == 2)
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                        "Thông tin bạn chọn đang chờ ",
                        cssClass: "toast-success",
                        iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 7000
                        );
                    }
                    else
                    {
                        // var checkDelete = await MajorUserPermissionService.CheckDelete(query);
                        var checkquyen = await PhanQuyenService.CheckPermission(groupId, query.CompanyId, user, "6C972B3C-050E-456D-B1AE-6B1C6F110F16");
                        string[] ids = { deleteId };
                        var isValid = await MajorUserPermissionService.CheckExclusive(ids, baseTime);
                        if (isValid)
                        {
                            // var firstApproval = await PhanQuyenService.GetFirstApprovalStep(query.GroupId, "2d272329-bd6a-462b-96b9-8c9626258199", "6C972B3C-050E-456D-B1AE-6B1C6F110F16");
                            // var lastApproval = await PhanQuyenService.GetLastApprovalStep(query.GroupId, "2d272329-bd6a-462b-96b9-8c9626258199", "6C972B3C-050E-456D-B1AE-6B1C6F110F16");
                            // query.DepartmentId = firstApproval.DepartmentId;
                            // query.ApprovalId = firstApproval.Id;
                            // query.LastApprovalId = lastApproval.Id;
                            query.IsActive = 100;
                            query.ApprovalOrder = 1;
                            query.DepartmentOrder = 1;
                            query.CreateAt = DateTime.Now;
                            query.CreateBy = userId;
                            // query.IsStatus = firstApproval.Content;
                            await MajorUserPermissionService.Update(query, "");
                            // var result = await MajorUserPermissionService.GetDetails(deleteId);
                            string content = "";
                            content += "<h3>Thông tin xóa</h3>";
                            content += "<table class=\"table table-hover table-bordered\">";
                            content += "<thead class=\"bg-info\">";
                            content += "<tr>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Chi nhánh</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Người dùng</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Loại quyền</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Ngày trong tuần</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">IdMain</div>";
                            content += "</th>";
                            content += "</tr>";
                            content += "</thead>";
                            content += "<tbody>";
                            content += "<tr>";
                            content += "<td class=\"text-left\">" + query.CompanyId + "</td>";
                            content += "<td class=\"text-left\">" + query.ParentMajorId + "</td>";
                            content += "<td class=\"text-left\">" + query.MajorId + "</td>";
                            content += "<td class=\"text-left\">" + query.UserId + "</td>";
                            content += "<td class=\"text-left\">" + query.PermissionId + "</td>";
                            content += "<td class=\"text-left\">" + query.DayInWeek + "</td>";
                            content += "<td class=\"text-left\">" + query.IdMain + "</td>";
                            content += "</tr>";
                            content += "</tbody>";
                            content += "</table>";

                            var emailsent = await ApplicationUserService.GetById(query.UserId);

                            var emailhistory = new EmailHistory()
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    Receiver = emailsent.Email,
                                    Subject = "Quản lý quyền theo người dùng, nghiệp vụ - Xóa",
                                    Content = content,
                                    CompanyId = query.CompanyId,
                                    UserId = query.UserId,
                                    ParentMajorId = query.ParentMajorId,
                                    MajorId = query.MajorId,
                                    IdCheck = query.Id,
                                    IdLog = "",
                                    IsMail = true,
                                    IsNotification = true,
                                    IsSMS = true,
                                    GroupId = groupId,
                                    CreateAt = DateTime.Now,
                                    CreateBy = user.Id,
                                    IsRead = 0
                                };
                            await EmailService.Insert(emailhistory, "");
                            ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                            await LoadData();
                            await Search();
                            deleteId = "";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task ApprovalAction(string id)
    {
        try
        {
            var entity = await MajorUserPermissionService.GetById(id);
            var checkquyen = await PhanQuyenService.CheckApproval(entity.GroupId, entity.DepartmentId, user, entity.ApprovalId);
            string thongbao = entity.IsStatus;
            if (entity.IsActive != 3)
            {
                if (entity.ApprovalId == entity.LastApprovalId)
                {
                    if (entity.IsActive == 0 || entity.IsActive == 1)
                    {
                        entity.IsActive = 3;
                        entity.IsStatus = "Ðã duyệt";
                    }
                    else if (entity.IsActive == 2)
                    {
                        entity.IsActive = 100;
                        entity.IsStatus = "Ðã duyệt xóa";
                    }
                }
                else
                {
                    var nextApproval = await PhanQuyenService.GetNextApprovalStep(entity.CompanyId, "2d272329-bd6a-462b-96b9-8c9626258199",
                    entity.IsActive == 0 ? "8BBE428B-B38F-48D8-81D3-1EA7877E5675" : entity.IsActive == 1 ? "04EDB742-5723-49E2-98BC-F85A9F693D18" : entity.IsActive == 2 ? "6C972B3C-050E-456D-B1AE-6B1C6F110F16" : ""
                    , entity.DepartmentId, entity.DepartmentOrder, entity.ApprovalOrder);
                    entity.DepartmentId = nextApproval.DeptId;
                    entity.IsStatus = nextApproval.Content;
                    entity.ApprovalId = nextApproval.Id;
                    entity.ApprovalOrder = nextApproval.ApprovalStep;
                    entity.DepartmentOrder = nextApproval.DeptOrder;
                    entity.ApprovalUserId = userId;
                }

                await MajorUserPermissionService.Update(entity, userId);
                ToastService.ShowToast(
                "Thông báo",
                "Đã duyệt " + thongbao.ToLower(),
                cssClass: "toast-success",
                iconClass: "fa fa-exclamation-circle",
                progressBarClass: "bg-info",
                duration: 7000
                );
            }
            await Search();
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private EditContext editContext;
    private async Task HandleValidSubmit()
    {
        try
        {
            if (IsValid())
            {
                idMain = idMain == "" ? Guid.NewGuid().ToString() : idMain;
                var CompanyIdValid = await ChiNhanhService.CheckStatus(Input.CompanyId, CompanyIdText);
                // var ParentMajorIdValid = await MajorService.CheckStatus(Input.ParentMajorId, ParentMajorIdText);
                // var MajorIdValid = await MajorService.CheckStatus(Input.MajorId, MajorIdText);
                var UserIdValid = await ApplicationUserService.CheckStatus(Input.UserId, UserIdText);
                // var PermissionIdValid = await PermissionService.CheckStatus(Input.PermissionId, PermissionIdText);
                Input.GroupId = groupId;
                Input.CreateBy = userId;
                Input.CreateAt = DateTime.Now;
                Input.IdMain = idMain;
                string[] ids = { Input.Id };
                // var isValid = await MajorUserPermissionService.CheckExclusive(ids, baseTime);
                var checkEdit = await MajorUserPermissionService.CheckEdit(Input);
                var checkquyen = await PhanQuyenService.CheckPermission(groupId, Input.CompanyId, user, "04EDB742-5723-49E2-98BC-F85A9F693D18");

                // var firstApproval = await PhanQuyenService.GetFirstApprovalStep(Input.GroupId, "2d272329-bd6a-462b-96b9-8c9626258199", "04EDB742-5723-49E2-98BC-F85A9F693D18");
                // var lastApproval = await PhanQuyenService.GetLastApprovalStep(Input.GroupId, "2d272329-bd6a-462b-96b9-8c9626258199", "04EDB742-5723-49E2-98BC-F85A9F693D18");
                // Input.DepartmentId = firstApproval.DepartmentId;
                // Input.ApprovalId = firstApproval.Id;
                // Input.LastApprovalId = lastApproval.Id;

                Input.Ordinarily = Input.IsActive == 3 ? Input.Ordinarily + 1 : Input.Ordinarily;
                Input.IsActive = 1;
                Input.ApprovalOrder = 1;
                Input.DepartmentOrder = 1;
                // Input.IsStatus = firstApproval.Content;

                var listAdd = new List<MajorUserPermission>();
                foreach (var item in permissionInputs)
                {
                    if (item.IsCheck)
                    {
                        foreach (var diw in dayInWeekModels)
                        {
                            if (diw.IsCheck)
                            {
                                var addItem = new MajorUserPermission()
                                    {
                                        Id = Guid.NewGuid().ToString(),
                                        CompanyId = Input.CompanyId,
                                        ParentMajorId = Input.ParentMajorId,
                                        MajorId = Input.MajorId,
                                        UserId = Input.UserId,
                                        PermissionId = item.Id,
                                        DayInWeek = diw.Id,
                                        IdMain = Input.Id,
                                        GroupId = Input.GroupId,
                                        Ordinarily = Input.Ordinarily,
                                        CreateAt = Input.CreateAt,
                                        CreateBy = Input.CreateBy,
                                        IsActive = Input.IsActive,
                                        ApprovalUserId = Input.ApprovalUserId,
                                        DateApproval = Input.DateApproval,
                                        DepartmentId = Input.DepartmentId,
                                        DepartmentOrder = Input.DepartmentOrder,
                                        ApprovalOrder = Input.ApprovalOrder,
                                        ApprovalId = Input.ApprovalId,
                                        LastApprovalId = Input.LastApprovalId,
                                        IsStatus = Input.IsStatus
                                    };
                                listAdd.Add(addItem);
                            }
                        }
                    }
                }

                await MajorUserPermissionService.UpdateMulti(listAdd, idMain);
                string content = "";
                content += "<h3>Thông tin sửa</h3>";
                content += "<table class=\"table table-hover table-bordered\">";
                content += "<thead class=\"bg-info\">";
                content += "<tr>";
                content += "<th class=\"text-center\" rowspan=\"2\" scope=\"col\">";
                content += "<div class=\"pb-3\">No.</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Chi nhánh</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Người dùng</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Loại quyền</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Ngày trong tuần</div>";
                content += "</th>";
                content += "</tr>";
                content += "</thead>";

                content += "<tbody>";

                content += "<tr>";
                content += "<td class=\"text-center\" scope=\"row\">";
                content += "</td>";
                content += "<td class=\"text-left\">" + CompanyIdText + "" + "</td>";
                content += "<td class=\"text-left\">" + ParentMajorIdText + "" + "</td>";
                content += "<td class=\"text-left\">" + MajorIdText + "" + "</td>";
                content += "<td class=\"text-left\">" + UserIdText + "" + "</td>";
                content += "<td class=\"text-left\">" + PermissionIdText + "" + "</td>";
                content += "<td class=\"text-left\">" + DayInWeekText + "" + "</td>";
                content += "</tr>";
                content += "</tbody>";

                content += "</table>";

                var emailhistory = new EmailHistory()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Receiver = UserIdText,
                        Subject = "Quản lý quyền theo người dùng, nghiệp vụ - Sửa.",
                        Content = content,
                        CompanyId = Input.CompanyId,
                        UserId = Input.UserId,
                        ParentMajorId = Input.ParentMajorId,
                        MajorId = Input.MajorId,
                        IdCheck = Input.Id,
                        IdLog = "",
                        IsMail = true,
                        IsNotification = true,
                        IsSMS = true,
                        GroupId = groupId,
                        CreateAt = DateTime.Now,
                        CreateBy = user.Id,
                        IsRead = 0
                    };

               // await EmailService.Insert(emailhistory, "");
                ToastService.ShowToast(
                "Thông báo",
                "Cập nhật thành công.",
                iconClass: "fa fa-check-circle",
                progressBarClass: "bg-info",
                duration: 5000
                );
                Input.Id = Guid.NewGuid().ToString();
                await LoadData();
                await Search();
                isEdit = false;
                // isModalVisible = false;
            }

        }

        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    
    private bool IsValid()
    {
        bool isValid = false;

        bool hasCheckedDayInWeek = dayInWeekModels.Any(item => item.IsCheck);
        bool hasCheckedPermission = permissionInputs.Any(item => item.IsCheck);

        if (hasCheckedDayInWeek)
        {
            if (hasCheckedPermission)
            {
                isValid = true;
                validationMessage="";
            }
            else
            {
                validationMessage = "Bạn phải chọn ít nhất 1 loại quyền!";
            }
        }
        else
        {
            validationMessage= "Bạn phải chọn ít nhất 1 ngày trong tuần.";
        }
        return isValid;
    }
    public async Task Search()
    {
        var checkquyen = await PhanQuyenService.CheckPermission(groupId, pageModel.CompanyId, user, "0BB494A3-507C-4A62-A36A-9FD1745AEECB");
        pageModel.PageNumber = 1;
        listModel = await MajorUserPermissionService.GetAllByVM(pageModel, groupId);
        listMajorUserPermission = Paging(listModel);
    }
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        pageModel.PageNumber = 1;
        Paging(listModel);
    }
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    private void SelectedPage(int page)
    {
        pageModel.PageNumber = page;
        Paging(listModel);
    }
    private void ChangePageSize(int pageSize)
    {
        pageModel.PageNumber = 1;
        pageModel.pageSize = pageSize;
        Paging(listModel);
    }
    private List<MajorUserPermissionModel> Paging(List<MajorUserPermissionModel> list)
    {
        var count = list.Count();
        list = list.Skip((pageModel.PageNumber - 1) * pageModel.PageSize).Take(pageModel.PageSize).ToList();
        listMajorUserPermission.Clear();
        foreach (var item in list)
        {
            listMajorUserPermission.Add(item);
        }
        var pagelist = new PageList<MajorUserPermissionModel>(listMajorUserPermission, count, pageModel.PageNumber, pageModel.PageSize);
        MetaData = pagelist.MetaData;
        return list;
    }
    private void Redirect()
    {
        Input = new();
    }
}
