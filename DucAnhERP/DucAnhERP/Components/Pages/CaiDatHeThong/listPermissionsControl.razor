@page "/CaiDatHeThong/ListPermissionsControl"
@using DucAnhERP.Helpers
@using DucAnhERP.ViewModel
@using DucAnhERP.Models
@using DucAnhERP.Components.Pages.Common
@using System.Linq
@using DucAnhERP.SeedWork
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager navigation
@inject DucAnhERP.Services.ToastService ToastService
@inject IMajorRepository MajorRepository
@attribute [Authorize]

<div class="mx-5 my-2">
    <h3>Danh sách cài đặt quyền </h3>
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                  
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="CompanyId">Công ty</label>
                        <Select2 Id="CompanyId" Items="@selectCompanys" OnChange="@OnSelectCompany"></Select2>
                        <ValidationMessage For="()=>Input.CompanyId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-3 col-md-3">
                        <label for="Table">Nghiệp vụ cha</label>
                        <Select2 Id="selectParentMajor" Items="@selectParentMajors" OnChange="@OnSelectParentMajor"></Select2>    
                    </div>  
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="MajorId">Nghiệp vụ</label>
                        <Select2 Id="MajorId" Items="@selectMajors" OnChange="@OnSelectMajor"></Select2>
                        <ValidationMessage For="()=>Input.MajorId"></ValidationMessage>
                    </div>
                 
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="UserId">Người dùng</label>
                        <Select2 Id="UserId" Items="@selectUsers" OnChange="@OnSelectUser"></Select2>
                        <ValidationMessage For="()=>Input.UserId"></ValidationMessage>
                    </div>
                </div>

                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mt-5 justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <div>
        <EditForm Model="permissionsControlModel" FormName="SearchNghiepVu" OnValidSubmit="@Search">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="CompanyId">Công ty</label>
                    <Select2 Id="CompanyId1" Items="@selectCompanys" OnChange="@OnSelectCompanySear"></Select2>
                    <ValidationMessage For="()=>permissionsControlModel.CompanyId"></ValidationMessage>
                </div>

                <div class="form-floating col-sm-3 col-md-2">
                    <label for="MajorId">Nghiệp vụ cha</label>
                    <Select2 Id="selectParentMajorsSear" Items="@selectParentMajorsSear" OnChange="@OnSelectParentMajorsSear"></Select2>
                    <ValidationMessage For="()=>permissionsControlModel.ParentMajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="MajorId">Nghiệp vụ</label>
                    <Select2 Id="selectMajorsSear" Items="@selectMajorsSear" OnChange="@OnSelectMajorSear"></Select2>
                    <ValidationMessage For="()=>permissionsControlModel.MajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-2">
                    <label for="UserId1">Người dùng</label>
                    <Select2 Id="UserId1" Items="@selectUsers" OnChange="@OnSelectUserSear"></Select2>
                    <ValidationMessage For="()=>permissionsControlModel.UserId"></ValidationMessage>
                </div>

                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="submit" class="btn btn-primary form-control">Tìm kiếm</button>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button @onclick="ShowModal" class="btn btn-primary form-control">Tạo mới</button>
                </div>
            </div>
        </EditForm>

        <div class="row mt-3 our-table">
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2">
                        </th>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyName"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">
                                Chi nhánh
                                <span class="arrow @(GetSortStyle("CompanyName"))"></span>
                            </div>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorName"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorName"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorName"))" rowspan="2" class="text-center sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorName"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserName"))" rowspan="2" class="text-center sortable" scope="col" sortable>
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserName"))"></span>
                        </th>
                        @* <th class="text-center" colspan="2" scope="col">Thông tin tạo</th> *@
                    </tr>
                    @*  <tr>
                    <th class="text-center" scope="col">Người tạo</th>
                    <th class="text-center" scope="col">Ngày tạo</th>
                    </tr> *@
                </thead>
                @if (listPermissionControlModel.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listPermissionControlModel)
                        {
                            stt++;
                            <tr>
                                <td class="d-flex flex-column text-center nowrap">
                                    <div class="d-inline-block">
                                        <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item)">
                                            <i class="fas fa-edit"></i>
                                        </button>

                                        <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick='()=>ConfirmDelete(item.Id ,"Cài đặt quyền")'>
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyName</td>
                                <td class="text-center">@item.ParentMajorName</td>
                                <td class="text-center">@item.MajorName</td>
                                <td class="text-left">@item.UserName</td>
                                @*    <td class="text-center">@item.CreateBy</td>
                        <td class="text-center">@item.CreateAt</td> *@
                            </tr>
                        }

                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7"> không có dữ liệu ...</td>
                        </tr>
                    </tbody>
                }

            </table>

        </div>

        @if (listPermissionControlModel.Any())
        {
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
        }

    </div>

    <SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
    <ErrorModal @ref="errorModal"></ErrorModal>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>

</div>


@code {

    private MPermissionControl Input = new();
    private List<MMajor> listMajor = new();
    private List<MCompany> listCompany = new();
    private List<ApplicationUser> listApplicationUser = new();
    private bool isModalVisible = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm";
    private bool isEdit = false;

    private List<SelectedItem> selectParentMajors = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectMajors = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectCompanys = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    }; 
    private List<SelectedItem> selectUsers = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };

    private List<SelectedItem> selectMajorsSear = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };
    private List<SelectedItem> selectParentMajorsSear = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
    };

    private void OnSelectCompany(SelectedItem selectedItem)
    {
        Input.CompanyId = selectedItem.Value;
    }

    private async void OnSelectParentMajor(SelectedItem selectedItem)
    {
        try
        {
            selectMajors = new List<SelectedItem>
                    {
                        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
                    };
            if (!string.IsNullOrEmpty(selectedItem.Value))
            {
                listMajor = await MajorRepository.GetMajorByParentId(selectedItem.Value);
                if (listMajor.Count() > 0)
                {
                    selectMajors = listMajor.Select(major => new SelectedItem
                        {
                            Value = major.Id,
                            Text = major.MajorName
                        }).ToList();
                    selectMajors.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
                }
                else
                {

                    ToastService.ShowToast(
                         "Thông báo",
                         "Nghiệp vụ cha:" + selectedItem.Text + ", chưa tồn tại nghiệp vụ nào !",
                         cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 7000
                     );
                }
                await InvokeAsync(() => { StateHasChanged(); });
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                     "Thông báo",
                     ex.Message,
                     cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                     progressBarClass: "bg-info",
                     duration: 7000
                 );
        }
    }

    private void OnSelectMajor(SelectedItem selectedItem)
    {
        Input.MajorId = selectedItem.Value;
    }

    private void OnSelectUser(SelectedItem selectedItem)
    {
        Input.UserId = selectedItem.Value;
    }

    //Dùng cho model search
    private async void OnSelectParentMajorsSear(SelectedItem selectedItem)
    {
        try
        {
            permissionsControlModel.ParentMajorId = selectedItem.Value;
            selectMajorsSear = new List<SelectedItem>
                    {
                        new SelectedItem { Value = "", Text = "Chọn...",IsSelected=true },
                    };
            if (!string.IsNullOrEmpty(selectedItem.Value))
            {
                
                listMajor = await MajorRepository.GetMajorByParentId(selectedItem.Value);
                if (listMajor.Count() > 0)
                {
                    selectMajorsSear = listMajor.Select(major => new SelectedItem
                        {
                            Value = major.Id,
                            Text = major.MajorName
                        }).ToList();
                    selectMajorsSear.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
                }
                else
                {

                    ToastService.ShowToast(
                         "Thông báo",
                         "Nghiệp vụ cha:" + selectedItem.Text + ", chưa tồn tại nghiệp vụ nào !",
                         cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 7000
                     );
                }
                await InvokeAsync(() => { StateHasChanged(); });
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                     "Thông báo",
                     ex.Message,
                     cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                     progressBarClass: "bg-info",
                     duration: 7000
                 );
        }
    }
    private void OnSelectMajorSear(SelectedItem selectedItem)
    {
        permissionsControlModel.MajorId = selectedItem.Value;
    }
    private void OnSelectUserSear(SelectedItem selectedItem)
    {
        permissionsControlModel.UserId = selectedItem.Value;
    }
    private void OnSelectCompanySear(SelectedItem selectedItem)
    {
        permissionsControlModel.CompanyId = selectedItem.Value;
    }

    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
        Refresh();
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
        isEdit = false;
        Refresh();
    }

    public List<PermissionControlModel> listPermissionControlModel
    {
        get;
        set;
    } = new();

    public List<PermissionControlModel> listModel
    {
        get;
        set;
    } = new();

    [SupplyParameterFromForm(FormName = "SearchNghiepVu")]
    public PermissionControlModel permissionsControlModel
    {
        get;
        set;
    }

    public MetaData MetaData
    {
        get;
        set;
    }


    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        permissionsControlModel = new();
        await LoadData();
    }

    private async Task LoadData()
    {

        listMajor = await MajorRepository.GetAll();
        listCompany = await CompanyService.GetAll();
        listApplicationUser = await UserService.GetAll();
        listModel = await PermissionControlService.GetAllByVM(permissionsControlModel);
        listPermissionControlModel = Paging(listModel);

        selectCompanys = listCompany.Select(major => new SelectedItem
            {
                Value = major.Id,
                Text = major.CompanyName
            }).ToList();

        // Thêm phần tử mặc định "chọn..."
        selectCompanys.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });

        var listParentMajor = await MajorRepository.GetAllParentMajor();
        selectParentMajors = listParentMajor.Select(major => new SelectedItem
            {
                Value = major.Id,
                Text = major.MajorName
            }).ToList();

        // Thêm phần tử mặc định "chọn..."
        selectParentMajors.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectParentMajorsSear = selectParentMajors;

        selectUsers = listApplicationUser.Select(major => new SelectedItem
            {
                Value = major.Id,
                Text = major.UserName
            }).ToList();

        // Thêm phần tử mặc định "chọn..."
        selectUsers.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
    }


    private async Task HandleEdit(PermissionControlModel itemModel)
    {
        try
        {
            TitleModal = "Cập nhật!";
            selectParentMajors = listMajor
               .Where(major => major.ParentId == null)
               .Select(major => new SelectedItem
                   {
                       Value = major.Id,
                       Text = major.MajorName,
                       IsSelected = major.Id == itemModel.ParentMajorId
                   })
               .ToList();

            selectMajors = listMajor
                .Where(major => major.ParentId == itemModel.ParentMajorId)
                .Select(major => new SelectedItem
                    {
                        Value = major.Id,
                        Text = major.MajorName,
                        IsSelected = major.Id == itemModel.MajorId
                    })
                .ToList();

            
            Input = await PermissionControlService.GetById(itemModel.Id);
            isEdit = true;
            isModalVisible = true;

            foreach (var item in selectParentMajors)
            {
                item.IsSelected = item.Value == itemModel.ParentMajorId;
            }
            foreach (var item in selectMajors)
            {
                item.IsSelected = item.Value == Input.MajorId;
            }
            foreach (var item in selectUsers)
            {
                item.IsSelected = item.Value == Input.UserId;
            }
            foreach (var item in selectCompanys)
            {
                item.IsSelected = item.Value == Input.CompanyId;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                      "Thông báo",
                      ex.Message,
                      cssClass: "toast-danger",
                     iconClass: "fa fa-exclamation-circle",
                      progressBarClass: "bg-info",
                      duration: 5000
                  );
        }
        
    }

    private string deleteId;
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            if (!string.IsNullOrEmpty(deleteId))
            {
                await PermissionControlService.DeleteById(deleteId);
                ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                await LoadData();
                deleteId = "";
            }
        }
    }

    private async Task HandleValidSubmit()
    {

        var condition = await PermissionControlService.GetExist(Input);
        if (isEdit)
        {
            if (condition != null && condition.Count() > 0 )
            {
                ToastService.ShowToast(
                       "Thông báo",
                        "Đã tồn tại",
                       cssClass: "toast-danger",
                      iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 5000
                   );
                return;

            }
            else
            {

                await PermissionControlService.Update(Input);
                ToastService.ShowToast(
                    "Thông báo",
                    "cập nhật thành công.",
                    iconClass: "fa fa-check-circle",
                    progressBarClass: "bg-info",
                    duration: 5000
                );
                Input.Id = Guid.NewGuid().ToString();
                await LoadData();
                isEdit = false;
                isModalVisible = false;
                Refresh();
            }
        }
        else
        {
            if (condition != null && condition.Count() > 0)
            {
                ToastService.ShowToast(
                       "Thông báo",
                        "Đã tồn tại",
                       cssClass: "toast-danger",
                      iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 5000
                   );
                return;

            }
            else
            {
                await PermissionControlService.Insert(Input);
                ToastService.ShowToast(
                    "Thông báo",
                    "Thêm thành công.",
                    iconClass: "fa fa-check-circle",
                    progressBarClass: "bg-info",
                    duration: 5000
                );
                Input.Id = Guid.NewGuid().ToString();
                await LoadData();
                Refresh();
            }
        }

    }

    private void Refresh()
    {
        foreach (var item in selectCompanys)
        {
            item.IsSelected = item.Value == "";
        }
        foreach (var item in selectMajors)
        {
            item.IsSelected = item.Value == "";
        }
        foreach (var item in selectUsers)
        {
            item.IsSelected = item.Value == "";
        }
    }

    // Xử lý tìm kiếm
    public async Task Search()
    {
        permissionsControlModel.PageNumber = 1;
        await LoadData();
    }

    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        permissionsControlModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        permissionsControlModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        permissionsControlModel.PageNumber = 1;
        permissionsControlModel.pageSize = pageSize;
        Paging(listModel);
    }

    // Xử lý paging
    private List<PermissionControlModel> Paging(List<PermissionControlModel> list)
    {
        // Đếm số bản ghi thỏa mãn
        var count = list.Count();

        // Lọc bản ghi theo page hiện tại và page size
        list = list.Skip((permissionsControlModel.PageNumber - 1) * permissionsControlModel.PageSize).Take(permissionsControlModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listPermissionControlModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var item in list)
        {
            listPermissionControlModel.Add(item);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<PermissionControlModel>(listPermissionControlModel, count, permissionsControlModel.PageNumber, permissionsControlModel.PageSize);
        MetaData = pagelist.MetaData;
        return list;
    }



    private void Redirect()
    {
        Input = new();
    }

}