@page "/QLNV/DanhGia"

<div class="container-fluid">
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" id="editFormId" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="container mt-4">
                    <h5 class="mb-3">Thông tin công việc</h5>
                    <table class="table table-bordered">
                        <tbody>
                            <tr>
                                <th style="width: 200px;">Người giao việc</th>
                                <td>@CongViecModels[0].Id_NguoiGiaoViec</td>
                            </tr>
                            <tr>
                                <th>Người thực hiện</th>
                                <td>@CongViecModels[0].NguoiThucHien</td>
                            </tr>
                            <tr>
                                <th>Mức độ ưu tiên</th>
                                <td>@CongViecModels[0].MucDoUuTien</td>
                            </tr>
                            <tr>
                                <th>Nội dung công việc</th>
                                <td>@CongViecModels[0].NoiDungCongViec</td>
                            </tr>
                            <tr>
                                <th>Tự đánh giá</th>
                                <td>@CongViecModels[0].TuDanhGia</td>
                            </tr>
                            <tr>
                                <th>Ngày bắt đầu - Ngày kết thúc</th>
                                <td>@CongViecModels[0].NgayBatDau - @CongViecModels[0].NgayKetThuc </td>
                            </tr>
                            <tr>
                                <th>Tiến độ</th>
                                <td>@CongViecModels[0].TienDo </td>
                            </tr>
                            <tr>
                                <th>Tệp đính kèm</th>
                                <td>
                                    <a href="@CongViecModels[0].FileDinhKem" title="@CongViecModels[0].FileDinhKem" download>
                                        <i class="fa fa-download"></i> Tải về
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>

                    <h5 class="mt-4 mb-2">Công việc con</h5>
                    <table class="table table-striped table-hover">
                        <thead class="table-info">
                            <tr>
                                <th>STT</th>
                                <th>Nội dung công việc</th>
                                <th>Tệp đính kèm</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                int stt = 1;
                            }
                            @foreach (var cvc in CongViecConModels)
                            {
                                <tr>
                                    <td>@stt</td>
                                    <td>@cvc.NoiDungCongViec</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(cvc.FileDinhKem))
                                        {
                                            <a href="@cvc.FileDinhKem" title="@cvc.FileDinhKem" download>
                                                <i class="fa fa-download"></i> Tải về
                                            </a>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Không có</span>
                                        }
                                    </td>
                                </tr>
                                stt++;
                            }
                        </tbody>
                    </table>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="Ten">Đánh giá<span class="text-danger">*</span></label>
                                <InputNumber id="DanhGia" class="form-control" @bind-Value="Input.DanhGia" />
                                <ValidationMessage For="() => Input.DanhGia" class="text-danger" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <label for="Ten">Chi chú<span class="text-danger"></span></label>
                                <InputTextArea id="GhiChu" class="form-control" @bind-Value="Input.GhiChu" />
                                <ValidationMessage For="() => Input.GhiChu" class="text-danger" />
                            </div>
                        </div>
                    </div>
                </div>


            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                <button class="btn btn-primary mr-2" type="submit" form="editFormId">Save</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </div>
        </FooterTemplate>
    </CustomModal>
    <div class="card mt-3 ">
        <div class="card-header">
            <h3 class="card-title">Danh sách</h3>
        </div>
        <div class="card-body">
            <EditForm Model="pageModel" FormName="SearchData" id="SearchData" OnValidSubmit="@Search">
                <DataAnnotationsValidator />
                <div class="d-flex row">
                    <div class="form-floating col-sm-3 col-md-3">
                        <label for="Id_NguoiThucHien">Người thực hiện</label>
                        <Select2 Id="Id_NguoiThucHien" Items="@selectNguoiThucHien" OnChange="@OnSelectNguoiThucHien"></Select2>
                        <ValidationMessage For="()=>pageModel.Id_NguoiThucHien"></ValidationMessage>
                    </div>

                    <div class="form-group ml-5">
                        <label>&nbsp;</label>
                        <button type="submit" form="SearchData" class="btn btn-primary form-control">Tìm kiếm</button>
                    </div>
                </div>
            </EditForm>
            <div class="row  our-table">
                <table class="table table-hover table-bordered">
                    <thead class="bg-info">
                        <tr>
                            <th class="text-center" style="width:1%">STT</th>
                            <th class="text-center">Nội dung công việc</th>
                            <th class="text-center">Người thực hiện</th>
                            <th class="text-center">Đánh giá</th>
                            <th class="text-center">Ghi chú</th>
                            <th class="text-center" colspan="2" rowspan="2" style="width:1%"></th>
                        </tr>

                    </thead>
                    @if (listQLNV_DanhGiaModel.Any())
                    {
                        <tbody>
                            @{
                                int stt = 1;
                            }
                            @foreach (var ndm in listQLNV_DanhGiaModel)
                            {
                                <tr>
                                    <td class="text-center">@stt</td>
                                    <td>@ndm.NoiDungCongViec</td>
                                    <td>@ndm.TenThucHien (@ndm.TaiKhoanThucHien)</td>
                                    @if (ndm.DanhGia == -1)
                                    {
                                        <td class="text-warning"> Chưa đánh giá </td>
                                    }
                                    else
                                    {
                                        <td class="text-success">@ndm.DanhGia</td>
                                    }
                                    <th class="text-center">@ndm.GhiChu</th>
                                    <td class="text-center" style="width: 1%; white-space: nowrap;">
                                            <button class="btn btn-sm btn-primary" @onclick="()=>Edit(ndm)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                    </td>

                                </tr>
                                stt++;
                            }

                        </tbody>
                    }
                    else
                    {
                        <tbody>
                            <tr>
                                <td colspan="5"> Không có dữ liệu</td>
                            </tr>
                        </tbody>
                    }

                </table>
            </div>
            @if (listQLNV_DanhGiaModel.Any())
            {
                <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
            }
        </div>
    </div>

    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>


</div>

@code {
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;

    private QLNV_DanhGia Input = new();
    private QLNV_DanhGiaModel InputModel = new();
    private DateTime baseTime;

    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới ";
    bool isEdit = false;

    private List<SelectedItem> selectNguoiThucHien = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };  

    private void ShowModal()
    {
        isEdit = false;
        isModalVisible = true;
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }
    public List<QLNV_DanhGiaModel> listQLNV_DanhGiaModel
    {
        get;
        set;
    } = new();
    public List<QLNV_DanhGiaModel> listModel
    {
        get;
        set;
    } = new();
    public MetaData MetaData {get;set; }
    [SupplyParameterFromForm(FormName = "SearchData")]
    public QLNV_DanhGiaModel pageModel { get;set;}
    public QLNV_DanhGiaModel dmModel{get;set;}

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        pageModel = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
        }
        // if (!string.IsNullOrEmpty(groupId) && user != null)
        // {
        //     await CheckQuyenService.InitializePermissions(groupId, user, "6f85445f-398d-47d6-bbea-04c267299535");
        // }
        var danhGias = await QLNV_DanhGiaService.GetByVM(new QLNV_DanhGiaModel(), userName);
        foreach (var item in danhGias)
        {
            if (!selectNguoiThucHien.Any(x => x.Value == item.Id_NguoiThucHien))
            {
                selectNguoiThucHien.Add(new SelectedItem
                    {
                        Value = item.Id_NguoiThucHien,
                        Text = item.TenThucHien + "(" +item.TaiKhoanThucHien +")"
                    });
            }
        }
        StateHasChanged();

        baseTime = DateTime.Now;
        dmModel = new();
        await Task.WhenAll(Search());
    }
    // Truy vấn data theo điều kiện tìm kiếm
    private async Task Search()
    {
        try
        {
            // var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "dac0c890-7c4b-40e4-91f3-fd8b9fb4e517");
            var DM_LoaiKLs = await QLNV_DanhGiaService.GetByVM(pageModel,userName);
            listModel = DM_LoaiKLs;
            listQLNV_DanhGiaModel = Paging(DM_LoaiKLs);
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Input.CreateBy = userName;
            Input.GroupId = groupId;
            if (isEdit)
            {
                // var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "40acc55a-b536-4068-b946-217da164d118");
                string[] ids = { Input.Id };
                bool isValid = await QLNV_DanhGiaService.CheckExclusive(ids, baseTime);
                if (isValid)
                {
                    Input.CreateBy = userName;
                    await QLNV_DanhGiaService.Update(Input, userId);
                    ToastService.ShowToast("Thông báo", "Cập nhật thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await Search();
                    isModalVisible = false;
                    Input = new();
                }
            }
            else
            {
                // var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "353cc305-7b22-48c8-97c4-b1b9ed87d405");
                Input.CreateBy = userName;
                await QLNV_DanhGiaService.Insert(Input, userId);
                ToastService.ShowToast("Thông báo", "Thêm thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                await Search();
                isModalVisible = false;
                Input = new();
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }
    private async Task isValidate()
    {
        try
        {
            string[] id_cv = new string[] { Input.Id_CongViec };
            await QLNV_CongViecService.CheckExclusive(id_cv,baseTime);
        }
        catch (Exception )
        {
            ToastService.ShowToast("Thông báo","Không tìm thấy công việc!", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }

    private string deleteId;
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }
    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            // var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "69f91ed2-1a06-4956-bef3-8ea3df8fe486");
            if (!string.IsNullOrEmpty(deleteId))
            {
                bool isInUse = await QLNV_DanhGiaService.IsIdInUse(deleteId);
                if (isInUse)
                {
                    ToastService.ShowToast("Thông báo", "Không thể xóa loại danh mục đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                }
                else
                {
                    await QLNV_DanhGiaService.DeleteById(deleteId, userId);
                    ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await Search();
                    deleteId = "";
                }
            }
        }
    }
    List<QLNV_CongViecModel> CongViecModels = new();
    List<QLNV_CongViecCon> CongViecConModels = new();

    private async Task Edit(QLNV_DanhGiaModel editModel)
    {
        try
        {
            TitleModal = "Đánh giá";
            // Lấy danh sách công việc theo điều kiện
            CongViecModels = await QLNV_CongViecService.GetByVM(new QLNV_CongViecModel
                {
                    Id_NguoiGiaoViec = editModel.Id_NguoiGiaoViec,
                    Id_NguoiThucHien = editModel.Id_NguoiThucHien
                });

            if (CongViecModels.Count > 0)
            {
                var allCVC = await QLNV_CongViecService.GetAllCVC();
                CongViecConModels = allCVC
                    .Where(x => x.Id_Task == CongViecModels[0].Id_Task)
                    .ToList();
            }
            if (editModel.DanhGia != -1)
            {
                isEdit = true;
                Input = await QLNV_DanhGiaService.GetById(editModel.Id);
            }
            else
            {
                isEdit = false;
                Input.Id_CongViec = editModel.Id_CongViec;
            }


            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }


    private async Task OnSelectNguoiThucHien(SelectedItem selectedItem)
    {
        pageModel.Id_NguoiThucHien = selectedItem.Value;
    }


    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }
    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }
    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<QLNV_DanhGiaModel> Paging(List<QLNV_DanhGiaModel> DM_LoaiKLs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = DM_LoaiKLs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        DM_LoaiKLs = DM_LoaiKLs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listQLNV_DanhGiaModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var ndm in DM_LoaiKLs)
        {
            listQLNV_DanhGiaModel.Add(ndm);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<QLNV_DanhGiaModel>(listQLNV_DanhGiaModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return DM_LoaiKLs;
    }
}
