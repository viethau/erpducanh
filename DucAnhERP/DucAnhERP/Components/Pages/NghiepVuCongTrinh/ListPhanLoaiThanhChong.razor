@page "/NghiepVuCongTrinh/PhanLoaiThanhChong"
@using DucAnhERP.ViewModel
@using DucAnhERP.Models
@using DucAnhERP.Components.Pages.Common
@using System.Linq
@using DucAnhERP.SeedWork
@* @using Microsoft.AspNetCore.Authorization *@
@inject IDanhMucRepository DanhMucRepository
@inject IPhanLoaiThanhChongRepository PhanLoaiThanhChongRepository
@inject DucAnhERP.Services.ToastService ToastService

@code {
    private bool isEdit { get; set; } = false;
}
<div class="m-5">

    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTKTHHCongHopRanh_LoaiThanhChong">Tên loại thanh chống <span class="text-danger">*</span></label>
                        <InputText @bind-Value="Input.TTKTHHCongHopRanh_LoaiThanhChong" class="form-control" id="TTKTHHCongHopRanh_LoaiThanhChong" placeholder="Tên loại thanh chống" />
                        <ValidationMessage For="() => Input.TTKTHHCongHopRanh_LoaiThanhChong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTKTHHCongHopRanh_CauTaoThanhChong">Cấu tạo thanh chống<span class="text-danger">*</span></label>
                            <select disabled="@isEdit" id="TTKTHHCongHopRanh_CauTaoThanhChong" @bind="Input.TTKTHHCongHopRanh_CauTaoThanhChong" class="form-control">
                            <option value="">Cấu tạo thanh chống...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_CTTChongRanh"))
                            {
                            <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CauTaoThanhChong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTKTHHCongHopRanh_CCaoThanhChong">C.Cao thanh chống (m)<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.TTKTHHCongHopRanh_CCaoThanhChong" class="form-control" id="TTKTHHCongHopRanh_CCaoThanhChong" placeholder="C.Cao thanh chống" />
                        <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CCaoThanhChong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTKTHHCongHopRanh_CRongThanhChong">C.Rộng thanh chống(m)<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.TTKTHHCongHopRanh_CRongThanhChong" class="form-control" id="TTKTHHCongHopRanh_CRongThanhChong" placeholder="C.Rộng thanh chống" />
                        <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CRongThanhChong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTKTHHCongHopRanh_CDai">C.Dài(m)<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.TTKTHHCongHopRanh_CDai" class="form-control" id="TTKTHHCongHopRanh_CDai" placeholder="C.Dài" />
                        <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CDai" class="text-danger" />
                    </div>
                   
                </div>


                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mt-5 justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <button class="btn btn-primary" @onclick="ShowModal">Thêm phân loại đế cống</button>

    <h3 class="mt-2">Danh sách phân loại đế cống </h3>
    <div class="row mt-3 our-table">
        <table class="table table-hover table-bordered">
            <thead class="bg-info">
                <tr>
                    <th> </th>
                    <th> STT</th>
                    <th onclick="@(() => SortTable("TTKTHHCongHopRanh_LoaiThanhChong"))" class="text-center sortable align-middle">
                        <div class="mr-3">
                            Tên loại thanh chống
                            <span class="arrow @(GetSortStyle("TTKTHHCongHopRanh_LoaiThanhChong"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("TTKTHHCongHopRanh_CauTaoThanhChong_Name"))" class="text-center sortable align-middle">
                        <div class="mr-3">
                            Cấu tạo thanh chống
                            <span class="arrow @(GetSortStyle("TTKTHHCongHopRanh_CauTaoThanhChong_Name"))"></span>
                        </div>
                    </th>
                    <th> C.Cao thanh chống (m)</th>
                    <th> C.Rộng thanh chống (m) </th>
                    <th> Chiều dài (m)</th>
                </tr>
            </thead>
            @if (listPLCTronHopNhuaModel.Any())
            {

                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var item in listPLCTronHopNhuaModel)
                    {

                        <tr>
                            <td class="d-flex nowrap">
                                <div class="d-inline-block">
                                    <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-primary m-1" title="Thêm vào sau" @onclick="()=>InsertLaterFlag(item.Flag)">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.TTKTHHCongHopRanh_LoaiThanhChong)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                            <td class="text-center">@stt</td>
                            <td>@item.TTKTHHCongHopRanh_LoaiThanhChong </td>
                            <td>@item.TTKTHHCongHopRanh_CauTaoThanhChong_Name </td>
                            <td>@item.TTKTHHCongHopRanh_CCaoThanhChong</td>
                            <td>@item.TTKTHHCongHopRanh_CRongThanhChong </td>
                            <td>@item.TTKTHHCongHopRanh_CDai </td>
                        </tr>
                        stt++;
                    }

                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        <td colspan="7"> Không có dữ liệu</td>
                    </tr>
                </tbody>
            }

        </table>

    </div>

    @if (listPLCTronHopNhuaModel.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>

@code {
    private List<PhanLoaiThanhChong> listPhanLoaiThanhChong = new List<PhanLoaiThanhChong>();
    private PhanLoaiThanhChong Input = new();
    public List<DanhMuc1> listDanhMuc = new();
    private DateTime baseTime;

    private bool isModalVisible = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm mới loại đế cống";


    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;

    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
        isEdit = false;
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    public List<PhanLoaiThanhChongModel> listPLCTronHopNhuaModel
    {
        get;
        set;
    } = new();

    public List<PhanLoaiThanhChongModel> listModel
    {
        get;
        set;
    } = new();

    public MetaData MetaData
    {
        get;
        set;
    }

    public PhanLoaiThanhChongModel dmModel
    {
        get;
        set;
    }



    public List<DanhMuc1> FindByIdNhomDanhMuc(string idNhomDanhMuc)
    {
        return listDanhMuc.Where(dm => dm.IdNhomDanhMuc == idNhomDanhMuc).ToList();
    }

    public string GetTenDanhMucById(string id)
    {
        var danhMuc = listDanhMuc.FirstOrDefault(dm => dm.Id == id);
        return danhMuc != null ? danhMuc.Ten : null;
    }
    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        baseTime = DateTime.Now;
        await LoadData();
    }


    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        isLoading = true;
        dmModel = new();
        listDanhMuc = await DanhMucRepository.GetAll();
        var plhg = await PhanLoaiThanhChongRepository.GetAllByVM();
        listModel = plhg;
        listPLCTronHopNhuaModel = Paging(plhg);
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            PhanLoaiThanhChong phanLoaiThanhChongExist = new();
            phanLoaiThanhChongExist = await PhanLoaiThanhChongRepository.GetPhanLoaiThanhChongExist(Input);
            var existName = false;
            existName = await PhanLoaiThanhChongRepository.CheckUsingName(Input.TTKTHHCongHopRanh_LoaiThanhChong);
            if (isEdit)
            {
                if (phanLoaiThanhChongExist == null)
                {
                    string[] ids = {Input.Id};
                    bool isValid = await PhanLoaiThanhChongRepository.CheckExclusive(ids,baseTime);
                    if (isValid)
                    {
                        // cập nhật
                        await PhanLoaiThanhChongRepository.Update(Input);
                        isModalVisible = false;
                        Input = new PhanLoaiThanhChong();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            cssClass: "toast-success",
                           iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    }

                }
                else
                if (phanLoaiThanhChongExist.TTKTHHCongHopRanh_LoaiThanhChong.ToUpper().Trim() != Input.TTKTHHCongHopRanh_LoaiThanhChong.ToUpper().Trim() && !existName)
                {
                    string[] ids = { Input.Id };
                    bool isValid = await PhanLoaiThanhChongRepository.CheckExclusive(ids, baseTime);
                    if (isValid)
                    {
                        // cập nhật
                        await PhanLoaiThanhChongRepository.Update(Input);
                        isModalVisible = false;
                        Input = new PhanLoaiThanhChong();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            cssClass: "toast-success",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    }
                }
                else
                {
                    ToastService.ShowToast(
                           "Thông báo",
                           "Tên phân loại thanh chống đã tồn tại. Vui lòng kiểm tra lại !",
                           cssClass: "toast-danger",
                           iconClass: "fa fa-exclamation-circle",
                           progressBarClass: "bg-info",
                           duration: 5000
                       );
                }
            }
            else
             if (phanLoaiThanhChongExist == null)
            {
                if (Flag > 0)
                {
                    // Thêm mới thông tin
                    var id = await PhanLoaiThanhChongRepository.InsertLaterFlag(Input, Flag);
                    isModalVisible = false;
                    Input = new PhanLoaiThanhChong();
                    ToastService.ShowToast(
                        "Thông báo",
                        "Chèn thành công.",
                        cssClass: "toast-success",
                        iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                    Flag = 0;
                }
                else
                {
                    // Thêm mới thông tin
                    await PhanLoaiThanhChongRepository.Insert(Input);
                    isModalVisible = false;
                    Input = new PhanLoaiThanhChong();
                    ToastService.ShowToast(
                        "Thông báo",
                        "Thêm thành công.",
                        cssClass: "toast-success",
                        iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                }

            }
            else
            {
                ToastService.ShowToast(
                        "Thông báo",
                        "Phân loại thanh chống đã tồn tại , Vui lòng kiểm tra lại !",
                        cssClass: "toast-danger",
                       iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                       "Thông báo",
                       ex.Message,
                       cssClass: "toast-danger",
                      iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 5000
                   );
        }


    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            if (!string.IsNullOrEmpty(deleteId))
            {

                var result = await PhanLoaiThanhChongRepository.CheckUsingId(deleteId);
                if (result)
                {
                    ToastService.ShowToast(
                        "Thông báo",
                        "Không thể xóa phân loại đang được sử dụng.",
                        cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000);
                }
                else
                {
                    // Thực hiện hành động xóa
                    await PhanLoaiThanhChongRepository.DeleteById(deleteId);
                    ToastService.ShowToast("Thông báo",
                    "Xóa phân loại thành công.",
                    iconClass: "fa fa-check-circle",
                    progressBarClass: "bg-info",
                    duration: 5000);
                    await LoadData();
                }

                deleteId = "";
            }
        }
    }


    private async Task HandleEdit(string id)
    {
        try
        {
            TitleModal = "Cập nhật loại thanh chống!";
            Input = await PhanLoaiThanhChongRepository.GetById(id);
            isEdit = true;
            isModalVisible = true;
        }catch (Exception ex)
        {
            ToastService.ShowToast(
                       "Thông báo",
                       ex.Message,
                       cssClass: "toast-danger",
                      iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 5000
                   );
        }
    }

    int Flag = 0;
    //thêm vào sau
    private void InsertLaterFlag(int flag)
    {
        Flag = flag;
        TitleModal = "Chèn loại thanh chống !";
        isModalVisible = true;
    }

    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<PhanLoaiThanhChongModel> Paging(List<PhanLoaiThanhChongModel> plhgs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = plhgs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        plhgs = plhgs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listPLCTronHopNhuaModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var item in plhgs)
        {
            listPLCTronHopNhuaModel.Add(item);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<PhanLoaiThanhChongModel>(listPLCTronHopNhuaModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return plhgs;
    }

}
