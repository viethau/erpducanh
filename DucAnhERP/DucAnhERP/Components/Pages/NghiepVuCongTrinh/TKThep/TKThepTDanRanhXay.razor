@page "/TKThep/TKThepTDanRanhXay"
@using DucAnhERP.ViewModel
@using DucAnhERP.Models
@using DucAnhERP.Components.Pages.Common
@using System.Linq
@using DucAnhERP.SeedWork
@using DucAnhERP.Helpers
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime
@inject ITKThepTDanRXayRepository TKThepTDanRXayRepository
@inject INuocMuaRepository NuocMuaRepository
@inject IDanhMucRepository DanhMucRepository
@inject IDMTLThepRepository DMTLThepRepository
@inject IPhanLoaiTDanTDanRepository PhanLoaiTDanTDanRepository

@inject DucAnhERP.Services.ToastService ToastService
<style>
    table {
        position: relative;
    }

        table thead tr td {
            /*   white-space: nowrap; */
            text-align: center;
            padding: 2px 5px;
        }

</style>
<div class="container-fluid">
    <div class="mt-3">
        <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
            <BodyTemplate>
                <EditForm Model="Input" id="editFormId" OnInvalidSubmit="HandleInValidSubmit" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="row">
                        <div class="form-floating col-sm-6 col-md-3">
                            <label for="Table">Loại cấu kiện</label>
                            <Select2 disabled="@isInsert" Id="select1" Items="@selectLCK" OnChange="@OnSelectChangeLCK"></Select2>
                            <ValidationMessage For="()=>Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan"></ValidationMessage>
                        </div>
                        <div class="form-floating col-sm-6 col-md-3">
                           <label for="TenCongTac">Tên công tác<span class="text-danger">*</span></label>
                            <InputText  @bind-Value="Input.TenCongTac" class="form-control" id="TenCongTac" placeholder="Tên công tác"  readonly/>
                            <ValidationMessage For="() => Input.TenCongTac" class="text-danger" />
                         </div>
                          <div class="form-floating col-sm-6 col-md-3">
                           <label for="VTLayKhoiLuong">Vị trí lấy khối lượng<span class="text-danger">*</span></label>
                            <InputText @bind-Value:after="OnValueChanged" @bind-Value="Input.VTLayKhoiLuong" class="form-control" id="VTLayKhoiLuong" placeholder="Vị trí lấy khối lượng" />
                            <ValidationMessage For="() => Input.VTLayKhoiLuong" class="text-danger" />
                         </div>
                          <div class="form-floating col-sm-6 col-md-3">
                            <label for="Table">Loại thép</label>
                            <Select2 Id="select2" Items="@selectLoaiThep" OnChange="@OnSelectChangeLoaiThep"></Select2>
                            <ValidationMessage For="()=>Input.LoaiThep"></ValidationMessage>
                        </div>
                          <div class="form-floating col-sm-6 col-md-3">
                            <label for="SoHieu">Số hiệu<span class="text-danger">*</span></label>
                            <InputNumber @oninput="OnValueChanged" readonly="@isInsert" @bind-Value="Input.SoHieu" class="form-control" id="SoHieu" placeholder="Số hiệu" />
                            <ValidationMessage For="() => Input.SoHieu" class="text-danger" />
                         </div>
                        <div class="form-floating col-sm-6 col-md-3">
                            <label for="Table">Đường kính/chiều dầy(mm,mm2)</label>
                            <Select2 disabled="@isSelectLoaiThep" Id="selectDuongKinh" Items="@selectDuongKinh" OnChange="@OnSelectChangeDuongKinh"></Select2>
                            <ValidationMessage For="()=>Input.DKCD"></ValidationMessage>
                        </div>
                          @* <div class="form-floating col-sm-6 col-md-3">
                           <label for="DKCD">Đường kính/chiều dầy(mm,mm2)<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value:after="OnValueChanged"  @bind-Value="Input.DKCD" class="form-control" id="DKCD" placeholder="Đường kính/chiều dầy" />
                            <ValidationMessage For="() => Input.DKCD" class="text-danger" />
                         </div> *@
                          <div class="form-floating col-sm-6 col-md-3">
                           <label for="SoThanh">Số thanh/01 cấu kiện<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.SoThanh" class="form-control" id="SoThanh" placeholder="Số thanh/01 cấu kiện" />
                            <ValidationMessage For="() => Input.SoThanh" class="text-danger" />
                         </div>
                          <div class="form-floating col-sm-6 col-md-3">
                           <label for="SoCK">Số cấu kiện<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value:after="OnValueChanged"  @bind-Value="Input.SoCK" class="form-control" id="SoCK" placeholder="Số cấu kiện" />
                            <ValidationMessage For="() => Input.SoCK" class="text-danger" />
                         </div>
                          <div class="form-floating col-sm-6 col-md-3">
                           <label for="TongSoThanh">Tổng số thanh<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value="Input.TongSoThanh" class="form-control" id="TongSoThanh" placeholder="Tổng số thanh" readonly />
                            <ValidationMessage For="() => Input.TongSoThanh" class="text-danger" />
                         </div>

                         <div class="form-floating col-sm-6 col-md-3">
                           <label for="ChieuDai1Thanh">Chiều dài 01 thanh (mm)/diện tích (mm2)<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value:after="OnValueChanged"  @bind-Value="Input.ChieuDai1Thanh" class="form-control" id="ChieuDai1Thanh" placeholder="Chiều dài 01 thanh" />
                            <ValidationMessage For="() => Input.ChieuDai1Thanh" class="text-danger" />
                         </div>
                         <div class="form-floating col-sm-6 col-md-3">
                           <label for="TongChieuDai">Tổng chiều dài (m,m2)<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value:after="OnValueChanged"  @bind-Value="Input.TongChieuDai" class="form-control" id="TongChieuDai" placeholder="Tổng chiều dài (m,m2)" readonly/>
                            <ValidationMessage For="() => Input.TongChieuDai" class="text-danger" />
                         </div>
                          <div class="form-floating col-sm-6 col-md-3">
                           <label for="TrongLuong">Trọng lượng thép/(kg/m,m3)<span class="text-danger">*</span></label>
                            <InputNumber @bind-Value="Input.TrongLuong" class="form-control" id="TrongLuong" placeholder="Trọng lượng thép/(kg/m,m3)"  readonly/>
                            <ValidationMessage For="() => Input.TrongLuong" class="text-danger" />
                         </div>
                            <div class="form-floating col-sm-6 col-md-3">
                           <label for="TongTrongLuong">Tổng trọng lượng (kg)<span class="text-danger">*</span></label>
                           <InputNumber @bind-Value="Input.TongTrongLuong" class="form-control" id="TongTrongLuong" placeholder="Tổng trọng lượng (kg)" readonly />

                            <ValidationMessage For="() => Input.TongTrongLuong" class="text-danger" />
                         </div>
                    </div>
                </EditForm>
            </BodyTemplate>
            <FooterTemplate>
                <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                    <button class="btn btn-primary mr-2" type="submit" form="editFormId">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </FooterTemplate>
        </CustomModal>
    </div>

      <div class="row m-2 justify-content-end">
         <div class="col-md-3 col-sm-6 text-end">
            <button class="btn btn-sm btn-outline-primary me-2" @onclick="ThumbtackHeader" title="Ghim tiêu đề bảng">
                <i class="fas fa-thumbtack"></i>
            </button>
         </div>
     </div>
     <EditForm Model="InputMD" FormName="Search" OnValidSubmit="@Search">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-sm-4 col-md-2 mb-2">
                        <label for="Table">Loại cấu kiện</label>
                        <Select2 Id="select4" Items="@selectSearchLCK" OnChange="@OnSelectChangeSearchLCK"></Select2>
                        <ValidationMessage For="()=>InputMD.TTTDCongHoRanh_TenLoaiTamDanTieuChuan"></ValidationMessage>
                    </div>
                    <div class="col-sm-4 col-md-2 mb-2">
                            <label for="Table">Loại thép</label>
                            <Select2 Id="select5" Items="@selectSearchLoaiThep" OnChange="@OnSelectChangeSearchLoaiThep"></Select2>
                            <ValidationMessage For="()=>InputMD.LoaiThep"></ValidationMessage>
                        </div>
                    <!-- Search Button -->
                    <div class="col-sm-4 col-md-1 mb-1">
                        <label>&nbsp;</label>
                        <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
                    </div>
                     <div class="col-sm-4 col-md-1 mb-1">
                        <label>&nbsp;</label>
                        <button type="button" @onclick="ShowModal" class="btn btn-info w-100">Tạo mới</button>
                    </div>
                </div>
     </EditForm>

    <div id="tableContainer ">
        <div class="table-report ">
            <div>
                <div class=" mt-1">
                    <h5 class="mt-2">BẢNG THỐNG KÊ THÉP 01 TẤM ĐAN RÃNH XÂY</h5>
                </div>
                <div class=" mt-2">
                    <table id="tb-left" class="table table-hover table-bordered mt-3">
                        <thead class="bg-info @thumbtack">
                            <tr>
                                <th></th>
                                <th>STT</th>
                                <th onclick="@(() => SortTable("PhanLoaiTDanTDan_TenLoaiTamDanTieuChuan"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Loại cấu kiện
                                        <span class="arrow @(GetSortStyle("PhanLoaiTDanTDan_TenLoaiTamDanTieuChuan"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("TenCongTac"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Tên công tác
                                        <span class="arrow @(GetSortStyle("TenCongTac"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("VTLayKhoiLuong"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Vị trí lấy khối lượng
                                        <span class="arrow @(GetSortStyle("VTLayKhoiLuong"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("LoaiThep"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Loại thép
                                        <span class="arrow @(GetSortStyle("LoaiThep"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("SoHieu"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Số hiệu
                                        <span class="arrow @(GetSortStyle("SoHieu"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("DKCD"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Đường kính/chiều dầy(mm,mm2)
                                        <span class="arrow @(GetSortStyle("DKCD"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("SoThanh"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Số thanh/01 cấu kiện
                                        <span class="arrow @(GetSortStyle("SoThanh"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("SoCK"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Số cấu kiện
                                        <span class="arrow @(GetSortStyle("SoCK"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("TongSoThanh"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Tổng số thanh
                                        <span class="arrow @(GetSortStyle("TongSoThanh"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTable("ChieuDai1Thanh"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Chiều dài 01 thanh (mm)/diện tích (mm2)
                                        <span class="arrow @(GetSortStyle("ChieuDai1Thanh"))"></span>
                                    </div>
                                </th
                                 <th onclick="@(() => SortTable("TongChieuDai"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Tổng chiều dài (m,m2)
                                        <span class="arrow @(GetSortStyle("TongChieuDai"))"></span>
                                    </div>
                                </th>
                                  <th onclick="@(() => SortTable("TrongLuong"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Trọng lượng thép/(kg/m,m3)
                                        <span class="arrow @(GetSortStyle("TrongLuong"))"></span>
                                    </div>
                                </th>
                                 <th onclick="@(() => SortTable("TongTrongLuong"))" class="text-center sortable">
                                    <div class="mr-3">
                                        Tổng trọng lượng (kg)
                                        <span class="arrow @(GetSortStyle("TongTrongLuong"))"></span>
                                    </div>
                                </th>
                            </tr>

                        </thead>
                        @if (listTKThepTDanRXayModel.Any())
                        {
                            <tbody>
                                @{
                                    int stt = 0;
                                    string LoaiCK = "";
                                }
                                @foreach (var item in listTKThepTDanRXayModel)
                                {
                                    stt++;
                                    if (string.IsNullOrEmpty(LoaiCK) || LoaiCK.ToUpper().Trim() !=  @item.PhanLoaiTDanTDan_TenLoaiTamDanTieuChuan.ToUpper().Trim())
                                    {
                                        LoaiCK = @item.PhanLoaiTDanTDan_TenLoaiTamDanTieuChuan;
                                        <tr class="bg-warning">
                                            <td colspan="2"></td>
                                            <td colspan="13">@LoaiCK</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td class="d-flex nowrap">
                                                <div class="d-inline-block">
                                                    <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                                        <i class="fas fa-edit"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.TenCongTac)">
                                                        <i class="fas fa-trash"></i>
                                                    </button>
                                                     <div class="btn btn-sm p-0">
                                                        <div class="d-flex flex-column align-items-center">
                                                            <i class="fa fa-angle-up btn-top" @onclick="()=>InsertLaterFlag(item ,true)" title="Thêm vào trước" aria-hidden="true"></i>
                                                            <i class="fa fa-angle-down btn-down" @onclick="()=>InsertLaterFlag(item,false)" title="Thêm vào sau" aria-hidden="true"></i>
                                                        </div>
                                                    </div>
                                                </div>
                                         </td>
                                        <td>@stt</td>
                                         <td class="text-center"> @item.PhanLoaiTDanTDan_TenLoaiTamDanTieuChuan</td>
                                         <td class="text-center"> @item.TenCongTac</td>
                                         <td class="text-center"> @item.VTLayKhoiLuong  </td>
                                         <td class="text-center"> @item.LoaiThep_Name </td>
                                         <td class="text-center"> @item.SoHieu    </td>
                                         <td class="text-center"> @item.DKCD                                </td>
                                         <td class="text-center"> @item.SoThanh                             </td>
                                         <td class="text-center"> @item.SoCK                                </td>
                                         <td class="text-center"> @item.TongSoThanh                         </td>
                                         <td class="text-center"> @item.ChieuDai1Thanh                      </td>
                                         <td class="text-center"> @item.TongChieuDai                        </td>
                                         <td class="text-center"> @item.TrongLuong                          </td>
                                         <td class="text-center"> @item.TongTrongLuong                      </td> 
                                    </tr>
                                }
                            </tbody>
                        }
                        else
                        {
                            <tbody>
                                <tr>
                                    <td colspan="5"> Không có dữ liệu</td>
                                </tr>
                            </tbody>
                        }
                    </table>
                </div>
                <div class="mt-4">
                    @if (listTKThepTDanRXayModel.Any())
                    {
                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
                    }
                </div>
            </div>
        </div>
    </div>
   <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>


@code {

    private bool isLoading = false;
    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới ";
    bool isEdit = false;
    string thumbtack = "";
    private DateTime baseTime;

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    private TKThepTDanRXay Input = new ();
    private TKThepTDanRXayModel InputMD = new TKThepTDanRXayModel();
    private List<DMTLThepModel> DmThepMDs = new List<DMTLThepModel>();
    private DMThep DMThep = new DMThep();

    private List<SelectedItem> selectLCK = new();
    private async void OnSelectChangeLCK(SelectedItem selectedItem)
    {
        Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan = selectedItem.Value;
        await Caculate();
    }
    private List<SelectedItem> selectSearchLCK = new();
    private void OnSelectChangeSearchLCK(SelectedItem selectedItem)
    {
        InputMD.TTTDCongHoRanh_TenLoaiTamDanTieuChuan = selectedItem.Value;
    }

   public string LoaiThep = "";
    private List<SelectedItem> selectLoaiThep = new();
    private List<SelectedItem> selectDuongKinh = new();
    bool isSelectLoaiThep = true;
    private async void OnSelectChangeLoaiThep(SelectedItem selectedItem)
    {
        Input.LoaiThep = selectedItem.Value;
        LoaiThep = selectedItem.Text;
        selectDuongKinh = new();

        if (!string.IsNullOrEmpty(selectedItem.Value))
        {
            DmThepMDs = await DMTLThepRepository.GetAllByVM(new DMTLThepModel { ChungLoaiThep = selectedItem.Value });
            if (DmThepMDs.Count > 0)
            {
                foreach (var item in DmThepMDs)
                {
                    // Kiểm tra và thêm item
                    if (!string.IsNullOrEmpty(item.Id) && !selectDuongKinh.Any(x => x.Value == item.Id))
                    {
                        selectDuongKinh.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = "Đường kính: " + item.DuongKinh + " ,Đơn vị: " + item.DonVi + " ,Trọng lượng: " + item.TrongLuong
                            });
                    }
                }
                selectDuongKinh.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
                isSelectLoaiThep = false;
                await InvokeAsync(() =>
                    {
                        StateHasChanged();
                    });
            }
            else
            {
                ToastService.ShowToast(
                        "Thông báo",
                         "Không có thông số cho loại thép: " + LoaiThep,
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                isSelectLoaiThep = true;
            }
        }
        else
        {
            ToastService.ShowToast(
                        "Thông báo",
                         "Vui lòng chọn loại thép.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
            isSelectLoaiThep = true;
        }

    }

    private async Task OnSelectChangeDuongKinh(SelectedItem selectedItem)
    {
        DMThep = await DMTLThepRepository.GetById(selectedItem.Value);
        Input.DKCD = double.Parse(DMThep.DuongKinh ?? "0");
        Input.TrongLuong = DMThep.TrongLuong;
        await Caculate();
    }


    private List<SelectedItem> selectSearchLoaiThep = new();
    private void OnSelectChangeSearchLoaiThep(SelectedItem selectedItem)
    {
        InputMD.LoaiThep = selectedItem.Value;
    }

    public List<TKThepTDanRXayModel> listTKThepTDanRXayModel { get; set; } = new();
    public List<TKThepTDanRXayModel> listModel { get; set; } = new();
    public MetaData MetaData { get; set; }
    public TKThepTDanRXayModel tKThepHoGaModel { get; set; }

    //bắt sự kiện khi thay đổi
    private System.Timers.Timer _typingTimer;
    private int _debounceDelay = 500; // Thời gian đợi sau khi người dùng dừng nhập (ms)

    // Hàm được gọi sau khi bind-value hoàn tất
    private void OnValueChanged()
    {
        // Dừng Timer cũ nếu đang chạy
        _typingTimer?.Stop();

        // Khởi động Timer mới
        _typingTimer = new System.Timers.Timer(_debounceDelay);
        _typingTimer.Elapsed += async (_, _) =>
        {
            _typingTimer.Stop();
            await InvokeAsync(OnTypingStopped); // Gọi hàm xử lý khi người dùng dừng nhập
        };
        _typingTimer.AutoReset = false;
        _typingTimer.Start();
    }

    // Hàm xử lý logic khi người dùng dừng nhập
    private async Task OnTypingStopped()
    {
        // Đảm bảo dữ liệu đã được bind vào model
        await Caculate(); // Gọi logic xử lý
    }

    public async Task Caculate()
    {
        Input.TenCongTac = ($"Gia công lắp dựng thép {Input.VTLayKhoiLuong} {LoaiThep} D{Input.DKCD}");
        Input.TongSoThanh = (Input.SoThanh * Input.SoCK);
        Input.TongChieuDai = (Input.TongSoThanh * Input.ChieuDai1Thanh) / 1000;

        if(LoaiThep.Trim().ToUpper() == "THÉP BẢN")
        {
            Input.TongTrongLuong =  (Input.DKCD * Input.TongChieuDai * Input.TrongLuong) / 1000000;

        }
        else
        {
            Input.TongTrongLuong = Input.TongChieuDai * Input.TrongLuong;
        }
        Input.TongChieuDai = Math.Round(Input.TongChieuDai??0, 4);
        Input.TongTrongLuong = Math.Round(Input.TongTrongLuong??0, 4);
        await InvokeAsync(() =>
          {
              StateHasChanged();
          });
    }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
        InputMD = new();

        isInsert = false;
        insertFlagItem = new();

        SetSelectedItem(selectLCK, Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan??"");
        SetSelectedItem(selectLoaiThep, Input.LoaiThep??"");
        LoaiThep = "";
        selectDuongKinh =  new();
        isSelectLoaiThep = true;
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        isEdit = false;

         isInsert = false;
        insertFlagItem = new();

    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        isEdit = false;

        isInsert = false;
        insertFlagItem = new();

    }

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        try
        {

            await LoadData();
            var repository = await NuocMuaRepository.GetBaoCaoTDRXSDThep();
            selectLCK = new();
            foreach (var item in repository)
            {
                // Kiểm tra và thêm item
                if (!string.IsNullOrEmpty(item.Id) && !selectLCK.Any(x => x.Value == item.Id))
                {
                    selectLCK.Add(new SelectedItem
                        {
                            Value = item.TTTDCongHoRanh_TenLoaiTamDanTieuChuan,
                            Text = item.PhanLoaiTDanTDan_TenLoaiTamDanTieuChuan ?? ""
                        });
                }
            }
            selectLCK.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectSearchLCK = selectLCK;
            var dm = await DanhMucRepository.GetDMByIdNhomDanhMuc("DMThep");
            foreach (var item in dm)
            {
                // Kiểm tra và thêm item
                if (!string.IsNullOrEmpty(item.Id) && !selectLoaiThep.Any(x => x.Value == item.Id))
                {
                    selectLoaiThep.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten ?? ""
                        });
                }
            }
            selectLoaiThep.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectSearchLoaiThep = selectLoaiThep;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            tKThepHoGaModel = new();
            var repository = await TKThepTDanRXayRepository.GetAllByVM(InputMD);
            listModel = repository;
            if (listModel!= null &&  listModel.Count >0)
            {
                foreach(var item  in listModel)
                {
                    if(item.LoaiThep.Trim().ToUpper() == "THÉP BẢN")
                    {
                        item.TongTrongLuong =  (item.DKCD * item.TongChieuDai * item.TrongLuong) / 1000000;
                    }
                    else
                    {
                        item.TongTrongLuong = item.TongChieuDai * item.TrongLuong;
                    }
                     item.TongTrongLuong = Math.Round(item.TongTrongLuong ?? 0, 4);
                }
            }
            listTKThepTDanRXayModel = Paging(listModel);

            
        }
        catch (Exception)
        {

            throw;
        }
        isLoading = false;
    }

    public async Task Search()
    {
        tKThepHoGaModel.PageNumber = 1;
        await LoadData();

    }

    private async Task HandleInValidSubmit()
    {
       await JSRuntime.InvokeVoidAsync("scrollToFirstError");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await Caculate();
            string[] ids = { Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan??"" };
            var isValidTenPL = await PhanLoaiTDanTDanRepository.CheckExclusive(ids,baseTime);
            var listExist = await TKThepTDanRXayRepository.GetExist(Input);
            if (isValidTenPL)
            {
                if (isEdit)
                {
                    string[] idss = { Input.Id }; 


                    if(listExist == null || listExist.Count ==0 )
                    {
                        bool isValid = await TKThepTDanRXayRepository.CheckExclusive(idss,baseTime);
                        if (isValid)
                        {
                            await TKThepTDanRXayRepository.Update(Input);
                            isModalVisible = false;
                            Input = new TKThepTDanRXay();
                            isEdit = false;
                            ToastService.ShowToast(
                                "Thông báo",
                                "Cập nhật thành công.",
                                cssClass: "toast-success",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            await LoadData();
                        }
                    }else if(listExist.Count >0 && listExist[0].Id == Input.Id)
                    {
                        await TKThepTDanRXayRepository.Update(Input);
                        isModalVisible = false;
                        Input = new TKThepTDanRXay();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            cssClass: "toast-success",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    } else
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                         "Đã tồn tại.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                    }

                }
                else
                {
                    if( listExist== null||listExist.Count == 0)
                    {
                        if (insertFlagItem.Flag > 0)
                        {
                            // Thêm mới thông tin
                            var id = await TKThepTDanRXayRepository.InsertLaterFlag(Input, insertFlagItem.Flag, insertBefore);
                            isModalVisible = false;
                            Input = new TKThepTDanRXay();
                            ToastService.ShowToast(
                                "Thông báo",
                                "Chèn thành công.",
                                cssClass: "toast-success",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            insertFlagItem = new();
                            await LoadData();
                        }
                        else
                        {
                            // Thêm mới thông tin
                            await TKThepTDanRXayRepository.Insert(Input);
                            // isModalVisible = false;
                            // Input = new TKThepTDanRXay();
                             Input.Id = Guid.NewGuid().ToString();
                            ToastService.ShowToast(
                                "Thông báo",
                                "Thêm thành công.",
                                cssClass: "toast-success",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            await LoadData();
                        }
                    }else
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                         "Đã tồn tại.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                    }

                }
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            if (!string.IsNullOrEmpty(deleteId))
            {
                string[] ids = { deleteId };
                var result = await TKThepTDanRXayRepository.CheckExclusive(ids,baseTime);
                if (result)
                {
                     // Thực hiện hành động xóa
                    await TKThepTDanRXayRepository.DeleteById(deleteId);
                    ToastService.ShowToast("Thông báo", "Xóa phân loại thành công.", cssClass: "toast-success",iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await LoadData();
                }
               
                deleteId = "";
            }
        }
    }


    private async Task HandleEdit(string id)
    {
        try
        {
            TitleModal = "Cập nhật loại TĐan TDẫn !";
            Input = await TKThepTDanRXayRepository.GetById(id);
            isEdit = true;
            isModalVisible = true;

            SetSelectedItem(selectLCK, Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan??"");
            SetSelectedItem(selectLoaiThep, Input.LoaiThep ?? "");

            DmThepMDs = await DMTLThepRepository.GetAllByVM(new DMTLThepModel { ChungLoaiThep = Input.LoaiThep });
            selectDuongKinh = new();
            selectDuongKinh.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            foreach (var item in DmThepMDs)
            {
                // Kiểm tra và thêm item
                if (!string.IsNullOrEmpty(item.Id) && !selectDuongKinh.Any(x => x.Value == item.Id))
                {
                    selectDuongKinh.Add(new SelectedItem
                        {
                            IsSelected = item.DuongKinh == Input.DKCD.ToString(),
                            Value = item.Id,
                            Text = "Đường kính: " + item.DuongKinh + " ,Đơn vị: " + item.DonVi + " ,Trọng lượng: " + item.TrongLuong
                        });
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                 "Thông báo",
                ex.Message,
                 cssClass: "toast-danger",
               iconClass: "fa fa-exclamation-circle",
                 progressBarClass: "bg-info",
                 duration: 5000
             );
       }
    }

    bool isInsert = false;
    bool insertBefore = false;
    TKThepTDanRXayModel insertFlagItem = new();
    //thêm vào sau
    private void InsertLaterFlag(TKThepTDanRXayModel item, bool position)
    {
        TitleModal = "Chèn loại thép !";

        Input = new();
        isInsert = true;
        Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan = item.TTTDCongHoRanh_TenLoaiTamDanTieuChuan;
        Input.SoHieu = position ? item.SoHieu : item.SoHieu + 1;
        insertFlagItem = item;
        insertBefore = position;
        isModalVisible = true;
        SetSelectedItem(selectLCK, Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan??"");
        SetSelectedItem(selectLoaiThep, Input.LoaiThep ?? "");
        selectDuongKinh = new();
        isSelectLoaiThep = true;
    }

    private void SetSelectedItem(IEnumerable<SelectedItem> items, string value)
    {
        foreach (var item in items)
        {
            item.IsSelected = item.Value == value;
        }
    }

    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        tKThepHoGaModel.PageNumber = 1;
        Paging(listModel);
    }


    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        tKThepHoGaModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {
        tKThepHoGaModel.PageNumber = 1;
        tKThepHoGaModel.pageSize = pageSize;
        Paging(listModel);
    }


    // Xử lý paging
    private List<TKThepTDanRXayModel> Paging(List<TKThepTDanRXayModel> listModels)
    {
        // Đếm số bản ghi thỏa mãn
        var count = listModels.Count();

        // Lọc bản ghi theo page hiện tại và page size
        listModels = listModels.Skip((tKThepHoGaModel.PageNumber - 1) * tKThepHoGaModel.PageSize).Take(tKThepHoGaModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listTKThepTDanRXayModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var major in listModels)
        {
            listTKThepTDanRXayModel.Add(major);
        }

        // Tạo pagelist mới

        var pagelist = new PageList<TKThepTDanRXayModel>(listTKThepTDanRXayModel, count, tKThepHoGaModel.PageNumber, tKThepHoGaModel.PageSize);
        MetaData = pagelist.MetaData;
        return listModels;
    }

    private void ThumbtackHeader()
    {
        thumbtack = thumbtack == "flex-header" ? "" : "flex-header";
    }
}
