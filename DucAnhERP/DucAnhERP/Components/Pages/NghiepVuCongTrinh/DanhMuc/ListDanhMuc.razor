@page "/NghiepVuCongTrinh/DanhMuc"

<div class="m-4">
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-3">
                        <div class="form-group">
                            <label for="Table">Nhóm danh mục</label>
                            <Select2 Id="mySelect3" Items="@selectNhomDM" OnChange="@OnSelectChangeNhomDMAdd"></Select2>
                            <ValidationMessage For="()=>Input.IdNhomDanhMuc"></ValidationMessage>
                        </div>
                    </div>
                    <div class="col-3">
                        <div class="form-group">
                            <label for="Ten">Tên <span class="text-danger">*</span></label>
                            <InputText id="Ten" class="form-control" @bind-Value="Input.Ten" />
                            <ValidationMessage For="() => Input.Ten" class="text-danger" />

                        </div>
                    </div>
                    <div class="col-6">
                        <div class="form-group">
                            <label for="Ten">ghi chú</label>
                            <InputText id="GhiChu" class="form-control" @bind-Value="Input.GhiChu" />
                            <ValidationMessage For="() => Input.GhiChu" class="text-danger" />
                        </div>
                    </div>

                </div>
                <div class="row justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <h3 class="mt-2">Danh sách nhóm danh mục</h3>

    <EditForm Model="dmModel" FormName="Search" OnValidSubmit="@Search">
        <DataAnnotationsValidator />
        <div class="row ">
            <!-- Select for nhóm danh mục-->
            <div class="col-sm-6 col-md-3 mb-3">
                <label for="Table">Nhóm danh mục</label>
                <Select2 Id="mySelect2" Items="@selectSearchNhomDM" OnChange="@OnSelectChangeSearchNhomDM"></Select2>
                <ValidationMessage For="()=>dmModel.IdNhomDanhMuc"></ValidationMessage>
            </div>
            <!-- Search Button -->
            <div class="col-sm-6 col-md-2 mb-2">
                <label>&nbsp;</label>
                <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
            </div>
            <div class="col-sm-6 col-md-2 mb-2">
                <label>&nbsp;</label>
                <button @onclick="ShowModal" class="btn btn-info form-control">Tạo mới</button>
            </div>
        </div>
    </EditForm>

    <div class="row mt-3">
        <table class="table table-hover table-bordered">
            <thead class="bg-info">
                <tr>
                    <th class="text-center" scope="col">
                        <div class="pb-3">STT  </div>
                    </th>

                    <th onclick="@(() => SortTable("TenNhom"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Nhóm danh mục  <span class="arrow @(GetSortStyle("TenNhom"))"></span></div>

                    </th>
                    <th onclick="@(() => SortTable("Ten"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Tên  <span class="arrow @(GetSortStyle("Ten"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("GhiChu"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Chi chú  <span class="arrow @(GetSortStyle("GhiChu"))"></span></div>
                    </th>
                    <th class="text-center" colspan="2">

                    </th>
                </tr>

            </thead>
            @if (listDanhMuc.Any())
            {

                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var dm in listDanhMuc)
                    {

                        <tr>
                            <td class="text-center">@stt</td>
                            <td class="text-left">@dm.TenNhom</td>
                            <td class="text-center">@dm.Ten</td>
                            <td class="text-center">@dm.GhiChu</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-primary" @onclick="()=>Edit(dm.Id)">
                                    <i class="fas fa-edit"></i>
                                </button>
                            </td>
                            <td class="text-center">

                                <button class="btn btn-sm btn-danger" @onclick="()=>ConfirmDelete(dm.Id,dm.Ten)">
                                    <i class="fas fa-trash"></i>
                                </button>

                            </td>
                        </tr>
                        stt++;
                    }

                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        <td colspan="5"> Không có dữ liệu</td>
                    </tr>
                </tbody>
            }
        </table>

    </div>

    @if (listDanhMuc.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>

@code {
    string groupId = "";
    string userId = "";

    private List<NhomDanhMuc> nhomDanhMucs = new List<NhomDanhMuc>();
    private DanhMuc1 Input = new DanhMuc1();

    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới nhóm danh mục";
    bool isEdit = false;

    private List<SelectedItem> selectNhomDM = new();
    private List<SelectedItem> selectSearchNhomDM = new();
    private void OnSelectChangeSearchNhomDM(SelectedItem selectedItem)
    {
        dmModel.IdNhomDanhMuc = selectedItem.Value;
    }
    private void OnSelectChangeNhomDMAdd(SelectedItem selectedItem)
    {
        Input.IdNhomDanhMuc = selectedItem.Value;
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    public List<DanhMucModel> listDanhMuc { get; set; } = new();
    public List<DanhMucModel> listModel { get; set; } = new();
    public MetaData MetaData { get; set; }
    public DanhMucModel dmModel { get; set; }
    private DateTime baseTime;

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        baseTime = DateTime.Now;
        dmModel = new();
        nhomDanhMucs = await NhomDanhMucRepository.GetAll(groupId);
        foreach (var item in nhomDanhMucs)
        {
            // Kiểm tra xem item đã tồn tại trong danh sách hay chưa
            if (!selectNhomDM.Any(x => x.Value == item.Id))
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectNhomDM.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            if (!selectSearchNhomDM.Any(x => x.Value == item.Id))
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectSearchNhomDM.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
        }
        // Thêm phần tử mặc định "chọn..."
        selectNhomDM.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectSearchNhomDM.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        await LoadDanhMuc();
    }
    public async Task Search()
    {
        dmModel.PageNumber = 1;
        await LoadDanhMuc();
    }

    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadDanhMuc()
    {
        var danhmucs = await DanhMucRepository.GetAllDM(dmModel);
        listModel = danhmucs;
        listDanhMuc = Paging(danhmucs);
        Console.WriteLine(listDanhMuc);
    }

    private async Task HandleValidSubmit()
    {

       try
        {
            if (isEdit)
            {
                List<DanhMuc1> DMisExistEdit = new();
                DMisExistEdit = await DanhMucRepository.GetDMisExist(Input.IdNhomDanhMuc, Input.Ten);
                if (DMisExistEdit.Count() > 0)
                {
                    if (DMisExistEdit[0].Id == Input.Id)
                    {
                        await DanhMucRepository.Update(Input,userId);
                        ToastService.ShowToast("Thông báo", "Cập nhật danh mục thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await LoadDanhMuc();
                        isModalVisible = false;
                        Input = new();
                        isEdit = false;
                    }
                    else
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                         "Danh mục đã tồn tại.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                    }

                }
                else
                {
                    await DanhMucRepository.Update(Input, userId);
                    ToastService.ShowToast("Thông báo", "Cập nhật danh mục thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await LoadDanhMuc();
                    isModalVisible = false;
                    Input = new ();
                    isEdit = false;
                }
            }
            else
            {
                var DMisExistInsert = await DanhMucRepository.GetDMisExist(Input.IdNhomDanhMuc, Input.Ten);
                if (DMisExistInsert.Count() > 0)
                {
                    ToastService.ShowToast(
                        "Thông báo",
                         "Danh mục đã tồn tại.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                }
                else
                {

                    await DanhMucRepository.Insert(Input, userId);
                    ToastService.ShowToast("Thông báo", "Thêm danh mục thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await LoadDanhMuc();
                    isModalVisible = false;
                    Input = new ();
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();
    }

    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {

                    var result = await DanhMucRepository.CheckUsingId(deleteId);
                    if (result)
                    {
                        ToastService.ShowToast("Thông báo", "Không thể xóa danh mục đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                    }
                    else
                    {
                        // Thực hiện hành động xóa
                        await DanhMucRepository.DeleteById(deleteId, userId);
                        ToastService.ShowToast("Thông báo", "Xóa danh mục thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await LoadDanhMuc();
                    }

                    deleteId = "";
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
       
    }

    private async Task Edit(string id)
    {
        try
        {
            TitleModal = "Cập nhật nhóm danh mục !";
            Input = await DanhMucRepository.GetById(id);
            isEdit = true;
            isModalVisible = true;
            foreach (var item in selectNhomDM)
            {
                item.IsSelected = item.Value == Input.IdNhomDanhMuc;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        isEdit = false;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        isEdit = false;
        Input = new ();
    }

    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<DanhMucModel> Paging(List<DanhMucModel> danhmucs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = danhmucs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        danhmucs = danhmucs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listDanhMuc.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var major in danhmucs)
        {
            listDanhMuc.Add(major);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<DanhMucModel>(listDanhMuc, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return danhmucs;
    }

}
