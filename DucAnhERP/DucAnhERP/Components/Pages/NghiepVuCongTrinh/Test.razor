@page "/NghiepVuCongtrinh/Test"

@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client

<h3>SignalR Notification</h3>

<div class="mb-3">
    <input @bind="message" class="form-control" placeholder="Nhập thông báo..." />
    <button class="btn btn-primary mt-2" @onclick="SendNotification">Gửi Thông Báo</button>
</div>

<div class="alert alert-info mt-3" role="alert">
    <strong>Thông báo nhận được:</strong> @receivedMessage
</div>

@code {
    private HubConnection? hubConnection;
    private string message = string.Empty;
    private string receivedMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Khởi tạo HubConnection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/notificationHub"))
            .Build();

        // Lắng nghe sự kiện "ReceiveMessage" từ server
        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            ToastService.ShowToast(
                      "Thông báo",
                      message,
                      cssClass: "toast-danger",
                       iconClass: "fa fa-exclamation-circle",
                      progressBarClass: "bg-info",
                      duration: 5000
                  );
            receivedMessage = message;
            InvokeAsync(StateHasChanged); // Cập nhật UI
        });

        // Kết nối tới SignalR Hub
        await hubConnection.StartAsync();
    }

    private async Task SendNotification()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}









@* @page "/NghiepVuCongtrinh/Test"
@inject ExportExcelService ExportExcelService
@inject IJSRuntime JS
@using OfficeOpenXml.Style;


<button class="btn btn-primary" @onclick="ExportExcel">Xuất Excel</button>
<button class="btn btn-primary" @onclick="Convert">Xconvert</button>

@code {


    private async Task Convert()
    {

        var complexHeaders = new List<ComplexHeader>
            {
                // Dòng tiêu đề chung
                new ComplexHeader { Title = "CÔNG TY CỔ PHẦN XÂY DỰNG ĐỨC ANH", StartRow = 1, StartCol = 1, EndRow = 1, EndCol = 5,Alignment = ExcelHorizontalAlignment.Center,IsBold=true },
                new ComplexHeader { Title = "TÊN DỰ ÁN", StartRow = 2, StartCol = 1, EndRow = 2, EndCol = 5 ,Alignment = ExcelHorizontalAlignment.Center ,IsBold=true},
                new ComplexHeader { Title = "BẢNG TỔNG HỢP THÔNG TIN HỆ THỐNG THOÁT NƯỚC MƯA DỌC PHÍA TRÁI TUYẾN", StartRow = 3, StartCol = 1, EndRow = 3, EndCol = 25, TextColor = System.Drawing.Color.Black, Alignment = ExcelHorizontalAlignment.Center, CapitalizeEachWord = true,IsBold=true },
                new ComplexHeader { Title = "Số liệu màu đen nhạt là số liệu nhập bằng tay; Số liệu màu đen đậm là kết quả mang từ một bảng khác sang; Số liệu màu đỏ là kết quả của 01 phép tính.", StartRow = 4, StartCol = 1, EndRow = 4, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Tất cả số liệu liên quan đến hố ga không được để rỗng cho dù giá trị của ô = 0", StartRow = 5, StartCol = 1, EndRow = 5, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Qui ước kích thước hình học: Chiều dài là chiều song song với đường; Chiều rộng là chiều vuông góc với đường; Chiều cao là chiều từ đáy đến đỉnh; Chiều rộng là chiều rộng của cấu kiện.", StartRow = 6, StartCol = 1, EndRow = 6, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red},
                new ComplexHeader { Title = "Quy ước 01 lý trình: Lý trình hố ga là tại tim hố ga; lý trình đầu, cuối ống là mặt trong điểm đầu và điểm cuối hố ga.", StartRow = 7, StartCol = 1, EndRow = 7, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Những bảng sử dụng số liệu tại bảng này bị thay đổi nếu số liệu tại bảng này bị thay đổi.", StartRow = 8, StartCol = 1, EndRow = 8, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red},
                
                // Header thông tin chi tiết
                new ComplexHeader { Title = "Thông tin hố ga sau phân loại", StartRow = 16, EndRow = 16, StartCol = 1, EndCol = 42,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Thông tin chiếm chỗ hố ga", StartRow = 16, EndRow = 16, StartCol = 43, EndCol = 74,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},

                new ComplexHeader { Title = "Thông tin cấu tạo hố ga", StartRow = 17, EndRow = 17, StartCol = 1, EndCol = 8,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Thông tin phủ bì hố ga (m)", StartRow = 17, EndRow = 17, StartCol = 9, EndCol = 10,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kích thước hình học bê tông lót móng hố ga (m)", StartRow = 17, EndRow = 17, StartCol = 11, EndCol = 13,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kích thước hình học bê tông móng hố ga (m)", StartRow = 17, EndRow = 17, StartCol = 14, EndCol = 16,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "KTHH đế hố ga", StartRow = 17, EndRow = 17, StartCol = 17, EndCol = 19,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kích thước hình học tường hố ga (m)", StartRow = 17, EndRow = 17, StartCol = 20, EndCol = 23,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "KTHH dầm giữa hố ga", StartRow = 17, EndRow = 17, StartCol = 24, EndCol = 28,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Chát hố ga mặt trong", StartRow = 17, EndRow = 17, StartCol = 29, EndCol = 31,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Chát hố ga mặt ngoài, cạnh 01 +02 (m)", StartRow = 17, EndRow = 17, StartCol = 32, EndCol = 34,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kích thước hình học tường mũ mố thớt dưới (m)", StartRow = 17, EndRow = 17, StartCol = 35, EndCol = 38,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kích thước hình học tường mũ mố thớt trên (m)", StartRow = 17, EndRow = 17, StartCol = 39, EndCol = 42,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 43, EndCol = 46,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 47, EndCol = 50,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 51, EndCol = 54,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 55, EndCol = 58,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 59, EndCol = 62,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 63, EndCol = 66,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 67, EndCol = 70,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức đấu nối", StartRow = 17, EndRow = 17, StartCol = 71, EndCol = 74,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},

                new ComplexHeader { Title = "Phân loại hố ga", DataProperty="ThongTinChungHoGa_TenHoGaSauPhanLoai", StartRow = 18, EndRow = 18, StartCol = 1, EndCol = 1,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức hố ga", DataProperty="ThongTinChungHoGa_HinhThucHoGa_Name", StartRow = 18, EndRow = 18, StartCol = 2, EndCol = 2,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kết cấu mũ mố", DataProperty="ThongTinChungHoGa_KetCauMuMo_Name", StartRow = 18, EndRow = 18, StartCol = 3, EndCol = 3,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kết cấu tường", DataProperty="ThongTinChungHoGa_KetCauTuong_Name", StartRow = 18, EndRow = 18, StartCol = 4, EndCol = 4,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Hình thức móng hố ga", DataProperty="ThongTinChungHoGa_HinhThucMongHoGa_Name", StartRow = 18, EndRow = 18, StartCol = 5, EndCol = 5,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Kết cấu móng", DataProperty="ThongTinChungHoGa_KetCauMong_Name", StartRow = 18, EndRow = 18, StartCol = 6, EndCol = 6,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Chát mặt trong", DataProperty="ThongTinChungHoGa_ChatMatTrong_Name", StartRow = 18, EndRow = 18, StartCol = 7, EndCol = 7,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Chát mặt ngoài", DataProperty="ThongTinChungHoGa_ChatMatNgoai_Name", StartRow = 18, EndRow = 18, StartCol = 8, EndCol = 8,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C.Dài (m)", DataProperty="PhuBiHoGa_CDai", StartRow = 18, EndRow = 18, StartCol = 9, EndCol = 9,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C.rộng (m)", DataProperty="PhuBiHoGa_CRong", StartRow = 18, EndRow = 18, StartCol = 10, EndCol = 10,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="BeTongLotMong_D", StartRow = 18, EndRow = 18, StartCol = 11, EndCol = 11,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="BeTongLotMong_R", StartRow = 18, EndRow = 18, StartCol = 12, EndCol = 12,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="BeTongLotMong_C", StartRow = 18, EndRow = 18, StartCol = 13, EndCol = 13,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="BeTongMongHoGa_D", StartRow = 18, EndRow = 18, StartCol = 14, EndCol = 14,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="BeTongMongHoGa_R", StartRow = 18, EndRow = 18, StartCol = 15, EndCol = 15,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="BeTongMongHoGa_C", StartRow = 18, EndRow = 18, StartCol = 16, EndCol = 16,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="DeHoGa_D", StartRow = 18, EndRow = 18, StartCol = 17, EndCol = 17,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="DeHoGa_R", StartRow = 18, EndRow = 18, StartCol = 18, EndCol = 18,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="DeHoGa_C", StartRow = 18, EndRow = 18, StartCol = 19, EndCol = 19,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="TuongHoGa_D", StartRow = 18, EndRow = 18, StartCol = 20, EndCol = 20,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="TuongHoGa_R", StartRow = 18, EndRow = 18, StartCol = 21, EndCol = 21,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="TuongHoGa_C", StartRow = 18, EndRow = 18, StartCol = 22, EndCol = 22,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "CD tường (m) ", DataProperty="TuongHoGa_CdTuong", StartRow = 18, EndRow = 18, StartCol = 23, EndCol = 23,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="DamGiuaHoGa_D", StartRow = 18, EndRow = 18, StartCol = 24, EndCol = 24,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="DamGiuaHoGa_C", StartRow = 18, EndRow = 18, StartCol = 25, EndCol = 25,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="DamGiuaHoGa_C", StartRow = 18, EndRow = 18, StartCol = 26, EndCol = 26,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "CD dầm (m) ", DataProperty="DamGiuaHoGa_CdDam", StartRow = 18, EndRow = 18, StartCol = 27, EndCol = 27,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C.Cao dầm giữa tường so với đáy hố ga (m) ", DataProperty="DamGiuaHoGa_CCaoDamGiuaTuongSoVoiDayHoGa", StartRow = 18, EndRow = 18, StartCol = 28, EndCol = 28,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="ChatMatTrong_D", StartRow = 18, EndRow = 18, StartCol = 29, EndCol = 29,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="ChatMatTrong_R", StartRow = 18, EndRow = 18, StartCol = 30, EndCol = 30,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="ChatMatTrong_C", StartRow = 18, EndRow = 18, StartCol = 31, EndCol = 31,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="ChatMatNgoaiCanh_D", StartRow = 18, EndRow = 18, StartCol = 32, EndCol = 32,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="ChatMatNgoaiCanh_R", StartRow = 18, EndRow = 18, StartCol =33, EndCol = 33,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="ChatMatNgoaiCanh_C", StartRow = 18, EndRow = 18, StartCol = 34, EndCol = 34,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="MuMoThotDuoi_D", StartRow = 18, EndRow = 18, StartCol = 35, EndCol = 35,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="MuMoThotDuoi_R", StartRow = 18, EndRow = 18, StartCol = 36, EndCol = 36,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="MuMoThotDuoi_C", StartRow = 18, EndRow = 18, StartCol = 37, EndCol = 37,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "CD tường (m) ", DataProperty="MuMoThotDuoi_CdTuong", StartRow = 18, EndRow = 18, StartCol = 38, EndCol = 38,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "D (m) ", DataProperty="MuMoThotTren_D", StartRow = 18, EndRow = 18, StartCol = 39, EndCol = 39,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "R (m) ", DataProperty="MuMoThotTren_R", StartRow = 18, EndRow = 18, StartCol = 40, EndCol = 40,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "C (m) ", DataProperty="MuMoThotTren_C", StartRow = 18, EndRow = 18, StartCol = 41, EndCol = 41,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "CD tường (m) ", DataProperty="MuMoThotTren_CdTuong", StartRow = 18, EndRow = 18, StartCol = 42, EndCol = 42,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi1_Loai", StartRow = 18, EndRow = 18, StartCol = 43, EndCol = 43,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi1_CanhDai", StartRow = 18, EndRow = 18, StartCol = 44, EndCol = 44,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi1_CanhRong", StartRow = 18, EndRow = 18, StartCol = 45, EndCol = 45,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi1_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 46, EndCol = 46,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi2_Loai", StartRow = 18, EndRow = 18, StartCol = 47, EndCol = 47,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi2_CanhDai", StartRow = 18, EndRow = 18, StartCol = 48, EndCol = 48,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi2_CanhRong", StartRow = 18, EndRow = 18, StartCol = 49, EndCol = 49,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi2_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 50, EndCol = 50,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi3_Loai", StartRow = 18, EndRow = 18, StartCol = 51, EndCol = 51,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi3_CanhDai", StartRow = 18, EndRow = 18, StartCol = 52, EndCol = 52,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi3_CanhRong", StartRow = 18, EndRow = 18, StartCol = 53, EndCol = 53,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi3_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 54, EndCol = 54,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi4_Loai", StartRow = 18, EndRow = 18, StartCol = 55, EndCol = 55,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi4_CanhDai", StartRow = 18, EndRow = 18, StartCol = 56, EndCol = 56,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi4_CanhRong", StartRow = 18, EndRow = 18, StartCol = 57, EndCol = 57,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi4_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 58, EndCol = 58,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi5_Loai", StartRow = 18, EndRow = 18, StartCol = 59, EndCol = 59,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi5_CanhDai", StartRow = 18, EndRow = 18, StartCol = 60, EndCol = 60,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi5_CanhRong", StartRow = 18, EndRow = 18, StartCol = 61, EndCol = 61,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi5_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 62, EndCol = 62,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi6_Loai", StartRow = 18, EndRow = 18, StartCol = 63, EndCol = 63,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi6_CanhDai", StartRow = 18, EndRow = 18, StartCol = 64, EndCol = 64,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi6_CanhRong", StartRow = 18, EndRow = 18, StartCol = 65, EndCol = 65,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi6_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 66, EndCol = 66,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi7_Loai", StartRow = 18, EndRow = 18, StartCol = 67, EndCol = 67,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi7_CanhDai", StartRow = 18, EndRow = 18, StartCol = 68, EndCol = 68,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi7_CanhRong", StartRow = 18, EndRow = 18, StartCol = 69, EndCol = 69,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi7_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 70, EndCol = 70,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Loại ", DataProperty="HinhThucDauNoi8_Loai", StartRow = 18, EndRow = 18, StartCol = 71, EndCol = 71,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh dài", DataProperty="HinhThucDauNoi8_CanhDai", StartRow = 18, EndRow = 18, StartCol = 72, EndCol = 72,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh rộng", DataProperty="HinhThucDauNoi8_CanhRong", StartRow = 18, EndRow = 18, StartCol = 73, EndCol = 73,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Cạnh chéo ", DataProperty="HinhThucDauNoi8_CanhCheo", StartRow = 18, EndRow = 18, StartCol = 74, EndCol = 74,IsBold=true ,HasBorder = true ,WrapText=true , Alignment = ExcelHorizontalAlignment.Center},

                };
        // Dữ liệu mẫu
        var data = await PhanLoaiHoGaRepository.GetAllByVM(new PhanLoaiHoGaModel { });
        // Gọi service xuất Excel

        var excelData = ExportExcelService.ExportToExcelWithComplexHeader(data, complexHeaders);

        // Trả về file Excel
        var fileName = "ExportedData.xlsx";
        using var stream = new MemoryStream(excelData);
        using var streamRef = new DotNetStreamReference(stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task ExportExcel()
    {
        try
        {
            var complexHeaders = new List<ComplexHeader>
            {
                // Dòng tiêu đề chung
                new ComplexHeader { Title = "CÔNG TY CỔ PHẦN XÂY DỰNG ĐỨC ANH", StartRow = 1, StartCol = 1, EndRow = 1, EndCol = 5,Alignment = ExcelHorizontalAlignment.Center,IsBold=true },
                new ComplexHeader { Title = "TÊN DỰ ÁN", StartRow = 2, StartCol = 1, EndRow = 2, EndCol = 5 ,Alignment = ExcelHorizontalAlignment.Center ,IsBold=true},
                new ComplexHeader { Title = "BẢNG TỔNG HỢP THÔNG TIN HỆ THỐNG THOÁT NƯỚC MƯA DỌC PHÍA TRÁI TUYẾN", StartRow = 3, StartCol = 1, EndRow = 3, EndCol = 25, TextColor = System.Drawing.Color.Black, Alignment = ExcelHorizontalAlignment.Center, CapitalizeEachWord = true,IsBold=true },
                new ComplexHeader { Title = "Số liệu màu đen nhạt là số liệu nhập bằng tay; Số liệu màu đen đậm là kết quả mang từ một bảng khác sang; Số liệu màu đỏ là kết quả của 01 phép tính.", StartRow = 4, StartCol = 1, EndRow = 4, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Tất cả số liệu liên quan đến hố ga không được để rỗng cho dù giá trị của ô = 0", StartRow = 5, StartCol = 1, EndRow = 5, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Qui ước kích thước hình học: Chiều dài là chiều song song với đường; Chiều rộng là chiều vuông góc với đường; Chiều cao là chiều từ đáy đến đỉnh; Chiều rộng là chiều rộng của cấu kiện.", StartRow = 6, StartCol = 1, EndRow = 6, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red},
                new ComplexHeader { Title = "Quy ước 01 lý trình: Lý trình hố ga là tại tim hố ga; lý trình đầu, cuối ống là mặt trong điểm đầu và điểm cuối hố ga.", StartRow = 7, StartCol = 1, EndRow = 7, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Những bảng sử dụng số liệu tại bảng này bị thay đổi nếu số liệu tại bảng này bị thay đổi.", StartRow = 8, StartCol = 1, EndRow = 8, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red},

                // Header thông tin chi tiết
                new ComplexHeader { Title = "STT", DataProperty="STT", StartRow = 16, StartCol = 1, EndRow = 18, EndCol = 1,IsBold=true ,HasBorder = true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Thông tin chung", StartRow = 16, StartCol = 2, EndRow = 16, EndCol = 5,IsBold=true ,HasBorder = true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Thông tin", StartRow = 17, StartCol = 2, EndRow = 17, EndCol = 3,IsBold=true ,HasBorder = true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Chung", StartRow = 17, StartCol = 4, EndRow = 17, EndCol = 5,IsBold=true ,HasBorder = true, Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "ID", StartRow = 18, DataProperty="Id", StartCol = 2, EndRow = 18, EndCol = 2 ,IsBold=true ,HasBorder = true},
                new ComplexHeader { Title = "Tên", StartRow = 18, DataProperty="Name", StartCol = 3, EndRow = 18, EndCol = 3,IsBold=true ,HasBorder = true,DataFormat = "@" },
                new ComplexHeader { Title = "Giá", StartRow = 18, DataProperty="Price", StartCol = 4, EndRow = 18, EndCol = 4,IsBold=true ,HasBorder = true ,DataFormat = "#,##0.00"},
                new ComplexHeader { Title = "Ngày Tạo", StartRow = 18, DataProperty="CreatedDate", StartCol = 5, EndRow = 18, EndCol = 5,IsBold=true ,HasBorder = true,DataFormat = "dd/MM/yyyy"}
            };

        

            // Dữ liệu mẫu
            var data = new List<MyModel>
            {
                new MyModel {STT = 1, Id = 1, Name = "Sản phẩm A", Price = 100.5M, CreatedDate = DateTime.Now },
                new MyModel {STT = 2, Id = 2, Name = "Sản phẩm B", Price = 200.75M, CreatedDate = DateTime.Now.AddDays(-1) }
            };

            // Gọi service xuất Excel
            var excelData = ExportExcelService.ExportToExcelWithComplexHeader(data, complexHeaders);

            // Trả về file Excel
            var fileName = "ExportedData.xlsx";
            using var stream = new MemoryStream(excelData);
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }

    // Model mẫu
    public class MyModel
    {
        public int STT { get; set; }
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public DateTime CreatedDate { get; set; }
    }
} *@













@* @using Blazor.Diagrams
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Options
@inject IJSRuntime JSRuntime

<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

<style>
    .diagram-container {
        width: 100%;
        height: 500px;
        border: 1px solid black;
    }
</style>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;
    private int verticalSpacing = 80; // Khoảng cách dọc giữa các node
    private int horizontalSpacing = 150; // Khoảng cách ngang giữa các node

    protected override void OnInitialized()
    {
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom = { Enabled = false },
                Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
            };

        Diagram = new BlazorDiagram(options);

        string formula1 = "=IF(AND(JC22=\"Có\",IZ22=\"Tường xây gạch\"),IF(JA22=\"Không mũ mố\",JO22,JO22+JP22+JR22),IF(AND(JC22=\"Không\",JA22=\"Mũ mố xây gạch\"),JR22+JS22,0))";
        InitializeDiagramFromFormula(formula1);
    }

    private void InitializeDiagramFromFormula(string formula)
    {
        var startNode = CreateNode("Start", new Point(300, 50));
        var endNode = CreateNode("End", new Point(300, 500));
        ParseFormula(formula, startNode, endNode, 1);
    }

    private void ParseFormula(string formula, NodeModel currentNode, NodeModel endNode, int level)
    {
        if (formula.StartsWith("=IF("))
        {
            int startIndex = formula.IndexOf('(') + 1;
            int endIndex = formula.LastIndexOf(')');
            string content = formula.Substring(startIndex, endIndex - startIndex);
            var parts = content.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            if (parts.Length > 0)
            {
                var conditionNode = CreateNode(parts[0].Trim(), new Point(currentNode.Position.X, currentNode.Position.Y + verticalSpacing * level));
                ConnectNodes(currentNode, conditionNode);

                // Xử lý phần true
                if (parts.Length > 1)
                {
                    var trueNode = CreateNode(parts[1].Trim(), new Point(conditionNode.Position.X + horizontalSpacing, conditionNode.Position.Y));
                    ConnectNodes(conditionNode, trueNode, "True", LinkMarker.Arrow);
                    ParseFormula(parts[1].Trim(), trueNode, endNode, level + 1);

                    // Thêm node kết quả cho phần true
                    var trueResultNode = CreateNode("Result: " + parts[1].Trim(), new Point(trueNode.Position.X + horizontalSpacing, trueNode.Position.Y));
                    ConnectNodes(trueNode, trueResultNode, "Result", LinkMarker.Arrow);
                    ConnectNodes(trueResultNode, endNode);
                }
                else
                {
                    ConnectNodes(conditionNode, endNode, "True", LinkMarker.Arrow);
                }

                // Xử lý phần false
                if (parts.Length > 2)
                {
                    var falseNode = CreateNode(parts[2].Trim(), new Point(conditionNode.Position.X + horizontalSpacing, conditionNode.Position.Y - verticalSpacing));
                    ConnectNodes(conditionNode, falseNode, "False", LinkMarker.Arrow);
                    ParseFormula(parts[2].Trim(), falseNode, endNode, level + 1);

                    // Thêm node kết quả cho phần false
                    var falseResultNode = CreateNode("Result: " + parts[2].Trim(), new Point(falseNode.Position.X + horizontalSpacing, falseNode.Position.Y));
                    ConnectNodes(falseNode, falseResultNode, "Result", LinkMarker.Arrow);
                    ConnectNodes(falseResultNode, endNode);
                }
                else
                {
                    ConnectNodes(conditionNode, endNode, "False", LinkMarker.Arrow);
                }
            }
        }
        else if (formula.Contains("AND") || formula.Contains("OR"))
        {
            int functionStartIndex = formula.IndexOfAny(new[] { 'A', 'O' });
            int startIndex = formula.IndexOf('(') + 1;
            int endIndex = formula.LastIndexOf(')');
            string content = formula.Substring(startIndex, endIndex - startIndex);
            var conditions = content.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var condition in conditions)
            {
                var conditionNode = CreateNode(condition.Trim(), new Point(currentNode.Position.X, currentNode.Position.Y + verticalSpacing * level));
                ConnectNodes(currentNode, conditionNode);
                currentNode = conditionNode;
            }
            ConnectNodes(currentNode, endNode);
        }
        else
        {
            ConnectNodes(currentNode, endNode);
        }
    }

    private NodeModel CreateNode(string title, Point position)
    {
        return Diagram.Nodes.Add(new NodeModel(position) { Title = title });
    }

    private void ConnectNodes(NodeModel source, NodeModel target, string? label = null, LinkMarker? marker = null)
    {
        var link = Diagram.Links.Add(new LinkModel(
            new ShapeIntersectionAnchor(source),
            new ShapeIntersectionAnchor(target)
        ));

        if (label != null)
        {
            link.Labels.Add(new LinkLabelModel(link, label));
        }

        if (marker != null)
        {
            link.TargetMarker = marker;
        }
    }
}
  *@