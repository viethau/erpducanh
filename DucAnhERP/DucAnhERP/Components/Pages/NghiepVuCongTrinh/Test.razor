@page "/NghiepVuCongtrinh/Test"
@inject ExportExcelService ExportExcelService
@inject IJSRuntime JS
@using OfficeOpenXml.Style;


<button class="btn btn-primary" @onclick="ExportExcel">Xuất Excel</button>
<button class="btn btn-primary" @onclick="Convert">Xconvert</button>

@code {

    private async Task Convert()
    {
        string html = @"
          ";

        var headers = ExportExcelService.ConvertHtmlToComplexHeaders(html);
        Console.WriteLine(headers);
    }

    private async Task ExportExcel()
    {
        try
        {
            var complexHeaders = new List<ComplexHeader>
            {
                // Dòng tiêu đề chung
                new ComplexHeader { Title = "CÔNG TY CỔ PHẦN XÂY DỰNG ĐỨC ANH", StartRow = 1, StartCol = 1, EndRow = 1, EndCol = 5,Alignment = ExcelHorizontalAlignment.Center,IsBold=true },
                new ComplexHeader { Title = "TÊN DỰ ÁN", StartRow = 2, StartCol = 1, EndRow = 2, EndCol = 5 ,Alignment = ExcelHorizontalAlignment.Center ,IsBold=true},
                new ComplexHeader { Title = "BẢNG TỔNG HỢP THÔNG TIN HỆ THỐNG THOÁT NƯỚC MƯA DỌC PHÍA TRÁI TUYẾN", StartRow = 3, StartCol = 1, EndRow = 3, EndCol = 25, TextColor = System.Drawing.Color.Black, Alignment = ExcelHorizontalAlignment.Center, CapitalizeEachWord = true,IsBold=true },
                new ComplexHeader { Title = "Số liệu màu đen nhạt là số liệu nhập bằng tay; Số liệu màu đen đậm là kết quả mang từ một bảng khác sang; Số liệu màu đỏ là kết quả của 01 phép tính.", StartRow = 4, StartCol = 1, EndRow = 4, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Tất cả số liệu liên quan đến hố ga không được để rỗng cho dù giá trị của ô = 0", StartRow = 5, StartCol = 1, EndRow = 5, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Qui ước kích thước hình học: Chiều dài là chiều song song với đường; Chiều rộng là chiều vuông góc với đường; Chiều cao là chiều từ đáy đến đỉnh; Chiều rộng là chiều rộng của cấu kiện.", StartRow = 6, StartCol = 1, EndRow = 6, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red},
                new ComplexHeader { Title = "Quy ước 01 lý trình: Lý trình hố ga là tại tim hố ga; lý trình đầu, cuối ống là mặt trong điểm đầu và điểm cuối hố ga.", StartRow = 7, StartCol = 1, EndRow = 7, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red },
                new ComplexHeader { Title = "Những bảng sử dụng số liệu tại bảng này bị thay đổi nếu số liệu tại bảng này bị thay đổi.", StartRow = 8, StartCol = 1, EndRow = 8, EndCol = 25, Alignment = ExcelHorizontalAlignment.Center ,TextColor = System.Drawing.Color.Red},

                // Header thông tin chi tiết
                new ComplexHeader { Title = "STT",DataProperty="STT", StartRow = 16, StartCol = 1, EndRow = 18, EndCol = 1,IsBold=true ,HasBorder = true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Thông tin chung", StartRow = 16, StartCol = 2, EndRow = 16, EndCol = 5,IsBold=true ,HasBorder = true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Thông tin", StartRow = 17, StartCol = 2, EndRow = 17, EndCol = 3,IsBold=true ,HasBorder = true , Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "Chung", StartRow = 17, StartCol = 4, EndRow = 17, EndCol = 5,IsBold=true ,HasBorder = true, Alignment = ExcelHorizontalAlignment.Center},
                new ComplexHeader { Title = "ID", StartRow = 18, DataProperty="Id", StartCol = 2, EndRow = 18, EndCol = 2 ,IsBold=true ,HasBorder = true},
                new ComplexHeader { Title = "Tên", StartRow = 18,DataProperty="Name", StartCol = 3, EndRow = 18, EndCol = 3,IsBold=true ,HasBorder = true},
                new ComplexHeader { Title = "Giá", StartRow = 18,DataProperty="Price", StartCol = 4, EndRow = 18, EndCol = 4,IsBold=true ,HasBorder = true},
                new ComplexHeader { Title = "Ngày Tạo", StartRow = 18,DataProperty="CreatedDate", StartCol = 5, EndRow = 18, EndCol = 5,IsBold=true ,HasBorder = true}
            };

        

            // Dữ liệu mẫu
            var data = new List<MyModel>
            {
                new MyModel {STT = 1, Id = 1, Name = "Sản phẩm A", Price = 100.5M, CreatedDate = DateTime.Now },
                new MyModel {STT = 2, Id = 2, Name = "Sản phẩm B", Price = 200.75M, CreatedDate = DateTime.Now.AddDays(-1) }
            };

            // Gọi service xuất Excel
            var excelData = ExportExcelService.ExportToExcelWithComplexHeader(data, complexHeaders);

            // Trả về file Excel
            var fileName = "ExportedData.xlsx";
            using var stream = new MemoryStream(excelData);
            using var streamRef = new DotNetStreamReference(stream);
            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }

    // Model mẫu
    public class MyModel
    {
        public int STT { get; set; }
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public DateTime CreatedDate { get; set; }
    }
}













@* @using Blazor.Diagrams
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Options
@inject IJSRuntime JSRuntime

<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
</div>

<style>
    .diagram-container {
        width: 100%;
        height: 500px;
        border: 1px solid black;
    }
</style>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;
    private int verticalSpacing = 80; // Khoảng cách dọc giữa các node
    private int horizontalSpacing = 150; // Khoảng cách ngang giữa các node

    protected override void OnInitialized()
    {
        var options = new BlazorDiagramOptions
            {
                AllowMultiSelection = true,
                Zoom = { Enabled = false },
                Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
            };

        Diagram = new BlazorDiagram(options);

        string formula1 = "=IF(AND(JC22=\"Có\",IZ22=\"Tường xây gạch\"),IF(JA22=\"Không mũ mố\",JO22,JO22+JP22+JR22),IF(AND(JC22=\"Không\",JA22=\"Mũ mố xây gạch\"),JR22+JS22,0))";
        InitializeDiagramFromFormula(formula1);
    }

    private void InitializeDiagramFromFormula(string formula)
    {
        var startNode = CreateNode("Start", new Point(300, 50));
        var endNode = CreateNode("End", new Point(300, 500));
        ParseFormula(formula, startNode, endNode, 1);
    }

    private void ParseFormula(string formula, NodeModel currentNode, NodeModel endNode, int level)
    {
        if (formula.StartsWith("=IF("))
        {
            int startIndex = formula.IndexOf('(') + 1;
            int endIndex = formula.LastIndexOf(')');
            string content = formula.Substring(startIndex, endIndex - startIndex);
            var parts = content.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            if (parts.Length > 0)
            {
                var conditionNode = CreateNode(parts[0].Trim(), new Point(currentNode.Position.X, currentNode.Position.Y + verticalSpacing * level));
                ConnectNodes(currentNode, conditionNode);

                // Xử lý phần true
                if (parts.Length > 1)
                {
                    var trueNode = CreateNode(parts[1].Trim(), new Point(conditionNode.Position.X + horizontalSpacing, conditionNode.Position.Y));
                    ConnectNodes(conditionNode, trueNode, "True", LinkMarker.Arrow);
                    ParseFormula(parts[1].Trim(), trueNode, endNode, level + 1);

                    // Thêm node kết quả cho phần true
                    var trueResultNode = CreateNode("Result: " + parts[1].Trim(), new Point(trueNode.Position.X + horizontalSpacing, trueNode.Position.Y));
                    ConnectNodes(trueNode, trueResultNode, "Result", LinkMarker.Arrow);
                    ConnectNodes(trueResultNode, endNode);
                }
                else
                {
                    ConnectNodes(conditionNode, endNode, "True", LinkMarker.Arrow);
                }

                // Xử lý phần false
                if (parts.Length > 2)
                {
                    var falseNode = CreateNode(parts[2].Trim(), new Point(conditionNode.Position.X + horizontalSpacing, conditionNode.Position.Y - verticalSpacing));
                    ConnectNodes(conditionNode, falseNode, "False", LinkMarker.Arrow);
                    ParseFormula(parts[2].Trim(), falseNode, endNode, level + 1);

                    // Thêm node kết quả cho phần false
                    var falseResultNode = CreateNode("Result: " + parts[2].Trim(), new Point(falseNode.Position.X + horizontalSpacing, falseNode.Position.Y));
                    ConnectNodes(falseNode, falseResultNode, "Result", LinkMarker.Arrow);
                    ConnectNodes(falseResultNode, endNode);
                }
                else
                {
                    ConnectNodes(conditionNode, endNode, "False", LinkMarker.Arrow);
                }
            }
        }
        else if (formula.Contains("AND") || formula.Contains("OR"))
        {
            int functionStartIndex = formula.IndexOfAny(new[] { 'A', 'O' });
            int startIndex = formula.IndexOf('(') + 1;
            int endIndex = formula.LastIndexOf(')');
            string content = formula.Substring(startIndex, endIndex - startIndex);
            var conditions = content.Split(new[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (var condition in conditions)
            {
                var conditionNode = CreateNode(condition.Trim(), new Point(currentNode.Position.X, currentNode.Position.Y + verticalSpacing * level));
                ConnectNodes(currentNode, conditionNode);
                currentNode = conditionNode;
            }
            ConnectNodes(currentNode, endNode);
        }
        else
        {
            ConnectNodes(currentNode, endNode);
        }
    }

    private NodeModel CreateNode(string title, Point position)
    {
        return Diagram.Nodes.Add(new NodeModel(position) { Title = title });
    }

    private void ConnectNodes(NodeModel source, NodeModel target, string? label = null, LinkMarker? marker = null)
    {
        var link = Diagram.Links.Add(new LinkModel(
            new ShapeIntersectionAnchor(source),
            new ShapeIntersectionAnchor(target)
        ));

        if (label != null)
        {
            link.Labels.Add(new LinkLabelModel(link, label));
        }

        if (marker != null)
        {
            link.TargetMarker = marker;
        }
    }
}
  *@