@page "/PKKL/THKLCongtron"
@using DucAnhERP.ViewModel
@using DucAnhERP.Models
@using DucAnhERP.Components.Pages.Common
@using System.Linq
@using DucAnhERP.SeedWork
@using DucAnhERP.Helpers
@inject NavigationManager navigation
@inject IPKKLCTronRepository PKKLCTronRepository
@inject INuocMuaRepository NuocMuaRepository
@inject IDanhMucRepository DanhMucRepository
@inject IDMTLThepRepository DMTLThepRepository
@inject IPhanLoaiCTronHopNhuaRepository PhanLoaiCTronHopNhuaRepository

@inject DucAnhERP.Services.ToastService ToastService
<style>
    table {
        position: relative;
    }

        table thead tr td {
            / white-space: nowrap;
            / text-align: center;
            padding: 2px 5px;
        }

</style>
<div class="container-fluid">

   @*  <div class="row m-3 ">
        <div class="col-md-9 col-sm-12">
            <EditForm Model="InputMD" FormName="Search" OnValidSubmit="@Search">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-sm-4 col-md-3 mb-2">
                        <label for="Table">Loại cấu kiện</label>
                        <Select2 Id="select3" Items="@selectSearchLCK" OnChange="@OnSelectChangeSearchLCK"></Select2>
                        <ValidationMessage For="()=>InputMD.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai"></ValidationMessage>
                    </div>

                    <!-- Search Button -->
                    <div class="col-sm-4 col-md-2 mb-2">
                        <label>&nbsp;</label>
                        <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
                    </div>
                    <div class="col-sm-4 col-md-2 mb-2">
                        <label>&nbsp;</label>
                        <button type="button" @onclick="ShowModal" class="btn btn-info form-control">Tạo mới</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-md-3 col-sm-6 text-end">
            <button class="btn btn-outline-primary me-2" @onclick="ThumbtackHeader" title="Ghim tiêu đề bảng">
                <i class="fas fa-thumbtack"></i>
            </button>
        </div>
    </div> *@
    <div id="tableContainer ">
        <div class="table-report ">
            <div>
                <div class=" mt-1">
                    <h5 class="mt-2">BẢNG THỐNG KÊ THÉP HỐ GA THEO LOẠI HỐ GA</h5>
                </div>
                <div class=" mt-2">
                    <table id="tb-left" class="table table-hover table-bordered mt-3">
                        <thead class="bg-info @thumbtack">

                            <tr>
                                <th>STT</th>
                                <th>Hạng mục</th>
                                <th>Tên công tác thực tế</th>
                                <th>Đơn vị</th>
                                <th>KL 01 đơn vị</th>
                                <th>Tên công tác theo định mức</th>
                                <th> Mã định mức</th>
                                <th> SL trái</th>
                                <th> SL phải</th>
                                <th> SL tổng</th>
                                <th> KL trái</th>
                                <th> KL phải</th>
                                <th> KL tổng</th>

                            </tr>

                        </thead>
                        @if (listTHKLModel.Any())
                        {
                            <tbody>
                                @{
                                    int stt = 0;

                                }
                                @foreach (var item in listTHKLModel)
                                {
                                    stt++;
                                    <tr>
                                        <td>@stt</td>
                                        <td>@item.HangMucCongTac</td>
                                        <td>@item.TenCongTac</td>
                                        <td>@item.DonVi</td>
                                        <td>@item.KL1DonVi</td>
                                        <td>@item.TenCongTacTheoDM  </td>
                                        <td>@item.MaDinhMuc</td>
                                        <td>@item.SLTrai </td>
                                        <td>@item.SLPhai </td>
                                        <td>@item.SLTong </td>
                                        <td>@item.KLTrai </td>
                                        <td>@item.KLPhai </td>
                                        <td>@item.KLTong </td>
                                    </tr>
                                }
                            </tbody>
                        }
                        else
                        {
                            <tbody>
                                <tr>
                                    <td colspan="13"> Không có dữ liệu</td>
                                </tr>
                            </tbody>
                        }
                    </table>
                </div>
                <div class="mt-4">
                    @if (listTHKLModel.Any())
                    {
                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
                    }
                </div>
            </div>
        </div>
    </div>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>


@code {

    private bool isLoading = false;
    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới ";
    bool isEdit = false;
    string thumbtack = "";
    private DateTime baseTime;

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    

    public List<THKLModel> listTHKLModel { get; set; } = new();
    public List<THKLModel> listModel { get; set; } = new();
    public MetaData MetaData { get; set; }
    public THKLModel tKThepHoGaModel { get; set; }

    

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData();
          

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            tKThepHoGaModel = new();
            var repository = await PKKLCTronRepository.GetTHKLCongTron();
            listModel = repository;

            listTHKLModel = Paging(listModel);

        }
        catch (Exception)
        {

            throw;
        }
        isLoading = false;
    }

    public async Task Search()
    {
        tKThepHoGaModel.PageNumber = 1;
        await LoadData();

    }

    private async Task HandleValidSubmit()
    {

        try
        {
            

        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    string[] ids = { deleteId };
                    var result = await PKKLCTronRepository.CheckExclusive(ids, baseTime);
                    if (result)
                    {
                        // Thực hiện hành động xóa
                        await PKKLCTronRepository.DeleteById(deleteId);
                        ToastService.ShowToast("Thông báo", "Xóa phân loại thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await LoadData();
                    }

                    deleteId = "";
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                 "Thông báo",
                ex.Message,
                 cssClass: "toast-danger",
               iconClass: "fa fa-exclamation-circle",
                 progressBarClass: "bg-info",
                 duration: 5000
             );

        }
    }

    int Flag = 0;
    //thêm vào sau
    private void InsertLaterFlag(int flag)
    {
        Flag = flag;
        TitleModal = "Chèn loại cống !";
        isModalVisible = true;
    }


    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        tKThepHoGaModel.PageNumber = 1;
        Paging(listModel);
    }


    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        tKThepHoGaModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {
        tKThepHoGaModel.PageNumber = 1;
        tKThepHoGaModel.pageSize = pageSize;
        Paging(listModel);
    }


    // Xử lý paging
    private List<THKLModel> Paging(List<THKLModel> listModels)
    {
        // Đếm số bản ghi thỏa mãn
        var count = listModels.Count();

        // Lọc bản ghi theo page hiện tại và page size
        listModels = listModels.Skip((tKThepHoGaModel.PageNumber - 1) * tKThepHoGaModel.PageSize).Take(tKThepHoGaModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listTHKLModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var major in listModels)
        {
            listTHKLModel.Add(major);
        }

        // Tạo pagelist mới

        var pagelist = new PageList<THKLModel>(listTHKLModel, count, tKThepHoGaModel.PageNumber, tKThepHoGaModel.PageSize);
        MetaData = pagelist.MetaData;
        return listModels;
    }

    private void ThumbtackHeader()
    {
        thumbtack = thumbtack == "flex-header" ? "" : "flex-header";
    }

    public static double KTHH_KL1CK(string DonVi, double KTHH_D, double KTHH_R, double KTHH_C, double KTHH_DienTich, string KTHH_GhiChu)
    {
        if (DonVi == "M3")
        {
            if (string.IsNullOrEmpty(KTHH_GhiChu) || KTHH_GhiChu == "0")
            {
                return KTHH_D * KTHH_R * KTHH_C;
            }
            else if (KTHH_GhiChu == "Rộng*Cao")
            {
                return KTHH_DienTich * KTHH_D;
            }
            else if (KTHH_GhiChu == "Dài*Cao")
            {
                return KTHH_DienTich * KTHH_R;
            }
            else if (KTHH_GhiChu == "Dài*Rộng")
            {
                return KTHH_DienTich * KTHH_C;
            }
            else
            {
                return 0;
            }
        }
        return 0;
    }

    public static double TTCDT_KL(string DonVi, double KTHH_D, double KTHH_R, double KTHH_C, double TTCDT_CDai, double TTCDT_CRong, double TTCDT_CDay, double TTCDT_DienTich)
    {
        if (DonVi.ToUpper().Trim() == "M2")
        {
            if (string.IsNullOrEmpty(TTCDT_DienTich.ToString()) || TTCDT_DienTich == 0)
            {
                return (KTHH_D * KTHH_C * TTCDT_CDai) + (KTHH_R * KTHH_C * TTCDT_CRong) + (KTHH_D * KTHH_R * TTCDT_CDay);
            }
            else
            {
                return TTCDT_DienTich;
            }
        }
        return 0;
    }

    public static double KL1CK_ChuaTruCC(double KTHH_KL1CK, double KTHH_SLCauKien, double TTCDT_KL, double TTCDT_SLCK, double KLKP_KL, double KLKP_Sl)
    {
        if (KTHH_KL1CK > 0)
        {
            return KTHH_KL1CK * KTHH_SLCauKien;
        }
        else if (TTCDT_KL > 0)
        {
            return TTCDT_KL * TTCDT_SLCK;
        }
        else
        {
            return KLKP_KL * KLKP_Sl;
        }
    }

    public static string getChiMuc(string DK)
    {
        string ChiMuc = "I";
        switch (DK)
        {
            case "I.Sản xuất, vận chuyển, lắp đặt":
                ChiMuc = "I";
                break;
            case "II.Sản xuất + V.Chuyển B.Tông T.Phẩm":
                ChiMuc = "II";
                break;
            case "II.Gia công, lắp dựng cốt thép":
                ChiMuc = "III";
                break;
        }
        return ChiMuc;
    }
}
