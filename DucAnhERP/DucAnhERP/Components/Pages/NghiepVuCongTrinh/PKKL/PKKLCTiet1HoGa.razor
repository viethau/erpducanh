@page "/PKKL/PKKLCTiet1HoGa"

<style>
    table {
        position: relative;
    }

        table thead tr td {
            white-space: nowrap;
            text-align: center;
            padding: 2px 5px;
        }

</style>
<div class="container-fluid">
    <div class="mt-3">
        <CustomModal zIndex="1055" IsVisible="isModalVisibleS" OnClose="HandleModalCloseS" Title="Chọn Phân loại hố ga" Size="modal-lg">
            <BodyTemplate>
                <EditForm Model="InputMDS" FormName="SearchS" OnValidSubmit="@SearchS">
                    <DataAnnotationsValidator />
                    <div class="row ">
                        <!-- Select for nhóm danh mục-->
                        <div class="col-sm-4 col-md-2 mb-2">
                            <label for="Table">Hình thức hố ga</label>
                            <Select2 Id="mySelect1S" Items="@selectHTHG" OnChange="@OnSelectChangeHTHG"></Select2>
                            <ValidationMessage For="()=>InputMDS.ThongTinChungHoGa_HinhThucHoGa"></ValidationMessage>
                        </div>
                        <div class="col-sm-4 col-md-2 mb-2">
                            <label for="Table">Kết cấu mũ mỗ</label>
                            <Select2 Id="mySelect2S" Items="@selectKCMM" OnChange="@OnSelectChangeKCMM"></Select2>
                            <ValidationMessage For="()=>InputMDS.ThongTinChungHoGa_KetCauMuMo"></ValidationMessage>
                        </div>
                        <div class="col-sm-4 col-md-2 mb-2">
                            <label for="Table">Kết cấu tường</label>
                            <Select2 Id="mySelect3S" Items="@selectKCT" OnChange="@OnSelectChangeKCT"></Select2>
                            <ValidationMessage For="()=>InputMDS.ThongTinChungHoGa_KetCauTuong"></ValidationMessage>
                        </div>
                        <div class="col-sm-4 col-md-2 mb-2">
                            <label for="Table">Hình thức móng hố ga</label>
                            <Select2 Id="mySelect4S" Items="@selectHTMHG" OnChange="@OnSelectChangeHTMHG"></Select2>
                            <ValidationMessage For="()=>InputMDS.ThongTinChungHoGa_HinhThucMongHoGa"></ValidationMessage>
                        </div>
                        <div class="col-sm-4 col-md-2 mb-2">
                            <label for="Table">Kết cấu móng</label>
                            <Select2 Id="mySelect5S" Items="@selectKCM" OnChange="@OnSelectChangeKCM"></Select2>
                            <ValidationMessage For="()=>InputMDS.ThongTinChungHoGa_KetCauMong"></ValidationMessage>
                        </div>
                        <!-- Search Button -->
                        <div class="col-sm-4 col-md-1 mb-1">
                            <label>&nbsp;</label>
                            <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
                        </div>
                    </div>
                </EditForm>
                <div class="row mt-2 our-table">
                    <table class="table table-hover table-bordered">
                        <thead class="bg-info ">
                            <tr class="nowrap">
                                <th class="text-center" rowspan="3"></th>
                                <th class="text-center" rowspan="3">STT</th>
                                <th class="text-center align-middle" colspan="8" rowspan="2">Thông tin chung hố ga</th>
                                <th class="text-center" colspan="34">Thông tin kích thước hình học hố ga</th>
                                <th class="text-center" colspan="32">Hạng mục chiếm chỗ hố ga</th>
                            </tr>
                            <tr>
                                <th class="text-center" colspan="2">Thông tin phủ bì hố ga (m)</th>
                                <th class="text-center" colspan="3">Kích thước hình học bê tông lót móng hố ga (m)</th>
                                <th class="text-center" colspan="3">Kích thước hình học bê tông móng hố ga (m)</th>
                                <th class="text-center" colspan="3">KTHH đế hố ga</th>
                                <th class="text-center" colspan="4">Kích thước hình học tường hố ga (m)</th>
                                <th class="text-center" colspan="5">KTHH dầm giữa hố ga</th>
                                <th class="text-center" colspan="3">Chất hố ga mặt trong</th>
                                <th class="text-center" colspan="3">Chất hố ga mặt ngoài, cạnh 01 +02 (m)</th>
                                <th class="text-center" colspan="4">Kích thước hình học tường mũ mố thép dưới (m)</th>
                                <th class="text-center" colspan="4">Kích thước hình học tường mũ mố thép trên (m)</th>

                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                                <th class="text-center" colspan="4">Hình thức đấu nối</th>
                            </tr>
                            <tr>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_TenHoGaSauPhanLoai"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Tên hố ga sau phân loại
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_TenHoGaSauPhanLoai"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_HinhThucHoGa_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Hình thức hố ga
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_HinhThucHoGa_Name"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_KetCauMuMo_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Kết cấu mũ mố
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_KetCauMuMo_Name"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_KetCauTuong_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Kết cấu tường
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_KetCauTuong_Name"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_HinhThucMongHoGa_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Hình thức móng hố ga
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_HinhThucMongHoGa_Name"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_KetCauMong_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Kết cấu móng
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_KetCauMong_Name"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_ChatMatTrong_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Chát mặt trong
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_ChatMatTrong_Name"))"></span>
                                    </div>
                                </th>
                                <th onclick="@(() => SortTableS("ThongTinChungHoGa_ChatMatNgoai_Name"))" class="text-center sortable" rowspan="2">
                                    <div class="mr-3">
                                        Chát mặt ngoài
                                        <span class="arrow @(GetSortStyle("ThongTinChungHoGa_ChatMatNgoai_Name"))"></span>
                                    </div>
                                </th>

                                @* Thông tin kích thước hình học hố ga *@
                                <th>C.D dài (m)</th>
                                <th>C.rộng (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>
                                <th>CD tường (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>
                                <th>CD dầm (m)</th>
                                <th>C.Cao dầm giữa tường so với đáy hố ga (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>
                                <th>CD tường (m)</th>

                                <th>D (m)</th>
                                <th>R (m)</th>
                                <th>C (m)</th>
                                <th>CD tường (m)</th>

                                @* Hạng mục chiếm chỗ hố ga *@
                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>

                                <th>Loại</th>
                                <th>Cạnh dài</th>
                                <th>Cạnh rộng</th>
                                <th>Cạnh chéo</th>
                            </tr>
                        </thead>
                        @if (listPLHGModelS.Any())
                        {

                            <tbody>
                                @{
                                    int stt = 1;
                                }
                                @foreach (var item in listPLHGModelS)
                                {

                                    <tr>
                                        <td class="d-flex nowrap">
                                            <div class="d-inline-block">
                                                <button type="button" class="btn btn-sm btn-info m-1" title="Lựa chọn" @onclick="()=>HandleChooseId(item)">
                                                    <i class="fas fa-plus"></i>
                                                </button>

                                            </div>
                                        </td>
                                        <td class="text-center">@stt</td>
                                        <td class="text-center">@item.ThongTinChungHoGa_TenHoGaSauPhanLoai </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_HinhThucHoGa_Name </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_KetCauMuMo_Name </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_KetCauTuong_Name </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_HinhThucMongHoGa_Name </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_KetCauMong_Name </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_ChatMatTrong_Name </td>
                                        <td class="text-center">@item.ThongTinChungHoGa_ChatMatNgoai_Name  </td>
                                        <td class="text-center">@item.PhuBiHoGa_CDai  </td>
                                        <td class="text-center">@item.PhuBiHoGa_CRong</td>
                                        <td class="text-center">@item.BeTongLotMong_D</td>
                                        <td class="text-center">@item.BeTongLotMong_R</td>
                                        <td class="text-center">@item.BeTongLotMong_C</td>
                                        <td class="text-center">@item.BeTongMongHoGa_D  </td>
                                        <td class="text-center">@item.BeTongMongHoGa_R  </td>
                                        <td class="text-center">@item.BeTongMongHoGa_C</td>
                                        <td class="text-center">@item.DeHoGa_D</td>
                                        <td class="text-center">@item.DeHoGa_R</td>
                                        <td class="text-center">@item.DeHoGa_C</td>
                                        <td class="text-center">@item.TuongHoGa_D</td>
                                        <td class="text-center">@item.TuongHoGa_R  </td>
                                        <td class="text-center">@item.TuongHoGa_C</td>
                                        <td class="text-center">@item.TuongHoGa_CdTuong</td>
                                        <td class="text-center">@item.DamGiuaHoGa_D  </td>
                                        <td class="text-center">@item.DamGiuaHoGa_R</td>
                                        <td class="text-center">@item.DamGiuaHoGa_C</td>
                                        <td class="text-center">@item.DamGiuaHoGa_CdDam</td>
                                        <td class="text-center">@item.DamGiuaHoGa_CCaoDamGiuaTuongSoVoiDayHoGa</td>
                                        <td class="text-center">@item.ChatMatTrong_D  </td>
                                        <td class="text-center">@item.ChatMatTrong_R  </td>
                                        <td class="text-center">@item.ChatMatTrong_C</td>
                                        <td class="text-center">@item.ChatMatNgoaiCanh_D</td>
                                        <td class="text-center">@item.ChatMatNgoaiCanh_R  </td>
                                        <td class="text-center">@item.ChatMatNgoaiCanh_C</td>
                                        <td class="text-center">@item.MuMoThotDuoi_D</td>
                                        <td class="text-center">@item.MuMoThotDuoi_R</td>
                                        <td class="text-center">@item.MuMoThotDuoi_C</td>
                                        <td class="text-center">@item.MuMoThotDuoi_CdTuong</td>
                                        <td class="text-center">@item.MuMoThotTren_D  </td>
                                        <td class="text-center">@item.MuMoThotTren_R</td>
                                        <td class="text-center">@item.MuMoThotTren_C</td>
                                        <td class="text-center">@item.MuMoThotTren_CdTuong</td>
                                        <td class="text-center">@item.HinhThucDauNoi1_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi1_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi1_CanhRong</td>
                                        <td class="text-center">@item.HinhThucDauNoi1_CanhCheo</td>
                                        <td class="text-center">@item.HinhThucDauNoi2_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi2_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi2_CanhRong</td>
                                        <td class="text-center">@item.HinhThucDauNoi2_CanhCheo  </td>
                                        <td class="text-center">@item.HinhThucDauNoi3_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi3_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi3_CanhRong  </td>
                                        <td class="text-center">@item.HinhThucDauNoi3_CanhCheo</td>
                                        <td class="text-center">@item.HinhThucDauNoi4_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi4_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi4_CanhRong  </td>
                                        <td class="text-center">@item.HinhThucDauNoi4_CanhCheo</td>
                                        <td class="text-center">@item.HinhThucDauNoi5_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi5_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi5_CanhRong</td>
                                        <td class="text-center">@item.HinhThucDauNoi5_CanhCheo</td>
                                        <td class="text-center">@item.HinhThucDauNoi6_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi6_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi6_CanhRong</td>
                                        <td class="text-center">@item.HinhThucDauNoi6_CanhCheo  </td>
                                        <td class="text-center">@item.HinhThucDauNoi7_Loai  </td>
                                        <td class="text-center">@item.HinhThucDauNoi7_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi7_CanhRong </td>
                                        <td class="text-center">@item.HinhThucDauNoi7_CanhCheo</td>
                                        <td class="text-center">@item.HinhThucDauNoi8_Loai</td>
                                        <td class="text-center">@item.HinhThucDauNoi8_CanhDai</td>
                                        <td class="text-center">@item.HinhThucDauNoi8_CanhRong</td>
                                        <td class="text-center">@item.HinhThucDauNoi8_CanhCheo </td>
                                    </tr>
                                    stt++;
                                }

                            </tbody>
                        }
                        else
                        {
                            <tbody>
                                <tr>
                                    <td colspan="76"> Không có dữ liệu</td>
                                </tr>
                            </tbody>
                        }

                    </table>
                </div>

                @if (listPLHGModelS.Any())
                {
                    <Pagination MetaData="MetaDataS" Spread="2" SelectedPage="SelectedPageS" ChangePageSize="ChangePageSizeS"></Pagination>
                }

            </BodyTemplate>
        </CustomModal>
        <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
            <BodyTemplate>
                <EditForm id="editFormId" Model="Input" OnInvalidSubmit="HandleInValidSubmit" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div>
                        <h5>Thông tin cấu kiện</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="Table">Loại cấu kiện</label>
                                <button disabled="@isInsert" @onclick="ShowModalS" class="btn btn-outline-info form-control">Chọn @plHoGaModel.ThongTinChungHoGa_TenHoGaSauPhanLoai</button>
                                <ValidationMessage For="()=>Input.ThongTinChungHoGa_TenHoGaSauPhanLoai"></ValidationMessage>
                            </div>
                            
                             <div class="form-floating col-sm-6 col-md-3">
                                <label for="TenCongTac"><span>Hình thức thi công</span></label>
                                <InputText @bind-Value="plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name" class="form-control" readonly="readonly" />
                                <ValidationMessage For="() => Input.ThongTinChungHoGa_HinhThucHoGa" />
                             </div>
                             <div class="form-floating col-sm-6 col-md-3">
                                <label for="TenCongTac"><span>Kiểu mũ mố</span></label>
                                <InputText @bind-Value="plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name" class="form-control" readonly="readonly" />
                                 <ValidationMessage For="() => Input.TenCongTac" />
                              </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="table">loại bê tông</label>
                                <Select2 Id="select2" Items="@selectLBT" OnChange="@OnSelectChangeLBT"></Select2>
                                <validationmessage for="()=>Input.LoaiBeTong"></validationmessage>
                            </div>
                        </div>
                        <h5>Thông tin tên công tác thực tế</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="HangMuc">Hạng mục <span></span></label>
                                <Select2 disabled="@isInsert" Id="select3" Items="@selectHMTC" OnChange="@OnSelectChangeHMTC"></Select2>
                                <validationmessage for="()=>Input.HangMuc"></validationmessage>
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="HangMucCongTac">Hạng mục công tác <span></span></label>
                                <InputText @bind-Value="Input.HangMucCongTac" @bind-Value:after="OnValueChanged" class="form-control" id="HangMucCongTac" placeholder="Hạng mục công tác" />
                                <validationmessage for="()=>Input.HangMucCongTac"></validationmessage>
                            </div>
                            @if (disTenCongTac)
                            {
                                <div class="form-floating col-sm-6 col-md-3">
                                    <label for="TenCongTac">Tên công tác<span></span></label>
                                    <Select2 Id="select6" Items="@selectTenCongTac" OnChange="@OnSelectChangeTenCongTac"></Select2>
                                    <ValidationMessage For="() => Input.TenCongTac" />
                                </div>
                            }
                            else
                            {
                                <div class="form-floating col-sm-6 col-md-3">
                                    <label for="TenCongTac">Tên công tác<span></span></label>
                                    <InputText @bind-Value="Input.TenCongTac" class="form-control" id="TenCongTac" placeholder="Tên công tác" />
                                    <ValidationMessage For="() => Input.TenCongTac" />
                                </div>
                            }
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="VTLayKhoiLuong">Đơn vị<span></span></label>
                                <InputText @bind-Value:after="OnValueChanged" @bind-Value="Input.DonVi" class="form-control" id="DonVi" placeholder="Đơn vị" />
                                <ValidationMessage For="() => Input.DonVi" />
                            </div>
                        </div>
                        <h5>Thông tin KTHH tính khối lượng (m3)</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3" title="Bắt buộc phải nhập giá trị vào đây. Giá trị là chiều dài thực tế của 01 cấu kiện">
                                <label for="KTHH_D">D<span></span></label>
                                <InputNumber @bind-Value="Input.KTHH_D" @bind-Value:after="OnValueChanged" class="form-control" id="KTHH_D" readonly="@disKTHH" key="@disKTHH" />
                                <ValidationMessage For="() => Input.KTHH_D" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KTHH_R">R<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KTHH_R" class="form-control" id="KTHH_R" readonly="@disKTHH" key="@disKTHH" />
                                <ValidationMessage For="() => Input.KTHH_R" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KTHH_C">C<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KTHH_C" class="form-control" id="KTHH_C" readonly="@disKTHH" key="@disKTHH" />
                                <ValidationMessage For="() => Input.KTHH_C" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3" title="Bắt buộc phải nhập giá trị tương ứng vào đây. Giá trị là kết quả của của chiều rộng  chiều cao của 01 cấu kiện cống tròn">
                                <label for="KTHH_DienTich">Diện tích<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KTHH_DienTich" class="form-control" id="KTHH_DienTich" />
                                <ValidationMessage For="() => Input.KTHH_DienTich" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3" title="Để cố định. Thông tin cố định là 'Rộng*Cao' ">
                                <label for="KTHH_GhiChu">Ghi chú<span></span></label>
                                <Select2 Id="select4" Items="@selectGhiChu" OnChange="@OnSelectChangeGhiChu"></Select2>
                                <validationmessage for="()=>Input.KTHH_GhiChu"></validationmessage>
                            </div>
                            <div class="form-floating col-sm-6 col-md-3" title="Bắt buộc phải nhập giá trị vào đây. Giá trị mặc định là 01">
                                <label for="KTHH_SLCauKien">Số lượng cấu kiện<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KTHH_SLCauKien" class="form-control" id="KTHH_SLCauKien" />
                                <ValidationMessage For="() => Input.KTHH_SLCauKien" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KTHH_KL1CK">KL 01 CK<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KTHH_KL1CK" class="form-control" id="KTHH_KL1CK" readonly />
                                <ValidationMessage For="() => Input.KTHH_KL1CK  " />
                            </div>
                        </div>
                        <h5>Thông tin cạnh tính diện tích (m2)</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTCDT_CDai">Cạnh dài<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TTCDT_CDai" class="form-control" id="TTCDT_CDai" />
                                <ValidationMessage For="() => Input.TTCDT_CDai" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTCDT_CRong">Cạnh rộng<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TTCDT_CRong" class="form-control" id="TTCDT_CRong" />
                                <ValidationMessage For="() => Input.TTCDT_CRong" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTCDT_CDay">Cạnh đáy<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TTCDT_CDay" class="form-control" id="TTCDT_CDay" />
                                <ValidationMessage For="() => Input.TTCDT_CDay" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTCDT_DienTich">Diện tích<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TTCDT_DienTich" class="form-control" id="TTCDT_DienTich" />
                                <ValidationMessage For="() => Input.TTCDT_DienTich" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTCDT_SLCK">Số lượng cấu kiện<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TTCDT_SLCK" class="form-control" id="TTCDT_SLCK" />
                                <ValidationMessage For="() => Input.TTCDT_SLCK" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTCDT_KL">KL<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TTCDT_KL" class="form-control" id="TTCDT_KL" readonly />
                                <ValidationMessage For="() => Input.TTCDT_KL" />
                            </div>

                        </div>
                        <h5>Thông tin KL không phải M2,M3</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KLKP_KL">Khối lượng<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KLKP_KL" class="form-control" id="KLKP_KL" readonly="@disInput" />
                                <ValidationMessage For="() => Input.KLKP_KL" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KLKP_Sl">Số lượng<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KLKP_Sl" class="form-control" id="KLKP_Sl" />
                                <ValidationMessage For="() => Input.KLKP_Sl" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KL1CK_ChuaTruCC">KL 01CK Chưa trừ chiếm chỗ<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KL1CK_ChuaTruCC" class="form-control" id="KL1CK_ChuaTruCC" readonly />
                                <ValidationMessage For="() => Input.KL1CK_ChuaTruCC" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="KLCC1CK">KL chiếm chỗ/01CK<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.KLCC1CK" class="form-control" id="KLCC1CK" />
                                <ValidationMessage For="() => Input.KLCC1CK" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TKLCK_SauCC">Tổng KLCK sau chiếm chỗ<span></span></label>
                                <InputNumber @bind-Value:after="OnValueChanged" @bind-Value="Input.TKLCK_SauCC" class="form-control" id="TKLCK_SauCC" readonly />
                                <ValidationMessage For="() => Input.TKLCK_SauCC" />
                            </div>
                        </div>
                    </div>
                </EditForm>
            </BodyTemplate>
            <FooterTemplate>
                <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                    @if (isLoadingCaculate)
                    {
                        <button class="btn btn-primary mr-2" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            Loading...
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary mr-2" type="submit" form="editFormId">Save</button>
                    }

                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </FooterTemplate>
        </CustomModal>
    </div>
    <div class="row m-3 ">
        <div class="col-md-9 col-sm-12">
            <EditForm Model="InputMD" FormName="Search" OnValidSubmit="@Search">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-sm-4 col-md-3 mb-2">
                        <label for="Table">Loại cấu kiện</label>
                        <Select2 Id="selectSearchLCK" Items="@selectSearchLCK" OnChange="@OnSelectChangeSearchLCK"></Select2>
                        <ValidationMessage For="()=>InputMD.LoaiCauKienId"></ValidationMessage>
                    </div>

                    <!-- Search Button -->
                    <div class="col-sm-4 col-md-2 mb-2">
                        <label>&nbsp;</label>
                        <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
                    </div>
                    <div class="col-sm-4 col-md-2 mb-2">
                        <label>&nbsp;</label>
                        <button type="button" @onclick="ShowModal" class="btn btn-info w-100">Tạo mới</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-md-3 col-sm-6 text-end">
            <button class="btn btn-outline-primary me-2" @onclick="ThumbtackHeader" title="Ghim tiêu đề bảng">
                <i class="fas fa-thumbtack"></i>
            </button>
        </div>
    </div>
    <div id="tableContainer ">
        <div class="table-report ">
            <div>
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="mt-1">BẢNG PHÂN KHAI KHỐI LƯỢNG CHI TIẾT 01 Hố GA</h5>
                    <i @onclick="ExportExcel" class="fa fa-download accent-blue mr-2" title="Download file excel" aria-hidden="true" style="cursor: pointer;"></i>
                </div>
                <div class=" mt-2">
                    <table id="tb-left" class="table table-hover table-bordered mt-3">
                        <thead class="bg-info @thumbtack">
                            <tr>
                                <th rowspan="2"></th>
                                <th class="text-center" rowspan="2">STT</th>
                                <th class="text-center" colspan="4">Thông tin cấu kiện</th>
                                <th class="text-center" colspan="3">Thông tin tên công tác thực tế</th>
                                <th class="text-center" colspan="7">Thông tin KTHH tính khối lượng (m3)</th>
                                <th class="text-center" colspan="6">Thông tin cạnh tính diện tích (m2)</th>
                                <th class="text-center" colspan="2">Thông tin KL không phải M2,M3</th>
                                <th class="text-center" rowspan="2">KL 01CK Chưa trừ chiếm chỗ</th>
                                <th class="text-center" rowspan="2">KL chiếm chỗ/01CK</th>
                                <th class="text-center" rowspan="2">Tổng KLCK sau chiếm chỗ</th>
                            </tr>
                            <tr>
                                <th> Loại cấu kiện</th>
                                <th> Hình thức thi công</th>
                                <th> Kiểu mũ mố</th>
                                <th> Loại bê tông</th>

                                <th> Hạng mục công tác</th>
                                <th> Tên công tác thực tế</th>
                                <th> Đơn vị</th>

                                <th> D</th>
                                <th> R</th>
                                <th> C</th>
                                <th> Diện tích</th>
                                <th> Ghi chú diện tích</th>
                                <th> Số lượng cấu kiện</th>
                                <th> KL 01 CK</th>
                                <th> Cạnh dài</th>
                                <th> Cạnh rộng</th>
                                <th> Cạnh đáy</th>
                                <th> Diện tích</th>
                                <th> Số lượng cấu kiện</th>
                                <th> KL</th>
                                <th> Khối lượng</th>
                                <th> Số lượng</th>
                            </tr>
                        </thead>
                        @if (listPKKLCTietHoGaModel.Any())
                        {
                            <tbody>
                                @foreach (var group in listPKKLCTietHoGaModel.GroupBy(item => item.LoaiCauKienId))
                                {

                                    int stt = 0;
                                    string HangMuc = "";
                                    @foreach (var groupChild in group.GroupBy(item => item.HangMuc))
                                    {
                                        @foreach (var item in groupChild.OrderBy(g => g.Flag))
                                        {
                                            stt++;

                                            if (string.IsNullOrEmpty(HangMuc) || HangMuc.ToUpper().Trim() != @item.HangMuc.ToUpper().Trim())
                                            {
                                                HangMuc = @item.HangMuc;
                                                <tr class="bg-warning text-bold">
                                                    <td></td>
                                                    <td>@getChiMuc(HangMuc)</td>
                                                    <td colspan="2">@item.LoaiCauKien</td>
                                                    <td>@HangMuc &nbsp; @item.LoaiCauKien</td>
                                                    <td>@HangMuc &nbsp; @item.LoaiCauKien</td>
                                                    <td colspan="21"></td>
                                                </tr>
                                            }
                                            <tr>
                                                <td class="d-flex nowrap">
                                                    <div class="d-inline-block">
                                                        <button class="btn btn-sm btn-danger " title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.TenCongTac)">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-primary" title="Sửa" @onclick="()=>HandleEdit(item.Id)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <div class="btn btn-sm p-0">
                                                            <div class="d-flex flex-column align-items-center">
                                                                <i class="fa fa-angle-up btn-top" @onclick="()=>InsertLaterFlag(item ,true)" title="Thêm vào trước" aria-hidden="true"></i>
                                                                <i class="fa fa-angle-down btn-down" @onclick="()=>InsertLaterFlag(item,false)" title="Thêm vào sau" aria-hidden="true"></i>
                                                                
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                                <td>@item.Flag</td>
                                                <td>@item.LoaiCauKien</td>
                                                <td>@item.ThongTinChungHoGa_HinhThucHoGa_Name</td>
                                                <td>@item.ThongTinChungHoGa_KetCauMuMo_Name</td>
                                                <td>@item.LoaiBeTong</td>
                                                <td>@item.HangMucCongTac</td>
                                                <td>@item.TenCongTac</td>
                                                <td>@item.DonVi</td>
                                                <td>@item.KTHH_D</td>
                                                <td>@item.KTHH_R</td>
                                                <td>@item.KTHH_C</td>
                                                <td>@item.KTHH_DienTich</td>
                                                <td>@item.KTHH_GhiChu</td>
                                                <td>@item.KTHH_SLCauKien</td>
                                                <td>@item.KTHH_KL1CK</td>
                                                <td>@item.TTCDT_CDai</td>
                                                <td>@item.TTCDT_CRong</td>
                                                <td>@item.TTCDT_CDay</td>
                                                <td>@item.TTCDT_DienTich</td>
                                                <td>@item.TTCDT_SLCK</td>
                                                <td>@item.TTCDT_KL</td>
                                                <td>@item.KLKP_KL</td>
                                                <td>@item.KLKP_Sl</td>
                                                <td>@item.KL1CK_ChuaTruCC </td>
                                                <td>@item.KLCC1CK </td>
                                                <td>@item.TKLCK_SauCC </td>
                                            </tr>
                                        }
                                    }
                                   
                                }
                            </tbody>
                        }
                        else
                        {
                            <tbody>
                                <tr>
                                    <td colspan="24"> Không có dữ liệu</td>
                                </tr>
                            </tbody>
                        }
                    </table>
                </div>
                <div class="mt-4">
                    @if (listPKKLCTietHoGaModel.Any())
                    {
                        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
                    }
                </div>
            </div>
        </div>
    </div>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>


@code {
    string groupId = "";
    string userId = "";
    List<DanhMuc1> listDanhMuc = new();
    private bool isLoadingCaculate = false;
    private bool isLoading = false;
    private bool isModalVisible = false;
    private bool isModalVisibleS = false;
    private string TitleModal = "Thêm mới ";
    bool isEdit = false;
    string thumbtack = "";
    private DateTime baseTime;
    PhanLoaiHoGaModel plHoGaModel = new();

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    private PKKLCTietHoGa Input = new();
    private PKKLCTietHoGaModel InputMD = new PKKLCTietHoGaModel();

    private List<SelectedItem> selectHMTC = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true },
        new SelectedItem { Value = "I.Móng hố ga, hố ga", Text = "I.Móng hố ga, hố ga " },
        new SelectedItem { Value = "II.Hố ga lắp đặt, hố ga", Text = "II.Hố ga lắp đặt, hố ga  "},
        new SelectedItem { Value = "III.1 Tường hố ga xây gạch", Text = "III.1 Tường hố ga xây gạch "},
        new SelectedItem { Value = "III.2 Chát tường hố ga xây gạch", Text = "III.2 Chát tường hố ga xây gạch "},
        new SelectedItem { Value = "IV.1 Tường hố ga bê tông", Text = "IV.1 Tường hố ga bê tông "},
        new SelectedItem { Value = "IV.2 Ván khuân tường hố ga bê tông", Text = "IV.2 Ván khuân tường hố ga bê tông "},
        new SelectedItem { Value = "V.Mũ mố hố ga, hố ga", Text = "V.Mũ mố hố ga, hố ga "},
        new SelectedItem { Value = "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga", Text = "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga "},
        new SelectedItem { Value = "VII.Gia công, lắp dựng cốt thép hố ga", Text = "VII.Gia công, lắp dựng cốt thép hố ga "},
    };
    private async void OnSelectChangeHMTC(SelectedItem selectedItem)
    {
        Input.HangMuc = selectedItem.Value;
        await Caculate();
    }

    private List<SelectedItem> selectGhiChu = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true },
        new SelectedItem { Value = "Rộng*Cao", Text = "Rộng*Cao" },
        new SelectedItem { Value = "Dài*Cao", Text = "Dài*Cao"},
        new SelectedItem { Value = "Dài*Rộng", Text = "Dài*Rộng"},
    };

    private List<SelectedItem> selectTenCongTac = new();

    private async void OnSelectChangeTenCongTac(SelectedItem selectedItem)
    {
        if (double.TryParse(selectedItem.Value, out double result))
        {
            Input.KLKP_KL = result;
        }
        else
        {
            Input.KLKP_KL = 0;
        }
        Input.TenCongTac = selectedItem.Text;

        await Caculate();
    }

    private async void OnSelectChangeGhiChu(SelectedItem selectedItem)
    {
        Input.KTHH_GhiChu = selectedItem.Value;
        await Caculate();
    }

    private List<SelectedItem> selectLBT = new List<SelectedItem>
    {
        new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true },
        new SelectedItem { Value = "Bê tông thương phẩm", Text = "Bê tông thương phẩm" },
    };
    private async void OnSelectChangeLBT(SelectedItem selectedItem)
    {
        Input.LoaiBeTong = selectedItem.Value;
        await Caculate();
    }

    private List<SelectedItem> selectLCK = new();
    private async void OnSelectChangeLCK(SelectedItem selectedItem)
    {
        Input.ThongTinChungHoGa_TenHoGaSauPhanLoai = selectedItem.Value;
        await Caculate();
    }
    private List<SelectedItem> selectSearchLCK = new();
    private async void OnSelectChangeSearchLCK(SelectedItem selectedItem)
    {
        InputMD.LoaiCauKienId = selectedItem.Value;
    }

    //search

    private List<SelectedItem> selectHTHG = new();
    private List<SelectedItem> selectKCMM = new();
    private List<SelectedItem> selectKCT = new();
    private List<SelectedItem> selectHTMHG = new();
    private List<SelectedItem> selectKCM = new();
    private void OnSelectChangeHTHG(SelectedItem selectedItem)
    {
        InputMDS.ThongTinChungHoGa_HinhThucHoGa = selectedItem.Value;
    }
    private void OnSelectChangeKCMM(SelectedItem selectedItem)
    {
        InputMDS.ThongTinChungHoGa_KetCauMuMo = selectedItem.Value;
    }
    private void OnSelectChangeKCT(SelectedItem selectedItem)
    {
        InputMDS.ThongTinChungHoGa_KetCauTuong = selectedItem.Value;
    }
    private void OnSelectChangeHTMHG(SelectedItem selectedItem)
    {
        InputMDS.ThongTinChungHoGa_HinhThucMongHoGa = selectedItem.Value;
    }
    private void OnSelectChangeKCM(SelectedItem selectedItem)
    {
        InputMDS.ThongTinChungHoGa_KetCauMong = selectedItem.Value;
    }

    public List<PKKLCTietHoGaModel> listPKKLCTietHoGaModel { get; set; } = new();
    public List<PKKLCTietHoGaModel> listModel { get; set; } = new();
    public MetaData MetaData { get; set; }
    public PKKLCTietHoGaModel tKThepHoGaModel { get; set; }
    public PhanLoaiHoGaModel InputMDS = new();

    private System.Timers.Timer _typingTimer;
    private int _debounceDelay = 5; // Thời gian đợi sau khi người dùng dừng nhập (ms)

    // Hàm được gọi sau khi bind-value hoàn tất
    private void OnValueChanged()
    {
        // Dừng Timer cũ nếu đang chạy
        _typingTimer?.Stop();

        // Khởi động Timer mới
        _typingTimer = new System.Timers.Timer(_debounceDelay);
        _typingTimer.Elapsed += async (_, _) =>
        {
            _typingTimer.Stop();
            await InvokeAsync(OnTypingStopped); // Gọi hàm xử lý khi người dùng dừng nhập
        };
        _typingTimer.AutoReset = false;
        _typingTimer.Start();
    }

    // Hàm xử lý logic khi người dùng dừng nhập
    private async Task OnTypingStopped()
    {
        // Đảm bảo dữ liệu đã được bind vào model
        await Caculate(); // Gọi logic xử lý
    }

    private bool disInput { get; set; } = false;
    private bool disTenCongTac { get; set; } = false;
    private bool disKTHH { get; set; } = false;

    public async Task Caculate()
    {
        isLoadingCaculate = true;
        if (!string.IsNullOrEmpty(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai))
        { 
            switch (Input.HangMuc)
            {
                case "I.Móng hố ga, hố ga":
                    disKTHH = true;
                    if (plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.ToUpper().Trim() =="THI CÔNG TRỰC TIẾP")
                    {
                        if (Input.HangMucCongTac.ToUpper().Trim() == "Lót móng hố ga".ToUpper().Trim() || Input.HangMucCongTac.ToUpper().Trim() == "Ván khuân lót móng hố van".ToUpper().Trim())
                        {
                            Input.KTHH_D = plHoGaModel.BeTongLotMong_D ?? 0;
                            Input.KTHH_R = plHoGaModel.BeTongLotMong_R ?? 0;
                            Input.KTHH_C = plHoGaModel.BeTongLotMong_C ?? 0;

                        }
                        else if (Input.HangMucCongTac.ToUpper().Trim() == "Móng bê tông hố ga".ToUpper().Trim() || Input.HangMucCongTac.ToUpper().Trim() == "Ván khuân móng hố ga".ToUpper().Trim())
                        {
                            Input.KTHH_D = plHoGaModel.BeTongMongHoGa_D ?? 0;
                            Input.KTHH_R = plHoGaModel.BeTongMongHoGa_R ?? 0;
                            Input.KTHH_C = plHoGaModel.BeTongMongHoGa_C ?? 0;
                        }
                        else
                        {
                            Input.KTHH_D = 0;
                            Input.KTHH_R = 0;
                            Input.KTHH_C = 0;
                        }
                    }
                    else
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                    }

                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    break;
                case "II.Hố ga lắp đặt, hố ga":
                    if (!string.IsNullOrEmpty(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai)
                    && Input.HangMucCongTac.ToUpper().Trim() == "Vận chuyển từ bãi đúc đến công trường".ToUpper())
                    {
                        disInput = true;
                        var KLKP_KL = await PKKLCTietHoGaRepository.GetTKLCK_SauCCByLCK(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
                        if (KLKP_KL != null)
                        {
                            Input.KLKP_KL = Math.Round((KLKP_KL.TKLCK_SauCC * 2400), 4);
                        }
                    }
                    else
                    {
                        disInput = false;
                    }
                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    disKTHH = false;
                    break;
                case "III.1 Tường hố ga xây gạch":
                    disKTHH = true;
                    if (plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.ToUpper().Trim() == "THI CÔNG TRỰC TIẾP")
                    {
                        switch (Input.HangMucCongTac.ToUpper().Trim())
                        {
                            case "TƯỜNG XÂY GẠCH CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.TuongHoGa_D ?? 0;
                                Input.KTHH_R = plHoGaModel.TuongHoGa_CdTuong ?? 0;
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            case "TƯỜNG XÂY GẠCH CẠNH RỘNG":
                                Input.KTHH_D = plHoGaModel.TuongHoGa_CdTuong ?? 0;
                                Input.KTHH_R = plHoGaModel.TuongHoGa_R ?? 0;
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            case "DẦM GIỮA TƯỜNG HỐ GA CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.DamGiuaHoGa_D ?? 0;
                                Input.KTHH_R = plHoGaModel.DamGiuaHoGa_CdDam ?? 0;
                                Input.KTHH_C = plHoGaModel.DamGiuaHoGa_C ?? 0;
                                break;
                            case "DẦM GIỮA TƯỜNG HỐ GA CẠNH RỘNG":
                                Input.KTHH_D = plHoGaModel.DamGiuaHoGa_CdDam ?? 0;
                                Input.KTHH_R = plHoGaModel.DamGiuaHoGa_R ?? 0;
                                Input.KTHH_C = plHoGaModel.DamGiuaHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN DẦM GIỮA MẶT NGOÀI CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.DamGiuaHoGa_D ?? 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = plHoGaModel.DamGiuaHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN DẦM GIỮA MẶT NGOÀI CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                if (plHoGaModel.ThongTinChungHoGa_TenHoGaSauPhanLoai.EndsWith("(BT)"))
                                {
                                    Input.KTHH_R = 0;
                                }
                                else
                                {
                                    Input.KTHH_R = Math.Round((plHoGaModel.DamGiuaHoGa_R ?? 0 + (plHoGaModel.DamGiuaHoGa_CdDam + plHoGaModel.DamGiuaHoGa_CdDam ?? 0)), 4);
                                }
                                Input.KTHH_C = plHoGaModel.DamGiuaHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN DẦM GIỮA MẶT TRONG CẠNH DÀI":
                                Input.KTHH_R = 0;
                                if (plHoGaModel.ThongTinChungHoGa_TenHoGaSauPhanLoai.EndsWith("(BT)"))
                                {
                                    Input.KTHH_D = 0;
                                }
                                else
                                {
                                    Input.KTHH_D = Math.Round((plHoGaModel.DamGiuaHoGa_D ?? 0 - (plHoGaModel.DamGiuaHoGa_CdDam + plHoGaModel.DamGiuaHoGa_CdDam ?? 0)), 4);
                                }
                                Input.KTHH_C = plHoGaModel.DamGiuaHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN DẦM GIỮA MẶT TRONG CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                Input.KTHH_R = plHoGaModel.DamGiuaHoGa_R ?? 0;
                                Input.KTHH_C = plHoGaModel.DamGiuaHoGa_C ?? 0;
                                break;
                            default:
                                disKTHH = false;
                                Input.KTHH_D = 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = 0;
                                break;
                        }
                    }
                    else
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                    }
                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    break;
                case "III.2 Chát tường hố ga xây gạch":
                    disKTHH = true;
                    if (plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.ToUpper().Trim() == "THI CÔNG TRỰC TIẾP")
                    {
                        switch (Input.HangMucCongTac.ToUpper().Trim())
                        {
                            case "CHÁT TƯỜNG MẶT TRONG CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.ChatMatTrong_D ?? 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = plHoGaModel.ChatMatTrong_C ?? 0;
                                break;
                            case "CHÁT TƯỜNG MẶT TRONG CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                Input.KTHH_R = plHoGaModel.ChatMatTrong_R ?? 0;
                                Input.KTHH_C = plHoGaModel.ChatMatTrong_C ?? 0;
                                break;
                            case "CHÁT TƯỜNG MẶT NGOÀI CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.ChatMatNgoaiCanh_D ?? 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = plHoGaModel.ChatMatNgoaiCanh_C ?? 0;
                                break;
                            case "CHÁT TƯỜNG MẶT NGOÀI CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                Input.KTHH_R = plHoGaModel.ChatMatNgoaiCanh_R ?? 0;
                                Input.KTHH_C = plHoGaModel.ChatMatNgoaiCanh_C ?? 0;
                                break;
                            default:
                                disKTHH = false;
                                Input.KTHH_D = 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = 0;
                                break;
                        }
                    }
                    else
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                    }
                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    break;
                case "IV.1 Tường hố ga bê tông":
                    disKTHH = true;
                    if (plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.ToUpper().Trim() == "THI CÔNG TRỰC TIẾP" && plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.EndsWith("BT"))
                    {
                        switch (Input.HangMucCongTac.ToUpper().Trim())
                        {
                            case "TƯỜNG BÊ TÔNG CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.TuongHoGa_D ?? 0;
                                Input.KTHH_R = plHoGaModel.TuongHoGa_CdTuong ?? 0;
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            case "TƯỜNG BÊ TÔNG CẠNH RỘNG":
                                Input.KTHH_D = plHoGaModel.TuongHoGa_CdTuong ?? 0;
                                Input.KTHH_R = plHoGaModel.TuongHoGa_R ?? 0;
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            default:
                                Input.KTHH_D = 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = 0;
                                break;
                        }
                    }
                    else
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                    }
                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    break;
                case "IV.2 Ván khuân tường hố ga bê tông":
                    disKTHH = true;
                    if (plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.ToUpper().Trim() == "THI CÔNG TRỰC TIẾP" && plHoGaModel.ThongTinChungHoGa_TenHoGaSauPhanLoai.EndsWith("(BT)"))
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                        switch (Input.HangMucCongTac.ToUpper().Trim())
                        {
                            case "VÁN KHUÂN TƯỜNG MẶT TRONG CẠNH DÀI":
                                Input.KTHH_R = 0;
                                Input.KTHH_D = Math.Round((plHoGaModel.TuongHoGa_D ?? 0 - (plHoGaModel.TuongHoGa_CdTuong + plHoGaModel.TuongHoGa_CdTuong ?? 0)), 4);
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN TƯỜNG MẶT TRONG CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                Input.KTHH_R = plHoGaModel.TuongHoGa_R ?? 0;
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN TƯỜNG MẶT NGOÀI CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.TuongHoGa_CdTuong ?? 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            case "VÁN KHUÂN TƯỜNG MẶT NGOÀI CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                Input.KTHH_R = Math.Round((plHoGaModel.TuongHoGa_R ?? 0 + (plHoGaModel.TuongHoGa_CdTuong + plHoGaModel.TuongHoGa_CdTuong ?? 0)), 4);
                                Input.KTHH_C = plHoGaModel.TuongHoGa_C ?? 0;
                                break;
                            default:
                                Input.KTHH_D = 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = 0;
                                break;
                        }
                    }
                    else
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                    }

                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    break;
                case "V.Mũ mố hố ga, hố ga":
                    disKTHH = true;
                    if (plHoGaModel.ThongTinChungHoGa_HinhThucHoGa_Name.Trim().ToUpper() == "THI CÔNG TRỰC TIẾP")
                    {
                        switch (Input.HangMucCongTac.ToUpper().Trim())
                        {
                            case "MŨ MỐ HỐ GA THỚT DƯỚI CẠNH DÀI":
                                if (Input.LoaiBeTong.ToUpper().Trim() == "BÊ TÔNG THƯƠNG PHẨM")
                                {
                                    Input.KTHH_D = plHoGaModel.MuMoThotDuoi_D ?? 0;
                                    Input.KTHH_R = plHoGaModel.MuMoThotDuoi_CdTuong ?? 0;
                                    Input.KTHH_C = plHoGaModel.MuMoThotDuoi_C ?? 0;
                                }
                                else
                                {
                                    Input.KTHH_D = plHoGaModel.MuMoThotTren_D ?? 0;
                                    Input.KTHH_R = plHoGaModel.MuMoThotTren_CdTuong ?? 0;
                                    Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                }
                                break;
                            case "MŨ MỐ HỐ GA THỚT DƯỚI CẠNH RỘNG":
                                Input.KTHH_D = plHoGaModel.MuMoThotDuoi_CdTuong ?? 0;
                                Input.KTHH_R = plHoGaModel.MuMoThotDuoi_R ?? 0;
                                Input.KTHH_C = plHoGaModel.MuMoThotDuoi_C ?? 0;
                                break;
                            case "MŨ MỐ HỐ GA THỚT TRÊN CẠNH DÀI":
                                if(Input.LoaiBeTong.ToUpper().Trim()=="BÊ TÔNG THƯƠNG PHẨM")
                                {
                                    if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.Trim().ToUpper() == "Mũ mố bê tông".ToUpper().Trim()
                                    || plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.Trim().ToUpper() == "Mũ mố bê tông cốt thép".ToUpper().Trim())
                                    {
                                        Input.KTHH_D = plHoGaModel.MuMoThotTren_D ?? 0;
                                        Input.KTHH_R = plHoGaModel.MuMoThotTren_CdTuong ?? 0;
                                        Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                    }
                                    else
                                    {
                                        Input.KTHH_D = 0;
                                        Input.KTHH_R = 0;
                                        Input.KTHH_C = 0;
                                    }
                                }
                                else
                                {
                                    if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.Trim().ToUpper() == "Mũ mố xây gạch".ToUpper().Trim())
                                    {
                                        Input.KTHH_D = plHoGaModel.MuMoThotTren_D ?? 0;
                                        Input.KTHH_R = plHoGaModel.MuMoThotTren_CdTuong ?? 0;
                                        Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                    }
                                    else
                                    {
                                        Input.KTHH_D = 0;
                                        Input.KTHH_R = 0;
                                        Input.KTHH_C = 0;
                                    }
                                }

                                break;
                            case "MŨ MỐ HỐ GA THỚT TRÊN CẠNH RỘNG":

                                if (Input.LoaiBeTong.ToUpper().Trim() == "BÊ TÔNG THƯƠNG PHẨM")
                                {
                                    if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.Trim().ToUpper() == "Mũ mố bê tông".ToUpper().Trim()
                                    || plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.Trim().ToUpper() == "Mũ mố bê tông cốt thép".ToUpper().Trim())
                                    {
                                        Input.KTHH_D = plHoGaModel.MuMoThotTren_CdTuong ?? 0;
                                        Input.KTHH_R = plHoGaModel.MuMoThotTren_R ?? 0;
                                        Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                    }
                                    else
                                    {
                                        Input.KTHH_D = 0;
                                        Input.KTHH_R = 0;
                                        Input.KTHH_C = 0;
                                    }
                                }
                                else
                                {
                                    if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.Trim().ToUpper() == "Mũ mố xây gạch".ToUpper().Trim())
                                    {
                                        Input.KTHH_D = plHoGaModel.MuMoThotTren_CdTuong ?? 0;
                                        Input.KTHH_R = plHoGaModel.MuMoThotTren_R ?? 0;
                                        Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                    }
                                    else
                                    {
                                        Input.KTHH_D = 0;
                                        Input.KTHH_R = 0;
                                        Input.KTHH_C = 0;
                                    }
                                }
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT DƯỚI MẶT TRONG CẠNH DÀI":
                                Input.KTHH_D = Math.Round((plHoGaModel.MuMoThotDuoi_D - (plHoGaModel.MuMoThotDuoi_CdTuong + plHoGaModel.MuMoThotDuoi_CdTuong) ?? 0),4);
                                Input.KTHH_R = 0;
                                Input.KTHH_C = plHoGaModel.MuMoThotDuoi_C ?? 0;
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT DƯỚI MẶT TRONG CẠNH RỘNG":
                                Input.KTHH_D =  0;
                                Input.KTHH_R = plHoGaModel.MuMoThotDuoi_R ?? 0;
                                Input.KTHH_C = plHoGaModel.MuMoThotDuoi_C ?? 0;
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT DƯỚI MẶT NGOÀI CẠNH DÀI":
                                Input.KTHH_D = plHoGaModel.MuMoThotDuoi_D ?? 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = plHoGaModel.MuMoThotDuoi_C ?? 0;
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT DƯỚI MẶT NGOÀI CẠNH RỘNG":
                                Input.KTHH_D = 0;
                                Input.KTHH_R = Math.Round((plHoGaModel.MuMoThotDuoi_R + (plHoGaModel.MuMoThotDuoi_CdTuong + plHoGaModel.MuMoThotDuoi_CdTuong) ?? 0), 4);
                                Input.KTHH_C = plHoGaModel. MuMoThotDuoi_C  ?? 0;
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT TRÊN MẶT TRONG CẠNH DÀI":

                                Input.KTHH_R = 0;
                                if(plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG" || plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() =="MŨ MỐ BÊ TÔNG CỐT THÉP")
                                {
                                    Input.KTHH_D = Math.Round((plHoGaModel.MuMoThotTren_D - (plHoGaModel.MuMoThotTren_CdTuong + plHoGaModel.MuMoThotTren_CdTuong) ?? 0), 4);
                                    Input.KTHH_C = plHoGaModel.MuMoThotTren_C??0;
                                }
                                else
                                {
                                    Input.KTHH_D = 0;
                                    Input.KTHH_R = 0;
                                    Input.KTHH_C = 0;
                                }
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT TRÊN MẶT TRONG CẠNH RỘNG":
                                if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG" || plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG CỐT THÉP")
                                {
                                    Input.KTHH_D = 0;
                                    Input.KTHH_R = plHoGaModel.MuMoThotTren_R ?? 0;
                                    Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                }
                                else
                                {
                                    Input.KTHH_D = 0;
                                    Input.KTHH_R = 0;
                                    Input.KTHH_C = 0;
                                }
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT TRÊN MẶT NGOÀI CẠNH DÀI":
                                if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG" || plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG CỐT THÉP")
                                {
                                    Input.KTHH_D = plHoGaModel.MuMoThotTren_D ?? 0;
                                    Input.KTHH_R = 0;
                                    Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                }
                                else
                                {
                                    Input.KTHH_D = 0;
                                    Input.KTHH_R = 0;
                                    Input.KTHH_C = 0;
                                }
                                break;
                            case "VÁN KHUÂN MŨ MỐ HỐ GA THỚT TRÊN MẶT NGOÀI CẠNH RỘNG":
                                if (plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG" || plHoGaModel.ThongTinChungHoGa_KetCauMuMo_Name.ToUpper().Trim() == "MŨ MỐ BÊ TÔNG CỐT THÉP")
                                {
                                    Input.KTHH_D =  0;
                                    Input.KTHH_R = Math.Round((plHoGaModel.MuMoThotTren_R + (plHoGaModel.MuMoThotTren_CdTuong + plHoGaModel.MuMoThotTren_CdTuong) ?? 0), 4);
                                    Input.KTHH_C = plHoGaModel.MuMoThotTren_C ?? 0;
                                }
                                else
                                {
                                    Input.KTHH_D = 0;
                                    Input.KTHH_R = 0;
                                    Input.KTHH_C = 0;
                                }
                                break;
                            default:
                                Input.KTHH_D = 0;
                                Input.KTHH_R = 0;
                                Input.KTHH_C = 0;
                                break;
                        }
                    }
                    else
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                    }

                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);
                    disTenCongTac = false;
                    break;
                case "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga":
                    if (!string.IsNullOrEmpty(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai))
                    {
                        if (plHoGaModel.ThongTinChungHoGa_TenHoGaSauPhanLoai.EndsWith("=G"))
                        {
                            Input.TKLCK_SauCC = 0;
                        }
                        else
                        {
                            var TKLCK_SauCC = await PKKLCTietHoGaRepository.GetSumTKLCK_SauCCByLCK(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
                            Input.TKLCK_SauCC = Math.Round(TKLCK_SauCC, 4);
                        }

                    }
                    if (disKTHH)
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                        disKTHH = false;
                    }
                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    break;
                case "VII.Gia công, lắp dựng cốt thép hố ga":
                    if (disKTHH)
                    {
                        Input.KTHH_D = 0;
                        Input.KTHH_R = 0;
                        Input.KTHH_C = 0;
                        disKTHH = false;
                    }
                    if (!string.IsNullOrEmpty(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai))
                    {
                        disInput = true;
                        disTenCongTac = true;
                        selectTenCongTac = await TKThepHoGaRepository.GetDistinctTenCongTacByPL(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
                        selectTenCongTac.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
                    }
                    else
                    {
                        if (disInput) { Input.KLKP_KL = 0; }
                        disTenCongTac = false;
                    }
                    Input.KTHH_KL1CK = PKKLCTietHoGaRepository.KTHH_KL1CK(Input);
                    Input.TTCDT_KL = PKKLCTietHoGaRepository.TTCDT_KL(Input);
                    Input.KL1CK_ChuaTruCC = PKKLCTietHoGaRepository.KL1CK_ChuaTruCC(Input);
                    Input.TKLCK_SauCC = await PKKLCTietHoGaRepository.TKLCK_SauCC(Input);

                    break;
                default:
                    disTenCongTac = false;
                    disKTHH = false;
                    break;
            }
        } else
        {
            disKTHH = false;
            ToastService.ShowToast(
                      "Thông báo",
                       "Vui lòng chọn loại cấu kiện!",
                       cssClass: "toast-danger",
                       iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 5000);
        }

        isLoadingCaculate = false; 
        await InvokeAsync(() =>{StateHasChanged();});
    }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
        isInsert = false;
        plHoGaModel = new();
        // Đặt trạng thái chọn cho các danh sách
        SetSelectedItem(selectLCK, Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
        SetSelectedItem(selectLBT, Input.LoaiBeTong);
        SetSelectedItem(selectHMTC, Input.HangMuc);
        SetSelectedItem(selectGhiChu ,Input.KTHH_GhiChu);
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        isEdit = false;
        Input = new();
        isInsert = false;
        insertFlagItem = new();
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        isEdit = false;

        Input = new();
        isInsert = false;
        insertFlagItem = new();
    }

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        try
        {

            await LoadData();
            await LoadDataPLHG();
            PhanLoaiHoGaModel plhg = new();
            listPLHGModelS = await PhanLoaiHoGaRepository.GetBaoCaoKTHHHGa(plhg);
            listDanhMuc = await DanhMucRepository.GetAll(groupId);


            foreach (var item in listPLHGModelS)
            {
                if (!selectSearchLCK.Any(x => x.Value == item.ThongTinChungHoGa_TenHoGaSauPhanLoai))
                {
                    if (!string.IsNullOrEmpty(item.Id))
                    {
                        // Nếu chưa tồn tại, thêm item vào danh sách
                        selectSearchLCK.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = item.ThongTinChungHoGa_TenHoGaSauPhanLoai??""
                            });
                    }
                }
            }

            foreach (var item in listDanhMuc)
            {
                // Kiểm tra xem item đã tồn tại trong danh sách hay chưa
                if (!selectHTHG.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "HG_HTHGa")
                {
                    if (!string.IsNullOrEmpty(item.Id))
                    {
                        // Nếu chưa tồn tại, thêm item vào danh sách
                        selectHTHG.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = item.Ten
                            });
                    }
                }
                if (!selectKCMM.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "HG_LMMHoGa")
                {
                    if (!string.IsNullOrEmpty(item.Id))
                    {
                        // Nếu chưa tồn tại, thêm item vào danh sách
                        selectKCMM.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = item.Ten
                            });
                    }
                }
                if (!selectKCT.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "HG_LTHoGa")
                {
                    if (!string.IsNullOrEmpty(item.Id))
                    {
                        // Nếu chưa tồn tại, thêm item vào danh sách
                        selectKCT.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = item.Ten
                            });
                    }
                }
                if (!selectHTMHG.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "HG_HTMHoGa")
                {
                    if (!string.IsNullOrEmpty(item.Id))
                    {
                        // Nếu chưa tồn tại, thêm item vào danh sách
                        selectHTMHG.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = item.Ten
                            });
                    }
                }
                if (!selectKCM.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "HG_LMHoGa")
                {
                    if (!string.IsNullOrEmpty(item.Id))
                    {
                        // Nếu chưa tồn tại, thêm item vào danh sách
                        selectKCM.Add(new SelectedItem
                            {
                                Value = item.Id,
                                Text = item.Ten
                            });
                    }
                }
            }
            // Thêm phần tử mặc định "chọn..."
            selectHTHG.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectKCMM.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectKCT.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectHTMHG.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectKCM.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
            selectSearchLCK.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            tKThepHoGaModel = new();
            var repository = await PKKLCTietHoGaRepository.GetAllByVM(InputMD);
            listModel = repository;
            listPKKLCTietHoGaModel = Paging(listModel);

        }
        catch (Exception)
        {

            throw;
        }
        isLoading = false;
    }

    public async Task Search()
    {
        tKThepHoGaModel.PageNumber = 1;
        await LoadData();

    }

    private async Task HandleInValidSubmit()
    {
        await JSRuntime.InvokeVoidAsync("scrollToFirstError");
    }

    private async Task HandleValidSubmit()
    {
        try
        { 
            await Caculate();
            string[] ids = { Input.ThongTinChungHoGa_TenHoGaSauPhanLoai ?? "" };
            var isValidTenPL = await PhanLoaiHoGaRepository.CheckExclusiveDetails(ids, baseTime);
            var listExist = await PKKLCTietHoGaRepository.GetExist(Input);
            if (isValidTenPL)
            {
                if (isEdit)
                {
                    string[] idss = { Input.Id };

                    if (listExist == null || listExist.Count == 0)
                    {
                        bool isValid = await PKKLCTietHoGaRepository.CheckExclusive(idss, baseTime);
                        if (isValid)
                        {
                            await PKKLCTietHoGaRepository.Update(Input,userId);
                            isModalVisible = false;
                            Input = new PKKLCTietHoGa();
                            isEdit = false;
                            ToastService.ShowToast(
                                "Thông báo",
                                "Cập nhật thành công.",
                                cssClass: "toast-success",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            await LoadData();
                        }
                    }
                    else if (listExist.Count > 0 && listExist[0].Id == Input.Id)
                    {
                        await PKKLCTietHoGaRepository.Update(Input, userId);
                        isModalVisible = false;
                        Input = new PKKLCTietHoGa();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            cssClass: "toast-success",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    }
                    else
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                         "Đã tồn tại.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                    }

                }
                else
                {
                    if (listExist == null || listExist.Count == 0)
                    {
                        if (insertFlagItem.Flag > 0)
                        {
                            // Thêm mới thông tin
                            var id = await PKKLCTietHoGaRepository.InsertLaterFlag(Input, insertFlagItem.Flag, insertBefore);
                            isModalVisible = false;
                            // Input = new PKKLCTietHoGa();

                            ToastService.ShowToast(
                                "Thông báo",
                                "Chèn thành công.",
                                cssClass: "toast-success",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            await LoadData();
                            insertFlagItem = new();
                        }
                        else
                        {
                            // Thêm mới thông tin
                            await PKKLCTietHoGaRepository.Insert(Input, userId);
                            //isModalVisible = false;
                            //Input = new PKKLCTietHoGa();

                            ToastService.ShowToast(
                                "Thông báo",
                                "Thêm thành công.",
                                cssClass: "toast-success",
                                iconClass: "fa fa-check-circle",
                                progressBarClass: "bg-info",
                                duration: 5000
                            );
                            await LoadData();
                        }
                    }
                    else
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                         "Đã tồn tại.",
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000);
                    }

                }
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    string[] ids = { deleteId };
                    var result = await PKKLCTietHoGaRepository.CheckExclusive(ids, baseTime);
                    if (result)
                    {
                        // Thực hiện hành động xóa
                        await PKKLCTietHoGaRepository.DeleteById(deleteId,userId);
                        ToastService.ShowToast("Thông báo", "Xóa phân loại thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await LoadData();
                    }

                    deleteId = "";
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                 "Thông báo",
                ex.Message,
                 cssClass: "toast-danger",
               iconClass: "fa fa-exclamation-circle",
                 progressBarClass: "bg-info",
                 duration: 5000
             );

        }
    }

    private async Task HandleEdit(string id)
    {
        //     new SelectedItem { Value = "I.Móng hố ga, hố ga", Text = "I.Móng hố ga, hố ga " },
        // new SelectedItem { Value = "II.Hố ga lắp đặt, hố ga", Text = "II.Hố ga lắp đặt, hố ga  " },
        // new SelectedItem { Value = "III.1 Tường hố ga xây gạch", Text = "III.1 Tường hố ga xây gạch " },
        // new SelectedItem { Value = "III.2 Chát tường hố ga xây gạch", Text = "III.2 Chát tường hố ga xây gạch " },
        // new SelectedItem { Value = "IV.1 Tường hố ga bê tông", Text = "IV.1 Tường hố ga bê tông " },
        // new SelectedItem { Value = "IV.2 Ván khuân tường hố ga bê tông", Text = "IV.2 Ván khuân tường hố ga bê tông " },
        // new SelectedItem { Value = "V.Mũ mố hố ga, hố ga", Text = "V.Mũ mố hố ga, hố ga " },
        // new SelectedItem { Value = "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga", Text = "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga " },
        // new SelectedItem { Value = "VII.Gia công, lắp dựng cốt thép hố ga", Text = "VII.Gia công, lắp dựng cốt thép hố ga " },
        try
        {
            plHoGaModel = new();
            // Thiết lập trạng thái ban đầu
            TitleModal = "Cập nhật PKKL Chi tiết 1 cấu kiện!";
            Input = await PKKLCTietHoGaRepository.GetById(id);
            plHoGaModel = await PhanLoaiHoGaRepository.GetIdByVMDetails(new PhanLoaiHoGaModel { Id = Input.ThongTinChungHoGa_TenHoGaSauPhanLoai });
            isEdit = true;
            isModalVisible = true;

            // Đặt trạng thái chọn cho các danh sách
            SetSelectedItem(selectLCK, Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
            SetSelectedItem(selectLBT, Input.LoaiBeTong);
            SetSelectedItem(selectHMTC, Input.HangMuc);
            SetSelectedItem(selectGhiChu, Input.KTHH_GhiChu);

            // Xử lý từng trường hợp của HangMuc
            switch (Input.HangMuc)
            {
                case "I.Móng hố ga, hố ga":
                    disKTHH = true;
                    disTenCongTac = false;
                    break;

                case "II.Hố ga lắp đặt, hố ga":
                    disKTHH = false;
                    disInput = ShouldDisableInput(Input, "Vận chuyển từ bãi đúc đến công trường");
                    disTenCongTac = false;
                    break;

                case "III.1 Tường hố ga xây gạch":
                    disKTHH = true;
                    disTenCongTac = false;
                    break;
                case "III.2 Chát tường hố ga xây gạch":
                    disKTHH = true;
                    disTenCongTac = false;
                    break;
                case "IV.1 Tường hố ga bê tông":
                    disKTHH = true;
                    disTenCongTac = false;
                    break;
                case "IV.2 Ván khuân tường hố ga bê tông":
                    disKTHH = true;
                    disTenCongTac = false;
                    break;
                case "V.Mũ mố hố ga, hố ga":
                    disKTHH = true;
                    disTenCongTac = false;
                    break;
                case "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga":
                    disKTHH = false;
                    disTenCongTac = false;
                    break;
                case "VII.Gia công, lắp dựng cốt thép hố ga":
                    disKTHH = false;
                    if (!string.IsNullOrEmpty(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai))
                    {
                        disInput = true;
                        disTenCongTac = true;
                        selectTenCongTac = await GetTenCongTacAsync(Input.ThongTinChungHoGa_TenHoGaSauPhanLoai, Input.TenCongTac);
                    }
                    else
                    {
                        disTenCongTac = false;
                    }
                    break;

                default:
                    break;
            }
        }
        catch (Exception ex)
        {
            ShowErrorToast(ex.Message);
        }
    }

    private void SetSelectedItem(IEnumerable<SelectedItem> items, string value)
    {
        foreach (var item in items)
        {
            item.IsSelected = item.Value == value;
        }
    }

    private bool ShouldDisableKTHH(PKKLCTietHoGa input, string condition)
    {
        return !string.IsNullOrEmpty(input.ThongTinChungHoGa_TenHoGaSauPhanLoai) &&
               input.HangMucCongTac.ToUpper().Trim() == condition.ToUpper().Trim();
    }

    private bool ShouldDisableInput(PKKLCTietHoGa input, string condition)
    {
        return !string.IsNullOrEmpty(input.ThongTinChungHoGa_TenHoGaSauPhanLoai) &&
               input.HangMucCongTac.ToUpper().Trim() == condition.ToUpper().Trim();
    }

    private async Task<List<SelectedItem>> GetTenCongTacAsync(string phanloai, string tenCongTac)
    {
        var result = await TKThepHoGaRepository.GetDistinctTenCongTacByPL(phanloai);
        result.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        foreach (var item in result)
        {
            item.IsSelected = item.Text.Trim() == tenCongTac.Trim();
        }
        return result;
    }

    private void ShowErrorToast(string message)
    {
        ToastService.ShowToast(
            "Thông báo",
            message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 5000
        );
    }

    bool isInsert  = false;
    bool insertBefore = false;
    PKKLCTietHoGaModel insertFlagItem = new();
    //thêm vào sau
    private async Task InsertLaterFlag(PKKLCTietHoGaModel inputMD, bool position)
    {
        TitleModal = "Chèn chi tiết 1 hố ga !";
        var plgh_id = await PhanLoaiHoGaRepository.GetByIdDetails(inputMD.LoaiCauKienId);
        plHoGaModel = listPLHGModelS.Where(x => x.Id == inputMD.LoaiCauKienId).FirstOrDefault()??new();
        Input = new();
        disKTHH = false;
        disTenCongTac = false;
        isInsert = true;

        Input.ThongTinChungHoGa_TenHoGaSauPhanLoai = plHoGaModel.Id;
        Input.ThongTinChungHoGa_HinhThucHoGa = plHoGaModel.ThongTinChungHoGa_HinhThucHoGa ?? "";
        Input.ThongTinChungHoGa_KetCauMuMo = plHoGaModel.ThongTinChungHoGa_KetCauMuMo ?? "";
        Input.HangMuc = inputMD.HangMuc;
        insertFlagItem = inputMD;
        insertBefore = position;

        isModalVisible = true;
        // Đặt trạng thái chọn cho các danh sách
        SetSelectedItem(selectLCK, Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
        SetSelectedItem(selectLBT, Input.LoaiBeTong);
        SetSelectedItem(selectHMTC, Input.HangMuc);
        await Caculate();
    }


    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        tKThepHoGaModel.PageNumber = 1;
        Paging(listModel);
    }


    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        tKThepHoGaModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {
        tKThepHoGaModel.PageNumber = 1;
        tKThepHoGaModel.pageSize = pageSize;
        Paging(listModel);
    }


    // Xử lý paging
    private List<PKKLCTietHoGaModel> Paging(List<PKKLCTietHoGaModel> listModels)
    {
        // Đếm số bản ghi thỏa mãn
        var count = listModels.Count();

        // Lọc bản ghi theo page hiện tại và page size
        listModels = listModels.Skip((tKThepHoGaModel.PageNumber - 1) * tKThepHoGaModel.PageSize).Take(tKThepHoGaModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listPKKLCTietHoGaModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var major in listModels)
        {
            listPKKLCTietHoGaModel.Add(major);
        }

        // Tạo pagelist mới

        var pagelist = new PageList<PKKLCTietHoGaModel>(listPKKLCTietHoGaModel, count, tKThepHoGaModel.PageNumber, tKThepHoGaModel.PageSize);
        MetaData = pagelist.MetaData;
        return listModels;
    }

    //search
    public List<PhanLoaiHoGaModel> listPLHGModelS { get; set; } = new();
    public List<PhanLoaiHoGaModel> listModelS { get; set; } = new();
    public MetaData MetaDataS { get; set; }
    public PhanLoaiHoGaModel dmModelS { get; set; }
    public async Task SearchS()
    {
        dmModelS.PageNumber = 1;
        await LoadDataPLHG();
    }
    private async Task LoadDataPLHG()
    {
        try
        {
            dmModelS = new();
            var plhg = await PhanLoaiHoGaRepository.GetBaoCaoKTHHHGa(InputMDS);
            listModelS = plhg;
            listPLHGModelS = PagingS(plhg);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi load data" + ex.Message);
            throw;
        }

    }
    private void ShowModalS()
    {
        isModalVisibleS = true;
        isModalVisible = !isModalVisible;
        Input = new();
        // Đặt trạng thái chọn cho các danh sách
        SetSelectedItem(selectLCK, Input.ThongTinChungHoGa_TenHoGaSauPhanLoai);
        SetSelectedItem(selectLBT, Input.LoaiBeTong);
        SetSelectedItem(selectHMTC, Input.HangMuc);
    }
    private void HandleModalCloseS(bool isVisible)
    {
        isModalVisibleS = isVisible;
        isModalVisible = !isModalVisible;
    }
    private async Task HandleChooseId(PhanLoaiHoGaModel item)
    {
        try
        {
            isModalVisible = !isModalVisible;
            //kiểm tra xem Id có tồn tại hay không.
            var plgh_id = await PhanLoaiHoGaRepository.GetByIdDetails(item.Id);
            plHoGaModel = item;
            Input = new();
            disKTHH =false;
            disTenCongTac = false;
            Input.ThongTinChungHoGa_TenHoGaSauPhanLoai = item.Id;
            InputMD.LoaiCauKien = item.ThongTinChungHoGa_TenHoGaSauPhanLoai??"";
            Input.ThongTinChungHoGa_HinhThucHoGa = item.ThongTinChungHoGa_HinhThucHoGa??"";
            Input.ThongTinChungHoGa_KetCauMuMo = item.ThongTinChungHoGa_KetCauMuMo ?? "";
            isModalVisibleS = false;

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                       "Thông báo",
                        ex.Message,
                        cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000);
        }

    }
    private void SortTableS(string columnName)
    {
        listModelS = SortService.SortTable(listModelS, columnName);
        dmModelS.PageNumber = 1;
        PagingS(listModelS);
    }
    private void SelectedPageS(int page)
    {
        dmModelS.PageNumber = page;
        PagingS(listModelS);
    }
    private void ChangePageSizeS(int pageSize)
    {
        dmModelS.PageNumber = 1;
        dmModelS.pageSize = pageSize;
        PagingS(listModelS);
    }
    private List<PhanLoaiHoGaModel> PagingS(List<PhanLoaiHoGaModel> plhgs)
    {
        var count = plhgs.Count();
        plhgs = plhgs.Skip((dmModelS.PageNumber - 1) * dmModelS.PageSize).Take(dmModelS.PageSize).ToList();
        listPLHGModelS.Clear();

        foreach (var item in plhgs)
        {
            listPLHGModelS.Add(item);
        }
        var pagelist = new PageList<PhanLoaiHoGaModel>(listPLHGModelS, count, dmModelS.PageNumber, dmModelS.PageSize);
        MetaDataS = pagelist.MetaData;
        return plhgs;
    }
    //end search

    private void ThumbtackHeader()
    {
        thumbtack = thumbtack == "flex-header" ? "" : "flex-header";
    }

    public static string getChiMuc(string DK)
    {
        string ChiMuc = "I";
        switch (DK)
        {
            case "I.Móng hố ga, hố ga":
                ChiMuc = "I";
                break;
            case "II.Hố ga lắp đặt, hố ga":
                ChiMuc = "II";
                break;
            case "III.1 Tường hố ga xây gạch":
                ChiMuc = "III.1";
                break;
            case "III.2 Chát tường hố ga xây gạch":
                ChiMuc = "III.";
                break;
            case "IV.1 Tường hố ga bê tông":
                ChiMuc = "IV.1";
                break;
            case "IV.2 Ván khuân tường hố ga bê tông":
                ChiMuc = "IV.2";
                break;
            case "V.Mũ mố hố ga, hố ga":
                ChiMuc = "V";
                break;
            case "VI.Sản xuất + V.Chuyển B.Tông T.Phẩm hố ga":
                ChiMuc = "VI";
                break;
            case "VII.Gia công, lắp dựng cốt thép hố ga":
                ChiMuc = "VII";
                break;
        }
        return ChiMuc;
    }

    private async Task ExportExcel()
    {
        var newList = listModel
        .GroupBy(item => item.LoaiCauKienId) // Nhóm theo LoaiCauKienId
        .SelectMany(group => group
            .GroupBy(item => item.HangMuc) // Trong mỗi nhóm LoaiCauKienId, nhóm tiếp theo HangMuc
            .SelectMany(groupChild => groupChild
                .OrderBy(item => item.Flag) // Sắp xếp các phần tử trong nhóm con theo Flag
                .Select((item, index) =>
                {
                    return item; // Trả về đối tượng ban đầu
                })
            )
        )
        .ToList();

        var sheetInfo = new SheetInfo1<object>
            {
                SheetName = "2.14 PKKL C.Tiết 01 H.Ga",
                Tables = new List<TableInfo<object>>
                {
                    new TableInfo<object>
                    {
                        Headers = ConstantHeaderExcel.PKKLCT1HG_HEADERS.Cast<ComplexHeader>().ToList(),
                        Data = newList
                    },
                }
            };

        // Xuất Excel
        var rowSpace = new RowSpace{
                DataProperty = "LoaiCauKien", // Thuộc tính cần kiểm tra
                BackgroundColor = System.Drawing.Color.LightGray, // Màu nền của hàng trống
                Children = new List<RowSpace>
                {
                    new RowSpace
                    {
                        DataProperty = "HangMuc",
                        BackgroundColor = System.Drawing.Color.LightGreen
                    },
                }
            };
        byte[] excelBytes = ExportExcelService.ExportToExcelWithMultipleTables(new List<SheetInfo1<object>> { sheetInfo }, rowSpace);
        var fileName = "PKKLChiTiet01HGa.xlsx";
        using var stream = new MemoryStream(excelBytes);
        using var streamRef = new DotNetStreamReference(stream);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
