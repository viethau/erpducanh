@page "/NghiepVuCongTrinh/PhanLoaiCong"

<div class="m-4">
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" id="editFormId" OnInvalidSubmit="HandleInValidSubmit" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai">Tên loại truyền dẫn sau phân loại<span class="text-danger">*</span></label>
                        <InputText @bind-Value="Input.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai" class="form-control" id="ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai" placeholder="Tên loại truyền dẫn sau phân loại" />
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_HinhThucTruyenDan">Hình thức truyền dẫn <span class="text-danger">*</span></label>
                        <select  id="ThongTinDuongTruyenDan_HinhThucTruyenDan" class="form-control" @bind="Input.ThongTinDuongTruyenDan_HinhThucTruyenDan">
                            <option value="">Hình thức truyền dẫn ...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_HTTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_HinhThucTruyenDan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_LoaiTruyenDan">Loại truyền dẫn <span class="text-danger">*</span></label>
                        <select  id="ThongTinDuongTruyenDan_LoaiTruyenDan" class="form-control" @bind="Input.ThongTinDuongTruyenDan_LoaiTruyenDan">
                            <option value="">Loại truyền dẫn...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_LTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_HinhThucTruyenDan" class="text-danger" />
                    </div>
                    
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien">C.Dài C.Kiện (C.Tròn, C.Hộp) <span class="text-danger">*</span></label>
                        <InputNumber  @bind-Value="Input.TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien" class="form-control" id="TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien" placeholder="C.Dài C.Kiện (C.Tròn, C.Hộp)" />
                        <ValidationMessage For="() => Input.TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinCauTaoCongTron_CDayPhuBi">C.Dầy phủ bì (m) <span class="text-danger">*</span></label>
                        <InputNumber  @bind-Value="Input.ThongTinCauTaoCongTron_CDayPhuBi" class="form-control" id="ThongTinCauTaoCongTron_CDayPhuBi" placeholder="C.Dầy phủ bì (m)" />
                        <ValidationMessage For="() => Input.ThongTinCauTaoCongTron_CDayPhuBi" class="text-danger" />
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <h4 class="mt-2 "> Thông tin kích thước hình học cống hộp, rãnh</h4>
                        <hr />
                        <h5> Thông tin chung</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CauTaoTuong">Cấu tạo tường<span class="text-danger"></span></label>
                                <select  id="TTKTHHCongHopRanh_CauTaoTuong" class="form-control" @bind="Input.TTKTHHCongHopRanh_CauTaoTuong">
                                    <option value="">Cấu tạo tường...</option>
                                    @foreach (var dm in FindByIdNhomDanhMuc("TD_LDanhTuong"))
                                    {
                                        <option value="@dm.Id">@dm.Ten</option>
                                    }
                                </select>
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CauTaoTuong" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CauTaoMuMo">Cấu tạo mũ mố<span class="text-danger"></span></label>
                                <select  id="TTKTHHCongHopRanh_CauTaoMuMo" class="form-control" @bind="Input.TTKTHHCongHopRanh_CauTaoMuMo">
                                    <option value="">Cấu tạo mũ mố...</option>
                                    @foreach (var dm in FindByIdNhomDanhMuc("TD_LMMCongRanh"))
                                    {
                                        <option value="@dm.Id">@dm.Ten</option>
                                    }
                                </select>
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CauTaoMuMo" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_ChatMatTrong">Chát mặt trong<span class="text-danger"></span></label>
                                <select  id="TTKTHHCongHopRanh_ChatMatTrong" class="form-control" @bind="Input.TTKTHHCongHopRanh_ChatMatTrong">
                                    <option value="">Chát mặt trong...</option>
                                    @foreach (var dm in FindByIdNhomDanhMuc("DM_CoKhong"))
                                    {
                                        <option value="@dm.Id">@dm.Ten</option>
                                    }
                                </select>
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_ChatMatTrong" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_ChatMatNgoai">Chát mặt ngoài<span class="text-danger"></span></label>
                                <select  id="TTKTHHCongHopRanh_ChatMatNgoai" class="form-control" @bind="Input.TTKTHHCongHopRanh_ChatMatNgoai">
                                    <option value="">Chát mặt ngoài...</option>
                                    @foreach (var dm in FindByIdNhomDanhMuc("DM_CoKhong"))
                                    {
                                        <option value="@dm.Id">@dm.Ten</option>
                                    }
                                </select>
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_ChatMatNgoai" class="text-danger" />
                            </div>
                        </div>

                        <h5> Đế</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CCaoDe">C.Cao đế(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CCaoDe" class="form-control" id="TTKTHHCongHopRanh_CCaoDe" placeholder="C.Cao đế" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CCaoDe" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CRongDe">C.Rộng đế(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CRongDe" class="form-control" id="TTKTHHCongHopRanh_CRongDe" placeholder="C.Rộng đế" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CRongDe" class="text-danger" />
                            </div>
                        </div>
                        <h5>Thân</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CDayTuong01Ben">C.Dầy tường 01 bên (m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CDayTuong01Ben" class="form-control" id="TTKTHHCongHopRanh_CDayTuong01Ben" placeholder="C.Dầy tường 01 bên" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CDayTuong01Ben" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_SoLuongTuong">Số lượng tường(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_SoLuongTuong" class="form-control" id="TTKTHHCongHopRanh_SoLuongTuong" placeholder="Số lượng tường" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_SoLuongTuong" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CRongLongSuDung">C.Rộng lòng sử dụng(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CRongLongSuDung" class="form-control" id="TTKTHHCongHopRanh_CRongLongSuDung" placeholder="C.Rộng lòng sử dụng" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CRongLongSuDung" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CCaoTuongGop">C.Cao tường gộp(m)</label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CCaoTuongGop" class="form-control" id="TTKTHHCongHopRanh_CCaoTuongGop" placeholder="C.Cao tường gộp" />

                            </div>
                        </div>
                        <h5>Mũ mố</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CCaoMuMoThotDuoi">C.Cao mũ mố thớt dưới(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CCaoMuMoThotDuoi" class="form-control" id="TTKTHHCongHopRanh_CCaoMuMoThotDuoi" placeholder="C.Cao mũ mố thớt dưới" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CCaoMuMoThotDuoi" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CRongMuMoDuoi">C.Rộng mũ mố dưới(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CRongMuMoDuoi" class="form-control" id="TTKTHHCongHopRanh_CRongMuMoDuoi" placeholder="C.Rộng mũ mố dưới" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CRongMuMoDuoi" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CCaoMuMoThotTren">C.Cao mũ mố thớt trên (m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CCaoMuMoThotTren" class="form-control" id="TTKTHHCongHopRanh_CCaoMuMoThotTren" placeholder="C.Cao mũ mố thớt trên" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CCaoMuMoThotTren" class="text-danger" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CRongMuMoTren">C.Rộng mũ mố trên(m)<span class="text-danger">*</span></label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CRongMuMoTren" class="form-control" id="TTKTHHCongHopRanh_CRongMuMoTren" placeholder="C.Rộng mũ mố trên" />
                                <ValidationMessage For="() => Input.TTKTHHCongHopRanh_CRongMuMoTren" class="text-danger" />
                            </div>
                        </div>

                        <h5>Chát</h5>
                        <div class="row">
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CCaoChatMatTrong">C.Cao chát mặt trong (m)</label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CCaoChatMatTrong" class="form-control" id="TTKTHHCongHopRanh_CCaoChatMatTrong" placeholder="C.Cao chát mặt trong (m)" />
                            </div>
                            <div class="form-floating col-sm-6 col-md-3">
                                <label for="TTKTHHCongHopRanh_CCaoChatMatNgoai">C.Cao chát mặt ngoài (m</label>
                                <InputNumber  @bind-Value="Input.TTKTHHCongHopRanh_CCaoChatMatNgoai" class="form-control" id="TTKTHHCongHopRanh_CCaoChatMatNgoai" placeholder="C.Cao chát mặt ngoài (m" />
                            </div>

                        </div>
                    </div>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
               <button class="btn btn-primary mr-2" type="submit" form="editFormId">Save</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </div>
        </FooterTemplate>
    </CustomModal>
    <EditForm Model="InputMD" FormName="Search" OnValidSubmit="@Search">
        <DataAnnotationsValidator />
        <div class="row ">
            <!-- Select for nhóm danh mục-->
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Hình thức truyền dẫn</label>
                <Select2 Id="mySelect1" Items="@selectHTTD" OnChange="@OnSelectChangeHTTD"></Select2>
                <ValidationMessage For="()=>InputMD.ThongTinDuongTruyenDan_HinhThucTruyenDan"></ValidationMessage>
            </div>
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Loại truyền dẫn</label>
                <Select2 Id="mySelect2" Items="@selectLTD" OnChange="@OnSelectChangeLTD"></Select2>
                <ValidationMessage For="()=>InputMD.ThongTinDuongTruyenDan_LoaiTruyenDan"></ValidationMessage>
            </div>
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Cấu tạo tường</label>
                <Select2 Id="mySelect3" Items="@selectCTT" OnChange="@OnSelectChangeCTT"></Select2>
                <ValidationMessage For="()=>InputMD.TTKTHHCongHopRanh_CauTaoTuong"></ValidationMessage>
            </div>
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Cấu tạo mũ mố</label>
                <Select2 Id="mySelect4" Items="@selectCTMM" OnChange="@OnSelectChangeCTMM"></Select2>
                <ValidationMessage For="()=>InputMD.TTKTHHCongHopRanh_CauTaoMuMo"></ValidationMessage>
            </div>
            <!-- Search Button -->
            <div class="col-sm-4 col-md-1 mb-1">
                <label>&nbsp;</label>
                <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
            </div>
            <div class="col-sm-4 col-md-1 mb-1">
                <label>&nbsp;</label>
                <button type="button" @onclick="ShowModal" class="btn btn-info w-100">Tạo mới</button>
            </div>
        </div>
    </EditForm>


    <h5 class="mt-2">Danh sách phân loại cống </h5>
 
    <div class="row mt-3 our-table">
        <table class="table table-hover table-bordered">
            <thead class="bg-info">
                <tr>
                    <th rowspan="2"></th>
                    <th rowspan="2">STT</th>

                    <th onclick="@(() => SortTable("ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai"))" class="text-center sortable align-middle" rowspan="2">
                        <div class="mr-3">
                            Loại truyền dẫn sau phân loại
                            <span class="arrow @(GetSortStyle("ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinDuongTruyenDan_HinhThucTruyenDan_Name"))" class="text-center sortable align-middle" rowspan="2">
                        <div class="mr-3">
                            Hình thức truyền dẫn
                            <span class="arrow @(GetSortStyle("ThongTinDuongTruyenDan_HinhThucTruyenDan_Name"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinDuongTruyenDan_LoaiTruyenDan_Name"))" class="text-center sortable align-middle" rowspan="2">
                        <div class="mr-3">
                            Loại truyền dẫn
                            <span class="arrow @(GetSortStyle("ThongTinDuongTruyenDan_LoaiTruyenDan_Name"))"></span>
                        </div>
                    </th>

                    <th onclick="@(() => SortTable("TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien"))" class="text-center sortable align-middle" rowspan="2">
                        <div class="mr-3">
                            C.Dài C.Kiện (C.Tròn, C.Hộp
                            <span class="arrow @(GetSortStyle("TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinCauTaoCongTron_CDayPhuBi"))" class="text-center sortable align-middle" rowspan="2">
                        <div class="mr-3">
                            C.Dầy phủ bì cống tròn (m)
                            <span class="arrow @(GetSortStyle("ThongTinCauTaoCongTron_CDayPhuBi"))"></span>
                        </div>
                    </th>
                    <th class="text-center" colspan="4">Thông tin chung</th>
                    <th class="text-center" colspan="2">Đế</th>
                    <th class="text-center" colspan="4">Thân</th>
                    <th class="text-center" colspan="4">Mũ mố</th>
                    <th class="text-center" colspan="2">Chát</th>
                    <th class="text-center  align-middle" rowspan="2">C.Dầy phủ bì ống nhựa (m) </th>
                </tr>
                <tr>
                    <th> Cấu tạo tường</th>
                    <th> Cấu tạo mũ mố</th>
                    <th> Chát mặt trong</th>
                    <th> Chát mặt ngoài</th>
                    <th> C.Cao đế (m)</th>
                    <th> C.Rộng đế (m)</th>
                    <th> C.Dầy tường 01 bên (m)</th>
                    <th> Số lượng tường (m)</th>
                    <th> C.Rộng lòng sử dụng (m)</th>
                    <th> C.Cao tường gộp</th>
                    <th> C.Cao mũ mố thớt dưới (m)</th>
                    <th> C.Rộng mũ mố dưới</th>
                    <th> C.Cao mũ mố thớt trên (m)</th>
                    <th> C.Rộng mũ mố trên</th>
                    <th> C.Cao chát mặt trong (m)</th>
                    <th> C.Cao chát mặt ngoài (m) </th>
                   
                </tr>
            </thead>
            @if (listPLCTronHopNhuaModel.Any())
            {
                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var item in listPLCTronHopNhuaModel)
                    {
                        <tr>
                            <td class="d-flex nowrap">
                                <div class="d-inline-block">
                                    
                                    <button class="btn btn-sm btn-primary m-1" title="Thêm vào sau" @onclick="()=>InsertLaterFlag(item.Flag)">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                    @{
                                        if (item.IsEdit == 0)
                                        {
                                            <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai )">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        }
                                     }
                                </div>
                            </td>
                            <td class="text-center">@stt</td>
                            <td>@item.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai </td>
                            <td>@item.ThongTinDuongTruyenDan_HinhThucTruyenDan_Name </td>
                            <td>@item.ThongTinDuongTruyenDan_LoaiTruyenDan_Name</td>
                            <td>@item.TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien</td>
                            <td>@item.ThongTinCauTaoCongTron_CDayPhuBi</td>
                            <td>@item.TTKTHHCongHopRanh_CauTaoTuong_Name</td>
                            <td>@item.TTKTHHCongHopRanh_CauTaoMuMo_Name </td>
                            <td>@item.TTKTHHCongHopRanh_ChatMatTrong_Name </td>
                            <td>@item.TTKTHHCongHopRanh_ChatMatNgoai_Name</td>
                            <td>@item.TTKTHHCongHopRanh_CCaoDe </td>
                            <td>@item.TTKTHHCongHopRanh_CRongDe </td>
                            <td>@item.TTKTHHCongHopRanh_CDayTuong01Ben</td>
                            <td>@item.TTKTHHCongHopRanh_SoLuongTuong </td>
                            <td>@item.TTKTHHCongHopRanh_CRongLongSuDung </td>
                            <td>@item.TTKTHHCongHopRanh_CCaoTuongGop</td>
                            <td>@item.TTKTHHCongHopRanh_CCaoMuMoThotDuoi </td>
                            <td>@item.TTKTHHCongHopRanh_CRongMuMoDuoi</td>
                            <td>@item.TTKTHHCongHopRanh_CCaoMuMoThotTren</td>
                            <td>@item.TTKTHHCongHopRanh_CRongMuMoTren </td>
                            <td>@item.TTKTHHCongHopRanh_CCaoChatMatTrong </td>
                            <td>@item.TTKTHHCongHopRanh_CCaoChatMatNgoai </td>
                            <td>@item.ThongTinKichThuocHinhHocOngNhua_CDayPhuBi</td>

                        </tr>
                        stt++;
                    }

                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        <td colspan="24"> Không có dữ liệu</td>
                    </tr>
                </tbody>
            }

        </table>
    </div>

    @if (listPLCTronHopNhuaModel.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>

@code {
    private List<PhanLoaiCTronHopNhua> listPhanLoaiCTronHopNhua = new List<PhanLoaiCTronHopNhua>();
    private PhanLoaiCTronHopNhua Input = new();
    private PhanLoaiCTronHopNhuaModel InputMD = new();
    public List<DanhMuc1> listDanhMuc = new();
    private DateTime baseTime;
    private bool isEdit { get; set; } = false;

    private bool isModalVisible = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm loại cống";

    private List<SelectedItem> selectHTTD = new();
    private List<SelectedItem> selectLTD = new();
    private List<SelectedItem> selectCTT = new();
    private List<SelectedItem> selectCTMM = new();

    private void OnSelectChangeHTTD(SelectedItem selectedItem)
    {
        InputMD.ThongTinDuongTruyenDan_HinhThucTruyenDan = selectedItem.Value;
    }
    private void OnSelectChangeLTD(SelectedItem selectedItem)
    {
        InputMD.ThongTinDuongTruyenDan_LoaiTruyenDan = selectedItem.Value;
    }
    private void OnSelectChangeCTT(SelectedItem selectedItem)
    {
        InputMD.TTKTHHCongHopRanh_CauTaoTuong = selectedItem.Value;
    }
    private void OnSelectChangeCTMM(SelectedItem selectedItem)
    {
        InputMD.TTKTHHCongHopRanh_CauTaoMuMo = selectedItem.Value;
    }

    public async Task Search()
    {
        dmModel.PageNumber = 1;
        await LoadData();
    }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
        Flag = 0;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
        isEdit = false;
        Flag = 0;
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }
    public List<PhanLoaiCTronHopNhuaModel> listPLCTronHopNhuaModel { get; set; } = new();
    public List<PhanLoaiCTronHopNhuaModel> listModel{ get;set; } = new();

    public MetaData MetaData {get;set; }
    public PhanLoaiCTronHopNhuaModel dmModel {get;set;}

    public List<DanhMuc1> FindByIdNhomDanhMuc(string idNhomDanhMuc)
    {
        return listDanhMuc.Where(dm => dm.IdNhomDanhMuc == idNhomDanhMuc).ToList();
    }

    public string GetTenDanhMucById(string id)
    {
        var danhMuc = listDanhMuc.FirstOrDefault(dm => dm.Id == id);
        return danhMuc != null ? danhMuc.Ten : null;
    }
    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        baseTime = DateTime.Now;
        await LoadData();
        foreach (var item in listDanhMuc)
        {
            // Kiểm tra xem item đã tồn tại trong danh sách hay chưa
            if (!selectHTTD.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "TD_HTTruyenDan")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectHTTD.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            if (!selectLTD.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "TD_LTruyenDan")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectLTD.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            if (!selectCTT.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "DM_CoKhong")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectCTT.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            selectCTMM = selectCTT;

        }
        // Thêm phần tử mặc định "chọn..."
        selectHTTD.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectLTD.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectCTT.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
    }

    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        isLoading = true;
        dmModel = new();
        listDanhMuc = await DanhMucRepository.GetAll();
        var plhg = await PhanLoaiCTronHopNhuaRepository.GetAllByVM(InputMD);
        listModel = plhg;
        listPLCTronHopNhuaModel = Paging(plhg);
        isLoading = false;
    }

    private async Task HandleInValidSubmit()
    {
        await JSRuntime.InvokeVoidAsync("scrollToFirstError");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            PhanLoaiCTronHopNhua phanLoaiCTronHopNhuaExist = new();
            phanLoaiCTronHopNhuaExist = await PhanLoaiCTronHopNhuaRepository.GetPhanLoaiCTronHopNhuaExist(Input);
            var existName = false;
            existName = await PhanLoaiCTronHopNhuaRepository.CheckUsingName(Input.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai);
            if (isEdit)
            {
                if (phanLoaiCTronHopNhuaExist == null)
                {
                    string[] ids = {Input.Id};
                    bool isValid = await PhanLoaiCTronHopNhuaRepository.CheckExclusive(ids,baseTime);
                    if (isValid)
                    {
                        // cập nhật
                        await PhanLoaiCTronHopNhuaRepository.Update(Input);
                        isModalVisible = false;
                        Input = new PhanLoaiCTronHopNhua();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            cssClass: "toast-success",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    }

                }
                else
                if (phanLoaiCTronHopNhuaExist.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai.ToUpper().Trim() != Input.ThongTinDuongTruyenDan_TenLoaiTruyenDanSauPhanLoai.ToUpper().Trim() && !existName)
                {
                    // cập nhật
                    string[] ids = { Input.Id };
                    bool isValid = await PhanLoaiCTronHopNhuaRepository.CheckExclusive(ids, baseTime);
                    if (isValid)
                    {
                        await PhanLoaiCTronHopNhuaRepository.Update(Input);
                        isModalVisible = false;
                        Input = new PhanLoaiCTronHopNhua();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    }
                }
                else
                {
                    ToastService.ShowToast(
                            "Thông báo",
                            "Tên phân loại đã tồn tại. Vui lòng kiểm tra lại !",
                            cssClass: "toast-danger",
                           iconClass: "fa fa-exclamation-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                }

            }
            else
            if (phanLoaiCTronHopNhuaExist == null)
            {
                if (Flag > 0)
                {
                    // Thêm mới thông tin
                    var id = await PhanLoaiCTronHopNhuaRepository.InsertLaterFlag(Input, Flag);
                    isModalVisible = false;
                    Input = new PhanLoaiCTronHopNhua();
                    ToastService.ShowToast(
                        "Thông báo",
                        "Chèn thành công.",
                        cssClass: "toast-success",
                        iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                    Flag = 0;
                }
                else
                {
                    // Thêm mới thông tin
                    await PhanLoaiCTronHopNhuaRepository.Insert(Input);
                    isModalVisible = false;
                    Input = new PhanLoaiCTronHopNhua();
                    ToastService.ShowToast(
                        "Thông báo",
                        "Thêm thành công.",
                        cssClass: "toast-success",
                       iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                }

            }
            else
            {
                ToastService.ShowToast(
                        "Thông báo",
                        "Phân loại cống đã tồn tại , Vui lòng kiểm tra lại !",
                        cssClass: "toast-danger",
                        iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                         "Thông báo",
                         ex.Message,
                         cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                         progressBarClass: "bg-info",
                         duration: 5000
                     );
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            if (!string.IsNullOrEmpty(deleteId))
            {

                var result = await PhanLoaiCTronHopNhuaRepository.CheckUsingId(deleteId);
                if (result)
                {
                    ToastService.ShowToast("Thông báo", "Không thể xóa phân loại đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                }
                else
                {
                    // Thực hiện hành động xóa
                    await PhanLoaiCTronHopNhuaRepository.DeleteById(deleteId);
                    ToastService.ShowToast("Thông báo", "Xóa phân loại thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await LoadData();
                }

                deleteId = "";
            }
        }
    }


    private async Task HandleEdit(string id)
    {
        try
        {
            var result = await PhanLoaiCTronHopNhuaRepository.CheckUsingId(id);
            if (result)
            {
                ToastService.ShowToast("Thông báo", "Không thể sửa phân loại đang được sử dụng trong DS Nước mua.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
            }
            else
            {
                TitleModal = "Cập nhật loại cống !";
                Input = await PhanLoaiCTronHopNhuaRepository.GetById(id);
                isEdit = true;
                isModalVisible = true;
            }
           
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                       "Thông báo",
                       ex.Message,
                       cssClass: "toast-danger",
                       iconClass: "fa fa-exclamation-circle",
                       progressBarClass: "bg-info",
                       duration: 5000
                   );
        }
       
    }
    int Flag = 0;
    //thêm vào sau
    private void InsertLaterFlag(int flag)
    {
        Flag = flag;
        TitleModal = "Chèn loại cống !";
        isModalVisible = true;
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }
    // Xử lý paging
    private List<PhanLoaiCTronHopNhuaModel> Paging(List<PhanLoaiCTronHopNhuaModel> plhgs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = plhgs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        plhgs = plhgs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listPLCTronHopNhuaModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var item in plhgs)
        {
            listPLCTronHopNhuaModel.Add(item);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<PhanLoaiCTronHopNhuaModel>(listPLCTronHopNhuaModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return plhgs;
    }

}
