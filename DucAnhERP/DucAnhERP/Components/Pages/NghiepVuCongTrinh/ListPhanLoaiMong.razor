@page "/NghiepVuCongTrinh/PhanLoaiMong"


<div class="m-4">
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" id="editFormId" OnInvalidSubmit="HandleInValidSubmit" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop">Tên phân loại móng<span class="text-danger">*</span></label>
                        <InputText @bind-Value="Input.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop" class="form-control" id="ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop" placeholder="Tên phân loại móng" />
                        <ValidationMessage For="() => Input.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_HinhThucTruyenDan">Hình thức truyền dẫn <span class="text-danger">*</span></label>
                        <select   id="ThongTinDuongTruyenDan_HinhThucTruyenDan" class="form-control" @bind="Input.ThongTinDuongTruyenDan_HinhThucTruyenDan">
                            <option value="">Hình thức truyền dẫn ...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_HTTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_HinhThucTruyenDan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_LoaiTruyenDan">Loại truyền dẫn <span class="text-danger">*</span></label>
                        <select   id="ThongTinDuongTruyenDan_LoaiTruyenDan" class="form-control" @bind="Input.ThongTinDuongTruyenDan_LoaiTruyenDan">
                            <option value="">Loại truyền dẫn...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_LTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_LoaiTruyenDan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinMongDuongTruyenDan_LoaiMong">Loại móng <span class="text-danger">*</span></label>
                        <select  id="ThongTinMongDuongTruyenDan_LoaiMong" class="form-control" @bind="Input.ThongTinMongDuongTruyenDan_LoaiMong">
                            <option value="">Loại móng...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_LMTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinMongDuongTruyenDan_LoaiMong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinMongDuongTruyenDan_HinhThucMong">Hình thức móng <span class="text-danger">*</span></label>
                        <select  id="ThongTinMongDuongTruyenDan_HinhThucMong" class="form-control" @bind="Input.ThongTinMongDuongTruyenDan_HinhThucMong">
                            <option value="">Hình thức móng...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_HTMTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinMongDuongTruyenDan_HinhThucMong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinCauTaoCongTron_CCaoLotMong">C.Cao lót móng (m) <span class="text-danger">*</span></label>
                        <InputNumber  @bind-Value="Input.ThongTinCauTaoCongTron_CCaoLotMong" class="form-control" id="ThongTinCauTaoCongTron_CCaoLotMong" placeholder="C.Cao lót móng" />
                        <ValidationMessage For="() => Input.ThongTinCauTaoCongTron_CCaoLotMong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinCauTaoCongTron_CRongLotMong">C.Rộng lót móng (m) <span class="text-danger">*</span></label>
                        <InputNumber  @bind-Value="Input.ThongTinCauTaoCongTron_CRongLotMong" class="form-control" id="ThongTinCauTaoCongTron_CRongLotMong" placeholder="C.Rộng lót móng" />
                        <ValidationMessage For="() => Input.ThongTinCauTaoCongTron_CRongLotMong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinCauTaoCongTron_CCaoMong">C.Cao móng (m) <span class="text-danger">*</span></label>
                        <InputNumber  @bind-Value="Input.ThongTinCauTaoCongTron_CCaoMong" class="form-control" id="ThongTinCauTaoCongTron_CCaoMong" placeholder="C.Cao móng" />
                        <ValidationMessage For="() => Input.ThongTinCauTaoCongTron_CCaoMong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinCauTaoCongTron_CRongMong"> C.Rộng móng (m) <span class="text-danger">*</span></label>
                        <InputNumber  @bind-Value="Input.ThongTinCauTaoCongTron_CRongMong" class="form-control" id="ThongTinCauTaoCongTron_CRongMong" placeholder=" C.Rộng móng" />
                        <ValidationMessage For="() => Input.ThongTinCauTaoCongTron_CRongMong" class="text-danger" />
                    </div>
                </div>
            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                 <button class="btn btn-primary mr-2" type="submit" form="editFormId">Save</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </div>
        </FooterTemplate>
    </CustomModal>

    <EditForm Model="InputMD" FormName="Search" OnValidSubmit="@Search">
        <DataAnnotationsValidator />
        <div class="row ">
            <!-- Select for nhóm danh mục-->
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Hình thức truyền dẫn</label>
                <Select2 Id="mySelect1" Items="@selectHTTD" OnChange="@OnSelectChangeHTTD"></Select2>
                <ValidationMessage For="()=>InputMD.ThongTinDuongTruyenDan_HinhThucTruyenDan"></ValidationMessage>
            </div>
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Loại truyền dẫn</label>
                <Select2 Id="mySelect2" Items="@selectLTD" OnChange="@OnSelectChangeLTD"></Select2>
                <ValidationMessage For="()=>InputMD.ThongTinDuongTruyenDan_LoaiTruyenDan"></ValidationMessage>
            </div>
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Loại móng</label>
                <Select2 Id="mySelect3" Items="@selectLM" OnChange="@OnSelectChangeLM"></Select2>
                <ValidationMessage For="()=>InputMD.ThongTinMongDuongTruyenDan_LoaiMong"></ValidationMessage>
            </div>
            <div class="col-sm-4 col-md-2 mb-2">
                <label for="Table">Hình thức móng</label>
                <Select2 Id="mySelect4" Items="@selectHTM" OnChange="@OnSelectChangeHTM"></Select2>
                <ValidationMessage For="()=>InputMD.ThongTinMongDuongTruyenDan_HinhThucMong"></ValidationMessage>
            </div>
            <!-- Search Button -->
            <div class="col-sm-4 col-md-1 mb-1">
                <label>&nbsp;</label>
                <button type="submit" class="btn btn-primary w-100">Tìm kiếm</button>
            </div>
            <div class="col-sm-4 col-md-1 mb-1">
                <label>&nbsp;</label>
                <button type="button" @onclick="ShowModal" class="btn btn-info w-100">Tạo mới</button>
            </div>
        </div>
    </EditForm>

    <div class="d-flex justify-content-between align-items-center">
        <h5 class="mt-2">Danh sách phân loại móng</h5>
        <i @onclick="ExportExcel" class="fa fa-download accent-blue mr-2" title="Download file excel" aria-hidden="true" style="cursor: pointer;"></i>
    </div>
    <div class="row mt-3 our-table">
        <table class="table table-hover table-bordered">
            <thead class="bg-info">
                <tr>
                    <th></th>
                    <th>STT</th>
                    <th onclick="@(() => SortTable("ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop"))" class="text-center sortable align-middle">
                        <div class="mr-3">
                            Phân loại móng
                            <span class="arrow @(GetSortStyle("ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinDuongTruyenDan_HinhThucTruyenDan_Name"))" class="text-center sortable align-middle" >
                        <div class="mr-3">
                            Hình thức truyền dẫn
                            <span class="arrow @(GetSortStyle("ThongTinDuongTruyenDan_HinhThucTruyenDan_Name"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinDuongTruyenDan_LoaiTruyenDan_Name"))" class="text-center sortable align-middle">
                        <div class="mr-3">
                            Loại truyền dẫn
                            <span class="arrow @(GetSortStyle("ThongTinDuongTruyenDan_LoaiTruyenDan_Name"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinMongDuongTruyenDan_LoaiMong_Name"))" class="text-center sortable align-middle" >
                        <div class="mr-3">
                            Loại móng
                            <span class="arrow @(GetSortStyle("ThongTinMongDuongTruyenDan_LoaiMong_Name"))"></span>
                        </div>
                    </th>
                    <th onclick="@(() => SortTable("ThongTinMongDuongTruyenDan_HinhThucMong_Name"))" class="text-center sortable align-middle" >
                        <div class="mr-3">
                            Hình thức móng
                            <span class="arrow @(GetSortStyle("ThongTinMongDuongTruyenDan_HinhThucMong_Name"))"></span>
                        </div>
                    </th>
               
                    <th> C.Cao lót móng (m)</th>
                    <th> C.Rộng lót móng</th>
                    <th> C.Cao móng (m)</th>
                    <th> C.Rộng móng (m)</th>
                </tr>
            </thead>
            @if (listPLMongCongModel.Any())
            {

                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var item in listPLMongCongModel)
                    {

                        <tr>
                            <td class="d-flex nowrap">
                                <div class="d-inline-block">
                                    <button class="btn btn-sm btn-primary m-1" title="Thêm vào sau" @onclick="()=>InsertLaterFlag(item.Flag)">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                    @{
                                        if (item.IsEdit == 0)
                                        {
                                            <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>

                                            <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop )">
                                                <i class="fas fa-trash"></i>
                                             </button>
                                        }
                                    }
                                </div>
                            </td>
                            <td class="text-center">@stt</td>
                            <td>@item.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop </td>
                            <td>@item.ThongTinDuongTruyenDan_HinhThucTruyenDan_Name </td>
                            <td>@item.ThongTinDuongTruyenDan_LoaiTruyenDan_Name</td>
                            <td>@item.ThongTinMongDuongTruyenDan_LoaiMong_Name</td>
                            <td>@item.ThongTinMongDuongTruyenDan_HinhThucMong_Name </td>
                            <td>@item.ThongTinCauTaoCongTron_CCaoLotMong </td>
                            <td>@item.ThongTinCauTaoCongTron_CRongLotMong </td>
                            <td>@item.ThongTinCauTaoCongTron_CCaoMong</td>
                            <td>@item.ThongTinCauTaoCongTron_CRongMong </td>

                        </tr>
                        stt++;
                    }

                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        <td colspan="11"> Không có dữ liệu</td>
                    </tr>
                </tbody>
            }

        </table>

    </div>

    @if (listPLMongCongModel.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>

@code {
    string groupId = "";
    string userId = "";
    private List<PhanLoaiMongCTron> listPhanLoaiMongCTron = new List<PhanLoaiMongCTron>();
    private PhanLoaiMongCongModel InputMD = new();
    private PhanLoaiMongCTron Input = new();
    public List<DanhMuc1> listDanhMuc = new();
    public DateTime baseTime;
    private bool isEdit { get; set; } = false;

    private bool isModalVisible = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm mới loại móng";


    private List<SelectedItem> selectHTTD = new();
    private List<SelectedItem> selectLTD = new();
    private List<SelectedItem> selectLM = new();
    private List<SelectedItem> selectHTM = new();

    private void OnSelectChangeHTTD(SelectedItem selectedItem)
    {
        InputMD.ThongTinDuongTruyenDan_HinhThucTruyenDan = selectedItem.Value;
    }
    private void OnSelectChangeLTD(SelectedItem selectedItem)
    {
        InputMD.ThongTinDuongTruyenDan_LoaiTruyenDan = selectedItem.Value;
    }
    private void OnSelectChangeLM(SelectedItem selectedItem)
    {
        InputMD.ThongTinMongDuongTruyenDan_LoaiMong = selectedItem.Value;
    }
    private void OnSelectChangeHTM(SelectedItem selectedItem)
    {
        InputMD.ThongTinMongDuongTruyenDan_HinhThucMong = selectedItem.Value;
    }

    public async Task Search()
    {
        dmModel.PageNumber = 1;
        await LoadData();
    }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
        Flag = 0;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;

    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
        isEdit = false;
        Flag = 0;
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }
    public List<PhanLoaiMongCongModel> listPLMongCongModel {get;set;} = new();
    public List<PhanLoaiMongCongModel> listModel {get;set;} = new();
    public MetaData MetaData {get;set;}
    public PhanLoaiMongCongModel dmModel {get;set;}


    public List<DanhMuc1> FindByIdNhomDanhMuc(string idNhomDanhMuc)
    {
        return listDanhMuc.Where(dm => dm.IdNhomDanhMuc == idNhomDanhMuc).ToList();
    }

    public string GetTenDanhMucById(string id)
    {
        var danhMuc = listDanhMuc.FirstOrDefault(dm => dm.Id == id);
        return danhMuc != null ? danhMuc.Ten : null;
    }
    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        baseTime = DateTime.Now;
        await LoadData();
        foreach (var item in listDanhMuc)
        {
            // Kiểm tra xem item đã tồn tại trong danh sách hay chưa
            if (!selectHTTD.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "TD_HTTruyenDan")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectHTTD.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            if (!selectLTD.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "TD_LTruyenDan")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectLTD.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            if (!selectLM.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "TD_LMTruyenDan")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectLM.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }
            if (!selectHTM.Any(x => x.Value == item.Id) && item.IdNhomDanhMuc == "TD_LMTruyenDan")
            {
                if (!string.IsNullOrEmpty(item.Id))
                {
                    // Nếu chưa tồn tại, thêm item vào danh sách
                    selectHTM.Add(new SelectedItem
                        {
                            Value = item.Id,
                            Text = item.Ten
                        });
                }
            }

        }
        // Thêm phần tử mặc định "chọn..."
        selectHTTD.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectLTD.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectLM.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
        selectHTM.Insert(0, new SelectedItem { Value = "", Text = "Chọn...", IsSelected = true });
    }


    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        isLoading = true;
        dmModel = new();
        listDanhMuc = await DanhMucRepository.GetAll(groupId);
        var plhg = await PhanLoaiMongCTronRepository.GetAllByVM(InputMD);
        listModel = plhg;
        listPLMongCongModel = Paging(plhg);
        isLoading = false;
    }

    private async Task HandleInValidSubmit()
    {
        await JSRuntime.InvokeVoidAsync("scrollToFirstError");
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            PhanLoaiMongCTron phanLoaiMongCTronExist = new();
            phanLoaiMongCTronExist = await PhanLoaiMongCTronRepository.GetPhanLoaiMongCTronExist(Input);
            var existName = false;
            existName = await PhanLoaiMongCTronRepository.CheckUsingName(Input.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop);
            if (isEdit)
            {
                if (phanLoaiMongCTronExist == null)
                {
                    string[] ids = {Input.Id};
                    bool isValid = await PhanLoaiMongCTronRepository.CheckExclusive(ids,baseTime);
                    if (isValid)
                    {
                        // cập nhật
                        await PhanLoaiMongCTronRepository.Update(Input, userId);
                        isModalVisible = false;
                        Input = new PhanLoaiMongCTron();
                        isEdit = false;
                        ToastService.ShowToast(
                            "Thông báo",
                            "Cập nhật thành công.",
                            cssClass: "toast-success",
                            iconClass: "fa fa-check-circle",
                            progressBarClass: "bg-info",
                            duration: 5000
                        );
                        await LoadData();
                    }

                }
                else
                if (phanLoaiMongCTronExist.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop.ToUpper().Trim() != Input.ThongTinMongDuongTruyenDan_PhanLoaiMongCongTronCongHop.ToUpper().Trim() && !existName)
                {
                    // cập nhật
                    await PhanLoaiMongCTronRepository.Update(Input,userId);
                    isModalVisible = false;
                    Input = new PhanLoaiMongCTron();
                    isEdit = false;
                    ToastService.ShowToast(
                        "Thông báo",
                        "Cập nhật thành công.",
                        cssClass: "toast-success",
                        iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                }
                else
                {
                    ToastService.ShowToast(
                           "Thông báo",
                           "Tên phân loại móng đã tồn tại. Vui lòng kiểm tra lại !",
                           cssClass: "toast-danger",
                            iconClass: "fa fa-exclamation-circle",
                           progressBarClass: "bg-info",
                           duration: 5000
                       );
                }
            }
            else if (phanLoaiMongCTronExist == null)
            {
                if (Flag > 0)
                {
                    // Thêm mới thông tin
                    var id = await PhanLoaiMongCTronRepository.InsertLaterFlag(Input, Flag);
                    isModalVisible = false;
                    Input = new PhanLoaiMongCTron();
                    ToastService.ShowToast(
                        "Thông báo",
                        "Chèn thành công.",
                        cssClass: "toast-success",
                        iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                    Flag = 0;
                }
                else
                {
                    // Thêm mới thông tin
                    await PhanLoaiMongCTronRepository.Insert(Input,userId);
                    isModalVisible = false;
                    Input = new PhanLoaiMongCTron();
                    ToastService.ShowToast(
                        "Thông báo",
                        "Thêm thành công.",
                        cssClass: "toast-success",
                       iconClass: "fa fa-check-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
                    await LoadData();
                }
            }
            else
            {
                ToastService.ShowToast(
                        "Thông báo",
                        "Phân loại móng đã tồn tại , Vui lòng kiểm tra lại !",
                        cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                        "Thông báo",
                        ex.Message,
                        cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
        }
    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            if (!string.IsNullOrEmpty(deleteId))
            {

                var result = await PhanLoaiMongCTronRepository.CheckUsingId(deleteId);
                if (result)
                {
                    ToastService.ShowToast("Thông báo", "Không thể xóa phân loại đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                }
                else
                {
                    // Thực hiện hành động xóa
                    await PhanLoaiMongCTronRepository.DeleteById(deleteId,userId);
                    ToastService.ShowToast("Thông báo", "Xóa phân loại thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await LoadData();
                }

                deleteId = "";
            }
        }
    }


    private async Task HandleEdit(string id)
    {
        try
        {
            var result = await PhanLoaiMongCTronRepository.CheckUsingId(id);
            if (result)
            {
                ToastService.ShowToast("Thông báo", "Không thể sửa phân loại đang được sử dụng trong DS Nước mua.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
            }
            else
            {
                TitleModal = "Cập nhật loại cống !";
                Input = await PhanLoaiMongCTronRepository.GetById(id);
                isEdit = true;
                isModalVisible = true;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
                        "Thông báo",
                        ex.Message,
                        cssClass: "toast-danger",
                         iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 5000
                    );
        }

    }

    int Flag = 0;
    //thêm vào sau 
    private void InsertLaterFlag(int flag)
    {
        Flag = flag;
        TitleModal = "Chèn loại móng !";
        isModalVisible = true;
    }

    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<PhanLoaiMongCongModel> Paging(List<PhanLoaiMongCongModel> plhgs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = plhgs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        plhgs = plhgs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listPLMongCongModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var item in plhgs)
        {
            listPLMongCongModel.Add(item);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<PhanLoaiMongCongModel>(listPLMongCongModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return plhgs;
    }
    private async Task ExportExcel()
    {

        var sheetInfo = new SheetInfo1<object>
            {
                SheetName = "1.5 PL móng C.Tròn 1.6 PL móng C.Hộp",
                Tables = new List<TableInfo<object>>
               {
                  new TableInfo<object>
                   {
                      Headers = ConstantHeaderExcel.PHANLOAIMONG_HEADERS.Cast<ComplexHeader>().ToList(),
                      Data = listModel.Cast<object>().ToList()
                   },
               }
            };

        byte[] excelBytes = ExportExcelService.ExportToExcelWithMultipleTables(new List<SheetInfo1<object>> { sheetInfo });
        var fileName = "PhanLoaiMong.xlsx";
        using var stream = new MemoryStream(excelBytes);
        using var streamRef = new DotNetStreamReference(stream);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}
