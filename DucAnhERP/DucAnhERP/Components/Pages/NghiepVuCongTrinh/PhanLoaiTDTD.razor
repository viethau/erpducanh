@page "/NghiepVuCongTrinh/PhanLoaiTDTD"
@using DucAnhERP.ViewModel
@using DucAnhERP.Models
@using DucAnhERP.Components.Pages.Common
@using System.Linq
@using DucAnhERP.SeedWork
@using Microsoft.AspNetCore.Authorization
@inject IDanhMucRepository DanhMucRepository
@inject IPhanLoaiTDanTDanRepository PhanLoaiTDanTDanRepository
@inject DucAnhERP.Services.ToastService ToastService

@code {
    private bool isEdit { get; set; } = false;
}
<div class="m-5">

    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTTDCongHoRanh_TenLoaiTamDanTieuChuan">Tên loại tấm đan  <span class="text-danger">*</span></label>
                        <InputText @bind-Value="Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan" class="form-control" id="TTTDCongHoRanh_TenLoaiTamDanTieuChuan" placeholder="Tên loại tấm đan " />
                        <ValidationMessage For="() => Input.TTTDCongHoRanh_TenLoaiTamDanTieuChuan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinLyTrinhTruyenDan_TuLyTrinh">Từ lý trình<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.ThongTinLyTrinhTruyenDan_TuLyTrinh" class="form-control" id="ThongTinLyTrinhTruyenDan_TuLyTrinh" placeholder="Từ lý trình" />
                        <ValidationMessage For="() => Input.ThongTinLyTrinhTruyenDan_TuLyTrinh" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinLyTrinhTruyenDan_DenLyTrinh">Đến lý trình<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.ThongTinLyTrinhTruyenDan_DenLyTrinh" class="form-control" id="ThongTinLyTrinhTruyenDan_DenLyTrinh" placeholder="Đến lý trình" />
                        <ValidationMessage For="() => Input.ThongTinLyTrinhTruyenDan_DenLyTrinh" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_HinhThucTruyenDan">Hình thức truyền dẫn <span class="text-danger">*</span></label>
                        <select disabled="@isEdit" id="ThongTinDuongTruyenDan_HinhThucTruyenDan" class="form-control" @bind="Input.ThongTinDuongTruyenDan_HinhThucTruyenDan">
                            <option value="">Hình thức truyền dẫn ...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_HTTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_HinhThucTruyenDan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ThongTinDuongTruyenDan_LoaiTruyenDan">Loại truyền dẫn <span class="text-danger">*</span></label>
                        <select disabled="@isEdit" id="ThongTinDuongTruyenDan_LoaiTruyenDan" class="form-control" @bind="Input.ThongTinDuongTruyenDan_LoaiTruyenDan">
                            <option value="">Loại truyền dẫn...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_LTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.ThongTinDuongTruyenDan_LoaiTruyenDan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTTDCongHoRanh_CauTaoTamDanTruyenDanTamDanTieuChuan">Cấu tạo tấm đan truyền dẫn <span class="text-danger"></span></label>
                        <select disabled="@isEdit" id="TTTDCongHoRanh_CauTaoTamDanTruyenDanTamDanTieuChuan" class="form-control" @bind="Input.TTTDCongHoRanh_CauTaoTamDanTruyenDanTamDanTieuChuan">
                            <option value="">Cấu tạo tấm đan...</option>
                            @foreach (var dm in FindByIdNhomDanhMuc("TD_CTTDTruyenDan"))
                            {
                                <option value="@dm.Id">@dm.Ten</option>
                            }
                        </select>
                        <ValidationMessage For="() => Input.TTTDCongHoRanh_CauTaoTamDanTruyenDanTamDanTieuChuan" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTTDCongHoRanh_CDai">C.Dài <span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.TTTDCongHoRanh_CDai" class="form-control" id="TTTDCongHoRanh_CDai" placeholder="C.Dài " />
                        <ValidationMessage For="() => Input.TTTDCongHoRanh_CDai" class="text-danger" />
                    </div>

                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTTDCongHoRanh_CRong">C.Rộng (m)<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.TTTDCongHoRanh_CRong" class="form-control" id="TTTDCongHoRanh_CRong" placeholder="C.Rộng " />
                        <ValidationMessage For="() => Input.TTTDCongHoRanh_CRong" class="text-danger" />
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="TTTDCongHoRanh_CCao">C.Cao (m)<span class="text-danger">*</span></label>
                        <InputNumber disabled="@isEdit" @bind-Value="Input.TTTDCongHoRanh_CCao" class="form-control" id="TTTDCongHoRanh_CCao" placeholder="C.Cao " />
                        <ValidationMessage For="() => Input.TTTDCongHoRanh_CCao" class="text-danger" />
                    </div>
                </div>

                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row mt-5 justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <button class="btn btn-primary" @onclick="ShowModal">Thêm phân loại đế cống</button>

    <h3 class="mt-2">Danh sách phân loại đế cống </h3>
    @if (!listPLTDTDModel.Any())
    {
        <div class="pt-3 pl-4">
            <div class="callout callout-warning">
                <h5>Không có dữ liệu tương ứng!</h5>
            </div>
        </div>
    }
    <div class="row mt-3 our-table">
        <table class="table table-hover table-bordered">
            <thead>
                <tr>
                    <th rowspan="2"> </th>
                    <th rowspan="2"> STT</th>
                    <th rowspan="2"> Tên loại tấm đan truyền dẫn</th>
                    <th colspan="2"> Thông tin lý trình</th>
                    <th colspan="6"> Cấu tạo đế cống</th>
                </tr>
                <tr>
                    <th> Từ lý trình</th>
                    <th> Đến lý trình</th>
                    <th> Hình thức truyền dẫn </th>
                    <th> Loại truyền dẫn </th>
                    <th> Cấu tạo tấm đan truyền dẫn </th>
                    <th> C.Dài  </th>
                    <th> C.Rộng  </th>
                    <th> C.Cao  </th>
                </tr>
            </thead>
            @if (listPLTDTDModel.Any())
            {

                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var item in listPLTDTDModel)
                    {

                        <tr>
                            <td class="d-flex nowrap">
                                <div class="d-inline-block">
                                    <button class="btn btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.TTTDCongHoRanh_TenLoaiTamDanTieuChuan)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                            <td class="text-center">@stt</td>
                            <td>@item.TTTDCongHoRanh_TenLoaiTamDanTieuChuan </td>
                            <td>@item.ThongTinLyTrinhTruyenDan_TuLyTrinh </td>
                            <td>@item.ThongTinLyTrinhTruyenDan_DenLyTrinh</td>
                            <td>@GetTenDanhMucById(item.ThongTinDuongTruyenDan_HinhThucTruyenDan ?? "") </td>
                            <td>@GetTenDanhMucById(item.ThongTinDuongTruyenDan_LoaiTruyenDan ?? "") </td>
                            <td>@GetTenDanhMucById(item.TTTDCongHoRanh_CauTaoTamDanTruyenDanTamDanTieuChuan ?? "") </td>
                            <td>@item.TTTDCongHoRanh_CDai </td>
                            <td>@item.TTTDCongHoRanh_CRong</td>
                            <td>@item.TTTDCongHoRanh_CCao</td>
                        </tr>
                        stt++;
                    }

                </tbody>
            }

        </table>

    </div>

    @if (listPLTDTDModel.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>

@code {
    private List<PhanLoaiTDanTDan> listPhanLoaiTDanTDan = new List<PhanLoaiTDanTDan>();
    private PhanLoaiTDanTDan Input = new();
    public List<DanhMuc> listDanhMuc = new();

    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới loại đế cống";


    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;

    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
        isEdit = false;
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    public List<PhanLoaiTDanTDanModel> listPLTDTDModel
    {
        get;
        set;
    } = new();

    public List<PhanLoaiTDanTDanModel> listModel
    {
        get;
        set;
    } = new();

    public MetaData MetaData
    {
        get;
        set;
    }

    public PhanLoaiTDanTDanModel dmModel
    {
        get;
        set;
    }



    public List<DanhMuc> FindByIdNhomDanhMuc(string idNhomDanhMuc)
    {
        return listDanhMuc.Where(dm => dm.IdNhomDanhMuc == idNhomDanhMuc).ToList();
    }

    public string GetTenDanhMucById(string id)
    {
        var danhMuc = listDanhMuc.FirstOrDefault(dm => dm.Id == id);
        return danhMuc != null ? danhMuc.Ten : null;
    }
    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }


    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        dmModel = new();
        listDanhMuc = await DanhMucRepository.GetAll();
        var plhg = await PhanLoaiTDanTDanRepository.GetAllByVM();
        listModel = plhg;
        listPLTDTDModel = Paging(plhg);

    }

    private async Task HandleValidSubmit()
    {
        if (isEdit)
        {
            // Thêm mới thông tin
            await PhanLoaiTDanTDanRepository.Update(Input);
            isModalVisible = false;
            Input = new PhanLoaiTDanTDan();
            isEdit = false;
            ToastService.ShowToast(
                "Thông báo",
                "Cập nhật thành công.",
                cssClass: "toast-success",
                iconClass: "fa fa-bell",
                progressBarClass: "bg-info",
                duration: 5000
            );
            await LoadData();
        }
        else
        {
            // Thêm mới thông tin
            await PhanLoaiTDanTDanRepository.Insert(Input);
            isModalVisible = false;
            Input = new PhanLoaiTDanTDan();
            ToastService.ShowToast(
                "Thông báo",
                "Thêm thành công.",
                cssClass: "toast-success",
                iconClass: "fa fa-bell",
                progressBarClass: "bg-info",
                duration: 5000
            );
            await LoadData();
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }

    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            if (!string.IsNullOrEmpty(deleteId))
            {

                var result = await PhanLoaiTDanTDanRepository.CheckUsingId(deleteId);
                if (result)
                {
                    ToastService.ShowToast("Thông báo", "Không thể xóa danh mục đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-bell", progressBarClass: "bg-info", duration: 5000);
                }
                else
                {
                    // Thực hiện hành động xóa
                    await PhanLoaiTDanTDanRepository.DeleteById(deleteId);
                    ToastService.ShowToast("Thông báo", "Xóa danh mục thành công.", cssClass: "toast-success", iconClass: "fa fa-bell", progressBarClass: "bg-info", duration: 5000);
                    await LoadData();
                }

                deleteId = "";
            }
        }
    }


    private async Task HandleEdit(string id)
    {
        TitleModal = "Cập nhật loại đế cống !";
        Input = await PhanLoaiTDanTDanRepository.GetById(id);
        isEdit = true;
        isModalVisible = true;
    }



    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<PhanLoaiTDanTDanModel> Paging(List<PhanLoaiTDanTDanModel> plhgs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = plhgs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        plhgs = plhgs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listPLTDTDModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var item in plhgs)
        {
            listPLTDTDModel.Add(item);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<PhanLoaiTDanTDanModel>(listPLTDTDModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return plhgs;
    }

}
