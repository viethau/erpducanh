@page "/THLT/KTHHMDC"

@* @using Microsoft.AspNetCore.Authorization *@
@* @attribute [Authorize] *@

<style>
    table {
        position: relative;
    }

        table thead tr td {
            /*   white-space: nowrap; */
            text-align: center;
            padding: 2px 5px;
        }
</style>
<div class="container-fluid">
    <div class="row m-2 d-flex justify-content-end">
        <div class="col-md-3 col-sm-6 text-end">
            <button class="btn btn-outline-primary me-2" @onclick="ThumbtackHeader" title="Ghim tiêu đề bảng">
                <i class="fas fa-thumbtack"></i>
            </button>
        </div>
    </div>
    <div class="d-flex justify-content-between align-items-center">
        <h5 class="mt-2">BẢNG THÔNG TIN CẤU TẠO VÀ KÍCH THƯỚC HÌNH HỌC CỐNG TRÒN, MÓNG CỐNG TRÒN, MÓNG CỐNG HỘP, ĐẾ CỐNG TRÒN</h5>
        <i @onclick="ExportExcel" class="fa fa-download accent-blue mr-2" title="Download file excel" aria-hidden="true" style="cursor: pointer;"></i>
    </div>
   
    <div id="tableContainer ">
        <div class="row mt-3 p-2 our-table">
            <table id="tb1" class="table table-bordered table-hover" cellpadding="1" cellspacing="2">
                <thead class="bg-info @thumbtack">
                    <tr>
                        <th class="text-center" rowspan="2">STT</th>
                        <th class="text-center" colspan="4">Thông tin cống tròn, ống nhựa </th>
                        <th class="text-center" colspan="5">Thông tin móng cống tròn </th>
                        <th class="text-center" colspan="5">Thông tin móng cống hộp </th>
                        <th class="text-center" colspan="4">KTHH đế cống </th>
                    </tr>
                    <tr>
                        <th class="text-center">Loại cống tròn   		</th>
                        <th class="text-center">Chiều dài               </th>
                        <th class="text-center">C.Dầy phủ bì            </th>
                        <th class="text-center">Lòng sử dụng            </th>
                        <th class="text-center">Loại móng               </th>
                        <th class="text-center"> C.Cao lót móng (m)     </th>
                        <th class="text-center"> C.Rộng lót móng        </th>
                        <th class="text-center"> C.Cao móng (m)         </th>
                        <th class="text-center"> C.Rộng móng (m)        </th>
                        <th class="text-center">Loại móng               </th>
                        <th class="text-center"> C.Cao lót móng (m)     </th>
                        <th class="text-center"> C.Rộng lót móng        </th>
                        <th class="text-center"> C.Cao móng (m)         </th>
                        <th class="text-center"> C.Rộng móng (m)        </th>
                        <th class="text-center"> Loại đế cống           </th>
                        <th class="text-center"> D                      </th>
                        <th class="text-center"> R                      </th>
                        <th class="text-center"> C                      </th>
                    </tr>
                </thead>
                @if (listKTHHMDCModel.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listKTHHMDCModel)
                        {
                            stt++;
                            <tr>
                                <td class="text-center">@stt</td>
                                <td>@item.PhanLoaiCTronHopNhua_TenLoaiTruyenDanSauPhanLoai		  </td>
                                <td>@item.TTCDSLCauKienDuongTruyenDan_ChieuDai01CauKien               </td>
                                <td>@item.ThongTinCauTaoCongTron_CDayPhuBi                           </td>
                                <td>@item.ThongTinCauTaoCongTron_LongSuDung                          </td>
                                <td>@item.PhanLoaiMongCTron_PhanLoaiMongCongTronCongHop     </td>
                                <td>@item.ThongTinCauTaoCongTron_CCaoLotMong                         </td>
                                <td>@item.ThongTinCauTaoCongTron_CRongLotMong                        </td>
                                <td>@item.ThongTinCauTaoCongTron_CCaoMong                            </td>
                                <td>@item.ThongTinCauTaoCongTron_CRongMong                           </td>
                                <td>@item.PhanLoaiMongCTron_PhanLoaiMongCongTronCongHop1      </td>
                                <td>@item.TTKTHHCongHopRanh_CCaoLotMong                              </td>
                                <td>@item.TTKTHHCongHopRanh_CRongLotMong                             </td>
                                <td>@item.TTKTHHCongHopRanh_CCaoMong                                 </td>
                                <td>@item.TTKTHHCongHopRanh_CRongMong                                </td>
                                <td>@item.PhanLoaiDeCong_TenLoaiDeCong                               </td>
                                <td>@item.ThongTinDeCong_D                                           </td>
                                <td>@item.ThongTinDeCong_R                                           </td>
                                <td>@item.ThongTinDeCong_C                                           </td>
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td colspan="4"> Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        <div class="mt-4">
            @if (listKTHHMDCModel.Any())
            {
                <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
            }
        </div>
    </div>

    <Loading IsLoading="@isLoading" LoadingText="Đang tải dữ liệu..." />
</div>


@code {
    [SupplyParameterFromForm]
    private NuocMua Input { get; set; } = new();
    public List<DanhMuc1> listDanhMuc = new();
    private bool isEdit = false;
    private bool isLoading = false;
    private DateTime baseTime;
    string groupId = "";
    string userId = "";
    private string layoutClass = "d-flex justify-content-between";
    private string space = "ml-5";
    private string thumbtack = "";

    public List<KTHHMDCModel> listKTHHMDCModel { get; set; } = new();
    public List<KTHHMDCModel> listModel { get; set; } = new();


    public MetaData MetaData { get; set; }
    public KTHHMDCModel nuocMuaModel { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        baseTime = DateTime.Now;
        nuocMuaModel = new();
        await LoadData();
    }

    // Truy vấn data theo điều kiện tìm kiếm
    private async Task LoadData()
    {
        isLoading = true;
        var helper = new DataConversionHelper();
        listDanhMuc = await DanhMucRepository.GetAll(groupId);
        KTHHMDCModel nuocMuaModelSearch = new();

        var nuocMuaRepository = await NuocMuaRepository.GetBaoCaoKTHHMDC();
        
        listModel = nuocMuaRepository;
        listKTHHMDCModel = PagingLeft(nuocMuaRepository);

        isLoading = false;
        baseTime = DateTime.Now;
    }



    // Sắp xếp data
    private void SortTableLeft(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        nuocMuaModel.PageNumber = 1;
        PagingLeft(listModel);
    }


    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        nuocMuaModel.PageNumber = page;
        PagingLeft(listModel);
      
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {
        nuocMuaModel.PageNumber = 1;
        nuocMuaModel.pageSize = pageSize;
        PagingLeft(listModel);
        
    }

    // Xử lý paging left
    private List<KTHHMDCModel> PagingLeft(List<KTHHMDCModel> nuocMuaModels)
    {
        // Đếm số bản ghi thỏa mãn
        var count = nuocMuaModels.Count();

        // Lọc bản ghi theo page hiện tại và page size
        nuocMuaModels = nuocMuaModels.Skip((nuocMuaModel.PageNumber - 1) * nuocMuaModel.PageSize).Take(nuocMuaModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listKTHHMDCModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var major in nuocMuaModels)
        {
            listKTHHMDCModel.Add(major);
        }

        // Tạo pagelist mới

        var pagelist = new PageList<KTHHMDCModel>(listKTHHMDCModel, count, nuocMuaModel.PageNumber, nuocMuaModel.PageSize);
        MetaData = pagelist.MetaData;
        return nuocMuaModels;
    }
    
    private void ThumbtackHeader()
    {
        thumbtack = thumbtack == "flex-header" ? "" : "flex-header";
    }
    private async Task ExportExcel()
    {
        
        var sheetInfo = new SheetInfo1<object>
            {
                SheetName = "3.4 KTHH móng+đế+C.Tròn+C.Hộp",
                Tables = new List<TableInfo<object>>
                {
                     new TableInfo<object>
                    {
                        Headers = ConstantHeaderExcel.KTHHMDC_HEADERS.Cast<ComplexHeader>().ToList(),
                        Data = listModel.Cast<object>().ToList()
                    },
                   
                }
            };

        // Xuất Excel
        byte[] excelBytes = ExportExcelService.ExportToExcelWithMultipleTables(new List<SheetInfo1<object>> { sheetInfo });
        var fileName = "KTHHMDC.xlsx";
        using var stream = new MemoryStream(excelBytes);
        using var streamRef = new DotNetStreamReference(stream);
        await JSRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

}