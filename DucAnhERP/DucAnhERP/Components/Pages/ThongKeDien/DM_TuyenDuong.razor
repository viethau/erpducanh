@page "/ThongKeDien/DanhMuc/DM_TuyenDuong"

<div class="container-fluid">
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="TuyenDuong">Tuyến đường <span class="text-danger">*</span></label>
                            <InputText id="TuyenDuong" class="form-control" @bind-Value="Input.TuyenDuong" />
                            <ValidationMessage For="() => Input.TuyenDuong" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="TuCot">Từ cột<span class="text-danger">*</span></label>
                            <InputText id="TuCot" class="form-control" @bind-Value="Input.TuCot" />
                            <ValidationMessage For="() => Input.TuCot" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="DenCot">Đến cột<span class="text-danger">*</span></label>
                            <InputText id="DenCot" class="form-control" @bind-Value="Input.DenCot" />
                            <ValidationMessage For="() => Input.DenCot" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="TuLyTrinh">Từ lý trình<span class="text-danger">*</span></label>
                            <InputText id="TuLyTrinh" class="form-control" @bind-Value="Input.TuLyTrinh" />
                            <ValidationMessage For="() => Input.TuLyTrinh" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="DenLyTrinh">Đến lý trình<span class="text-danger">*</span></label>
                            <InputText id="DenLyTrinh" class="form-control" @bind-Value="Input.DenLyTrinh" />
                            <ValidationMessage For="() => Input.DenLyTrinh" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="ToaDoX">Tọa độ X<span class="text-danger">*</span></label>
                            <InputText id="ToaDoX" class="form-control" @bind-Value="Input.ToaDoX" />
                            <ValidationMessage For="() => Input.ToaDoX" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="ToaDoX">Tọa độ Y<span class="text-danger">*</span></label>
                            <InputText id="ToaDoY" class="form-control" @bind-Value="Input.ToaDoY" />
                            <ValidationMessage For="() => Input.ToaDoY" class="text-danger" />
                        </div>
                    </div>
                </div>
                <div class="row justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <div class="d-flex justify-content-between align-items-center">
        <h5 class="mt-2">Danh sách</h5>
    </div>
    <EditForm Model="pageModel" FormName="SearchData" id="SearchData" OnValidSubmit="@Search">
        <DataAnnotationsValidator />
        <div class="d-flex row">
            <div class="form-floating col-sm-3 col-md-3">
                <label for="TuyenDuong">Loại khối lượng</label>
                <Select2 Id="TuyenDuong" Items="@selectTuyenDuongSearch" OnChange="@OnSelectTuyenDuongSearch"></Select2>
                <ValidationMessage For="()=>pageModel.TuyenDuong"></ValidationMessage>
            </div>
            <div class="form-floating col-sm-3 col-md-3">
                <label for="TuCot">Từ cột</label>
                <Select2 Id="TuCot" Items="@selectTuCotSearch" OnChange="@OnSelectTuCotSearch"></Select2>
                <ValidationMessage For="()=>pageModel.TuCot"></ValidationMessage>
            </div>
            <div class="form-floating col-sm-3 col-md-3">
                <label for="DenCot">Đến cột</label>
                <Select2 Id="DenCot" Items="@selectDenCotSearch" OnChange="@OnSelectDenCotSearch"></Select2>
                <ValidationMessage For="()=>pageModel.DenCot"></ValidationMessage>
            </div>
            <div class="form-floating col-sm-3 col-md-3">
                <label for="TuLyTrinh">Từ lý trình</label>
                <Select2 Id="TuLyTrinh" Items="@selectTuLyTrinhSearch" OnChange="@OnSelectTuLyTrinhSearch"></Select2>
                <ValidationMessage For="()=>pageModel.TuLyTrinh"></ValidationMessage>
            </div>
            <div class="form-floating col-sm-3 col-md-3">
                <label for="DenLyTrinh">Đên lý trình</label>
                <Select2 Id="DenLyTrinh" Items="@selectDenLyTrinhSearch" OnChange="@OnSelectDenLyTrinhSearch"></Select2>
                <ValidationMessage For="()=>pageModel.DenLyTrinh"></ValidationMessage>
            </div>

            <div class="form-group ml-5">
                <label>&nbsp;</label>
                <button type="submit" form="SearchData" class="btn btn-primary form-control">Tìm kiếm</button>
            </div>
            @if (CheckQuyenService.HasPermission(3))
            {
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button class="btn btn-default form-control" @onclick="ShowModal">Thêm mới</button>
                </div>

            }
        </div>
    </EditForm>

    <div class="row mt-3">
        <table class="table table-hover table-bordered">
            <thead class="bg-info">
                <tr>
                    <th rowspan="2" class="text-center" >STT</th>
                    <th colspan="5" class="text-center">Thông tin tuyến đường</th>
                    <th colspan="2" class="text-center">Tọa độ</th>
                    <th class="text-center" colspan="2" rowspan="2"></th>
                </tr>
                <tr>
                    <th onclick="@(() => SortTable("TuyenDuong"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Tuyến đường  <span class="arrow @(GetSortStyle("TuyenDuong"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("TuCot"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Từ cột  <span class="arrow @(GetSortStyle("TuCot"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("DenCot"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Đến cột  <span class="arrow @(GetSortStyle("DenCot"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("TuLyTrinh"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Từ lý trình  <span class="arrow @(GetSortStyle("TuLyTrinh"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("DenLyTrinh"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Đến lý trình <span class="arrow @(GetSortStyle("DenLyTrinh"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("ToaDoX"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">X <span class="arrow @(GetSortStyle("ToaDoX"))"></span></div>
                    </th>
                    <th onclick="@(() => SortTable("ToaDoY"))" class="text-center sortable" scope="col" sortable>
                        <div class="pb-3">Y <span class="arrow @(GetSortStyle("ToaDoY"))"></span></div>
                    </th>

                </tr>
            </thead>
            @if (listDM_TuyenDuongModel.Any())
            {
                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var ndm in listDM_TuyenDuongModel)
                    {
                        <tr>
                            <td class="text-center">@stt</td>
                            <td>@ndm.TuyenDuong</td>
                            <td>@ndm.TuCot</td>
                            <td>@ndm.DenCot</td>
                            <td>@ndm.TuLyTrinh</td>
                            <td>@ndm.DenLyTrinh</td>
                            <td>@ndm.ToaDoX</td>
                            <td>@ndm.ToaDoY</td>
                            <td class="text-center">
                                @if (CheckQuyenService.HasPermission(4))
                                {
                                    <button class="btn btn-sm btn-primary" @onclick="()=>Edit(ndm.Id)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                }
                            </td>
                            <td class="text-center">
                                @if (CheckQuyenService.HasPermission(5))
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="()=>ConfirmDelete(ndm.Id,ndm.TuyenDuong)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                        stt++;
                    }

                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        <td colspan="8"> Không có dữ liệu</td>
                    </tr>
                </tbody>
            }

        </table>
    </div>

    @if (listDM_TuyenDuongModel.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>

@code {
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;

    private D_DM_TuyenDuong Input = new();
    private DateTime baseTime;

    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới ";
    bool isEdit = false;

    private List<SelectedItem> selectTuyenDuongSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectTuCotSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectDenCotSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectTuLyTrinhSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectDenLyTrinhSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };

    private void ShowModal()
    {
        isEdit = false;
        isModalVisible = true;
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    public List<DM_TuyenDuongModel> listDM_TuyenDuongModel{get;set;} = new();
    public List<DM_TuyenDuongModel> listModel{get;set;} = new();
    public MetaData MetaData{get;set;}
    public DM_TuyenDuongModel dmModel{get;set;}

    [SupplyParameterFromForm(FormName = "SearchData")]
    public DM_TuyenDuongModel pageModel { get; set; }
    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        pageModel = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
        }
        if (!string.IsNullOrEmpty(groupId) && user != null)
        {
            await CheckQuyenService.InitializePermissions(groupId, user, "6f85445f-398d-47d6-bbea-04c267299535");
        }
        var DM_TuyenDuongs = await DM_TuyenDuongService.GetByVM(groupId, new DM_TuyenDuongModel());
        foreach (var item in DM_TuyenDuongs)
        {
            if (!selectTuyenDuongSearch.Any(x => x.Value == item.TuyenDuong))
            {
                selectTuyenDuongSearch.Add(new SelectedItem
                    {
                        Value = item.TuyenDuong,
                        Text = item.TuyenDuong
                    });
            }
            if (!selectTuCotSearch.Any(x => x.Value == item.TuCot))
            {
                selectTuCotSearch.Add(new SelectedItem
                    {
                        Value = item.TuCot,
                        Text = item.TuCot
                    });
            }
            if (!selectDenCotSearch.Any(x => x.Value == item.DenCot))
            {
                selectDenCotSearch.Add(new SelectedItem
                    {
                        Value = item.DenCot,
                        Text = item.DenCot
                    });
            }
            if (!selectTuLyTrinhSearch.Any(x => x.Value == item.TuLyTrinh))
            {
                selectTuLyTrinhSearch.Add(new SelectedItem
                    {
                        Value = item.TuLyTrinh,
                        Text = item.TuLyTrinh
                    });
            }
            if (!selectDenLyTrinhSearch.Any(x => x.Value == item.DenLyTrinh))
            {
                selectDenLyTrinhSearch.Add(new SelectedItem
                    {
                        Value = item.DenLyTrinh,
                        Text = item.DenLyTrinh
                    });
            }
        }
        StateHasChanged();

        baseTime = DateTime.Now;
        dmModel = new();
        await Task.WhenAll(Search());
    }


    // Truy vấn data theo điều kiện tìm kiếm
    private async Task Search()
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "dac0c890-7c4b-40e4-91f3-fd8b9fb4e517");
            var DM_TuyenDuongs = await DM_TuyenDuongService.GetByVM(groupId, pageModel);
            listModel = DM_TuyenDuongs;
            listDM_TuyenDuongModel = Paging(DM_TuyenDuongs);
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }


    private async Task HandleValidSubmit()
    {
        try
        {
            Input.CreateBy = userName;
            Input.CompanyId = groupId;
            var isExist = await DM_TuyenDuongService.CheckExist(Input.Id, Input);
            if (isExist)
            {
                ToastService.ShowToast(
                   "Thông báo",
                    "Đã tồn tại.",
                    cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                    progressBarClass: "bg-info",
                    duration: 5000);
            }
            else
            {
                if (isEdit)
                {
                    var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "40acc55a-b536-4068-b946-217da164d118");
                    string[] ids = { Input.Id };
                    bool isValid = await DM_TuyenDuongService.CheckExclusive(ids, baseTime);
                    if (isValid)
                    {
                        await DM_TuyenDuongService.Update(Input, userId);
                        ToastService.ShowToast("Thông báo", "Cập nhật thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await Search();
                        isModalVisible = false;
                        Input = new();
                    }
                }
                else
                {
                    var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "353cc305-7b22-48c8-97c4-b1b9ed87d405");
                    await DM_TuyenDuongService.Insert(Input, userId);
                    ToastService.ShowToast("Thông báo", "Thêm thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await Search();
                    isModalVisible = false;
                    Input = new();
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }

    private string deleteId;

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }
    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "69f91ed2-1a06-4956-bef3-8ea3df8fe486");
            if (!string.IsNullOrEmpty(deleteId))
            {
                bool isInUse = await DM_TuyenDuongService.IsIdInUse(deleteId);
                if (isInUse)
                {
                    ToastService.ShowToast("Thông báo", "Không thể xóa loại danh mục đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                }
                else
                {
                    await DM_TuyenDuongService.DeleteById(deleteId, userId);
                    ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await Search();
                    deleteId = "";
                }
            }
        }
    }
    private async Task Edit(string id)
    {
        try
        {
            TitleModal = "Cập nhật !";
            Input = await DM_TuyenDuongService.GetById(id);
            isEdit = true;
            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }
    private async Task OnSelectTuyenDuongSearch(SelectedItem selectedItem)
    {
        pageModel.TuyenDuong = selectedItem.Value;
    }
    private async Task OnSelectTuCotSearch(SelectedItem selectedItem)
    {
        pageModel.TuCot = selectedItem.Value;
    }
    private async Task OnSelectDenCotSearch(SelectedItem selectedItem)
    {
        pageModel.DenCot = selectedItem.Value;
    }
    private async Task OnSelectTuLyTrinhSearch(SelectedItem selectedItem)
    {
        pageModel.TuLyTrinh = selectedItem.Value;
    }
    private async Task OnSelectDenLyTrinhSearch(SelectedItem selectedItem)
    {
        pageModel.DenLyTrinh = selectedItem.Value;
    }
    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }

    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }

    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }

    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<DM_TuyenDuongModel> Paging(List<DM_TuyenDuongModel> DM_TuyenDuongs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = DM_TuyenDuongs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        DM_TuyenDuongs = DM_TuyenDuongs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listDM_TuyenDuongModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var ndm in DM_TuyenDuongs)
        {
            listDM_TuyenDuongModel.Add(ndm);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<DM_TuyenDuongModel>(listDM_TuyenDuongModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return DM_TuyenDuongs;
    }
}
