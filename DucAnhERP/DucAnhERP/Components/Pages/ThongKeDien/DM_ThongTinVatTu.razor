@page "/ThongKeDien/DanhMuc/DM_ThongTinVatTu"
@using SixLabors.ImageSharp

<div class="container-fluid">
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="row">
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="Ten">Tên loại vật tư điện <span class="text-danger">*</span></label>
                            <InputText id="TenLoaiVatTu" class="form-control" @bind-Value="Input.TenLoaiVatTu" />
                            <ValidationMessage For="() => Input.TenLoaiVatTu" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="Ten">Đơn vị<span class="text-danger">*</span></label>
                            <InputText id="DonVi" class="form-control" @bind-Value="Input.DonVi" />
                            <ValidationMessage For="() => Input.DonVi" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="Ten">Thông tin loại vật tư điện<span class="text-danger">*</span></label>
                            <InputText id="ThongTinLoaiVatTuDien" class="form-control" @bind-Value="Input.ThongTinLoaiVatTuDien" />
                            <ValidationMessage For="() => Input.ThongTinLoaiVatTuDien" class="text-danger" />
                        </div>
                    </div>
                    @* <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="Ten">Hình ảnh<span class="text-danger">*</span></label>
                            <InputText id="HinhAnh" class="form-control" @bind-Value="Input.HinhAnh" />
                            <ValidationMessage For="() => Input.HinhAnh" class="text-danger" />
                        </div>
                    </div> *@
                    <div class="col-3 col-md-3 col-sm-6">
                        <div class="form-group">
                            <label for="HinhAnh">Hình ảnh<span class="text-danger">*</span></label>
                            <InputFile id="HinhAnh" class="form-control" OnChange="HandleFileSelected" accept="image/*" />
                            <ValidationMessage For="() => Input.HinhAnh" class="text-danger" />
                        </div>
                    </div>
                </div>
                <div class="row justify-content-end">
                    <button class="btn btn-primary mr-2" type="submit">Save</button>
                    <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
                </div>
            </EditForm>
        </BodyTemplate>
    </CustomModal>

    <EditForm Model="pageModel" FormName="SearchData" id="SearchData" OnValidSubmit="@Search">
        <DataAnnotationsValidator />
        <div class="d-flex row">
            <div class="form-floating col-sm-3 col-md-3">
                <label for="TenLoaiVatTu">Tên loại vật tư điện</label>
                <Select2 Id="TenLoaiVatTu" Items="@selectLVTSearch" OnChange="@OnSelectLVTSearch"></Select2>
                <ValidationMessage For="()=>pageModel.TenLoaiVatTu"></ValidationMessage>
            </div>
            <div class="form-floating col-sm-3 col-md-3">
                <label for="DonVi">Đơn vị</label>
                <Select2 Id="DonVi" Items="@selectDVSearch" OnChange="@OnSelectDVSearch"></Select2>
                <ValidationMessage For="()=>pageModel.DonVi"></ValidationMessage>
            </div>
            <div class="form-floating col-sm-3 col-md-3">
                <label for="TenLoaiVatTu">Thông tin loại vật tư điện</label>
                <Select2 Id="TenLoaiVatTu" Items="@selectVLTDSearch" OnChange="@OnSelectVLTDSearch"></Select2>
                <ValidationMessage For="()=>pageModel.TenLoaiVatTu"></ValidationMessage>
            </div>
            <div class="form-group ml-5">
                <label>&nbsp;</label>
                <button type="submit" form="SearchData" class="btn btn-primary form-control">Tìm kiếm</button>
            </div>
            @if (CheckQuyenService.HasPermission(3))
            {
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button class="btn btn-default form-control" @onclick="ShowModal">Thêm mới</button>
                </div>

            }
        </div>
    </EditForm>
    <div class="d-flex justify-content-between align-items-center">
        <h5 class="mt-2">Danh sách số quyết định</h5>
    </div>
    <div class="row mt-3 ">
        <table class="table table-hover table-bordered">
            <thead class="bg-info">
                <tr>
                    <th class="text-center">STT</th>
                    <th class="text-center">Tên loại vật tư điện</th>
                    <th class="text-center">Đơn vị</th>
                    <th class="text-center">Thông tin loại vật tư điện</th>
                    <th class="text-center">Hình ảnh</th>
                    <th class="text-center" colspan="2" rowspan="2"></th>
                </tr>

            </thead>
            @if (listDM_ThongTinVatTuModel.Any())
            {
                <tbody>
                    @{
                        int stt = 1;
                    }
                    @foreach (var ndm in listDM_ThongTinVatTuModel)
                    {
                        <tr>
                            <td class="text-center">@stt</td>
                            <td>@ndm.TenLoaiVatTu</td>
                            <td>@ndm.DonVi</td>
                            <td>@ndm.ThongTinLoaiVatTuDien</td>
                            <td class="text-center">
                                <img src="@ndm.HinhAnh" alt="Hình ảnh" style="max-width: 80px; max-height:80px;" />
                            </td>
                            <td class="text-center">
                                @if (CheckQuyenService.HasPermission(4))
                                {
                                    <button class="btn btn-sm btn-primary" @onclick="()=>Edit(ndm.Id)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                }
                            </td>
                            <td class="text-center">
                                @if (CheckQuyenService.HasPermission(5))
                                {
                                    <button class="btn btn-sm btn-danger" @onclick="()=>ConfirmDelete(ndm.Id,ndm.TenLoaiVatTu)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                        stt++;
                    }

                </tbody>
            }
            else
            {
                <tbody>
                    <tr>
                        <td colspan="5"> Không có dữ liệu</td>
                    </tr>
                </tbody>
            }

        </table>
    </div>
    @if (listDM_ThongTinVatTuModel.Any())
    {
        <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
    }
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>

@code {
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;

    private D_DM_ThongTinVatTu Input = new();
    private DateTime baseTime;

    private bool isModalVisible = false;
    private string TitleModal = "Thêm mới số quyết định";
    bool isEdit = false;

    private List<SelectedItem> selectLVTSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectDVSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectVLTDSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };

    private void ShowModal()
    {
        isEdit = false;
        isModalVisible = true;
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
    }

    private void HandleSave()
    {
        // Logic for saving
        isModalVisible = false;
    }

    private void HandleCancel()
    {
        // Logic for canceling
        isModalVisible = false;
        Input = new();
    }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }
    public List<DM_ThongTinVatTuModel> listDM_ThongTinVatTuModel
    {
        get;
        set;
    } = new();
    public List<DM_ThongTinVatTuModel> listModel
    {
        get;
        set;
    } = new();
    public MetaData MetaData {get;set; }
    [SupplyParameterFromForm(FormName = "SearchData")]
    public DM_ThongTinVatTuModel pageModel { get;set;}
    public DM_ThongTinVatTuModel dmModel{get;set;}

    // Khởi tạo màn hình
    protected override async Task OnInitializedAsync()
    {
        pageModel = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
        }
        if (!string.IsNullOrEmpty(groupId) && user != null)
        {
            await CheckQuyenService.InitializePermissions(groupId, user, "6f85445f-398d-47d6-bbea-04c267299535");
        }

        var DM_LoaiKLs = await DM_ThongTinVatTuService.GetByVM(groupId, new DM_ThongTinVatTuModel());
        foreach(var item in DM_LoaiKLs)
        {
            if (!selectLVTSearch.Any(x => x.Value == item.TenLoaiVatTu))
            {
                selectLVTSearch.Add(new SelectedItem
                    {
                        Value = item.TenLoaiVatTu,
                        Text = item.TenLoaiVatTu
                    });
            }
            if (!selectDVSearch.Any(x => x.Value == item.DonVi))
            {
                selectDVSearch.Add(new SelectedItem
                    {
                        Value = item.DonVi,
                        Text = item.DonVi
                    });
            }
            if (!selectVLTDSearch.Any(x => x.Value == item.ThongTinLoaiVatTuDien))
            {
                selectVLTDSearch.Add(new SelectedItem
                    {
                        Value = item.ThongTinLoaiVatTuDien,
                        Text = item.ThongTinLoaiVatTuDien
                    });
            }
        }
        StateHasChanged();

        baseTime = DateTime.Now;
        dmModel = new();
        await Task.WhenAll(Search());
    }
    // Truy vấn data theo điều kiện tìm kiếm
    private async Task Search()
    {
        try
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "dac0c890-7c4b-40e4-91f3-fd8b9fb4e517");
            var DM_LoaiKLs = await DM_ThongTinVatTuService.GetByVM(groupId, pageModel);
            listModel = DM_LoaiKLs;
            listDM_ThongTinVatTuModel = Paging(DM_LoaiKLs);
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            Input.CreateBy = userName;
            Input.CompanyId = groupId;
            var isExist = await DM_ThongTinVatTuService.CheckExist(Input.Id, Input);
            if (isExist)
            {
                ToastService.ShowToast(
                   "Thông báo",
                    "Đã tồn tại.",
                    cssClass: "toast-danger",
                    iconClass: "fa fa-exclamation-circle",
                    progressBarClass: "bg-info",
                    duration: 5000);
            }
            else
            {
                if (isEdit)
                {
                    var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "40acc55a-b536-4068-b946-217da164d118");
                    string[] ids = { Input.Id };
                    bool isValid = await DM_ThongTinVatTuService.CheckExclusive(ids, baseTime);
                    if (isValid)
                    {
                        await DM_ThongTinVatTuService.Update(Input, userId);
                        ToastService.ShowToast("Thông báo", "Cập nhật thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                        await Search();
                        isModalVisible = false;
                        Input = new();
                    }
                }
                else
                {
                    var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "353cc305-7b22-48c8-97c4-b1b9ed87d405");
                    await DM_ThongTinVatTuService.Insert(Input, userId);
                    ToastService.ShowToast("Thông báo", "Thêm thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await Search();
                    isModalVisible = false;
                    Input = new();
                }
            }

        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }

    }

    private string deleteId;
    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();

    }
    private async Task HandleResponseClick(bool confirmed)
    {
        if (confirmed)
        {
            var checkquyen = await PhanQuyenService.CheckPermission(groupId, "", user, "69f91ed2-1a06-4956-bef3-8ea3df8fe486");
            if (!string.IsNullOrEmpty(deleteId))
            {
                bool isInUse = await DM_ThongTinVatTuService.IsIdInUse(deleteId);
                if (isInUse)
                {
                    ToastService.ShowToast("Thông báo", "Không thể xóa loại danh mục đang được sử dụng.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                }
                else
                {
                    await DM_ThongTinVatTuService.DeleteById(deleteId, userId);
                    ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                    await Search();
                    deleteId = "";
                }
            }
        }
    }
    private async Task Edit(string id)
    {
        try
        {
            TitleModal = "Cập nhật !";
            Input = await DM_ThongTinVatTuService.GetById(id);
            isEdit = true;
            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast("Thông báo", ex.Message, iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
        }
    }

    private async Task OnSelectLVTSearch(SelectedItem selectedItem)
    {
        pageModel.TenLoaiVatTu = selectedItem.Value;
    }
    private async Task OnSelectDVSearch(SelectedItem selectedItem)
    {
        pageModel.DonVi = selectedItem.Value;
    }
    private async Task OnSelectVLTDSearch(SelectedItem selectedItem)
    {
        pageModel.ThongTinLoaiVatTuDien = selectedItem.Value;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            if (file != null)
            {
                // Kiểm tra loại file
                if (!file.ContentType.StartsWith("image/"))
                {
                    ToastService.ShowToast("Thông báo", "Vui lòng chọn file ảnh hợp lệ.", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                    return;
                }

                // Kiểm tra kích thước file
                const long maxFileSize = 1024000; // 1000 KB
                if (file.Size > maxFileSize)
                {
                    ToastService.ShowToast("Thông báo", $"Kích thước file vượt quá giới hạn cho phép ({maxFileSize / 1024} KB).", cssClass: "toast-danger", iconClass: "fa fa-exclamation-circle", progressBarClass: "bg-info", duration: 5000);
                    return;
                }

                var uniqueFileName = $"{Guid.NewGuid()}_{file.Name}";
                var filePath = Path.Combine("wwwroot", "upload_img", uniqueFileName);

                using (var memoryStream = new MemoryStream())
                {
                    await file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024).CopyToAsync(memoryStream);
                    memoryStream.Position = 0;

                    using (var image = await Image.LoadAsync(memoryStream))
                    {
                        var encoder = new SixLabors.ImageSharp.Formats.Jpeg.JpegEncoder
                            {
                                Quality = 75
                            };
                        await image.SaveAsync(filePath, encoder);
                    }
                }

                Input.HinhAnh = $"/upload_img/{uniqueFileName}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            throw;
        }
    }

    // Sắp xếp data
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        dmModel.PageNumber = 1;
        Paging(listModel);
    }
    // Get css cho chức năng sắp xếp
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    // Xử lý trường hợp đổi page hiển thị
    private void SelectedPage(int page)
    {
        dmModel.PageNumber = page;
        Paging(listModel);
    }
    // Xử lý trường hợp đổi số lượng bản ghi hiển thị trên page
    private void ChangePageSize(int pageSize)
    {

        dmModel.PageNumber = 1;
        dmModel.pageSize = pageSize;
        Paging(listModel);
    }
    // Xử lý paging
    private List<DM_ThongTinVatTuModel> Paging(List<DM_ThongTinVatTuModel> DM_LoaiKLs)
    {
        // Đếm số bản ghi thỏa mãn
        var count = DM_LoaiKLs.Count();

        // Lọc bản ghi theo page hiện tại và page size
        DM_LoaiKLs = DM_LoaiKLs.Skip((dmModel.PageNumber - 1) * dmModel.PageSize).Take(dmModel.PageSize).ToList();

        // Xóa danh sách đang hiển thị trên màn hình
        listDM_ThongTinVatTuModel.Clear();

        // Thêm những bản ghi sau khi lọc vào danh sách hiển thị
        foreach (var ndm in DM_LoaiKLs)
        {
            listDM_ThongTinVatTuModel.Add(ndm);
        }

        // Tạo pagelist mới
        var pagelist = new PageList<DM_ThongTinVatTuModel>(listDM_ThongTinVatTuModel, count, dmModel.PageNumber, dmModel.PageSize);
        MetaData = pagelist.MetaData;
        return DM_LoaiKLs;
    }
}
