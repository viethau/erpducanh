@page "/createLuotDuyet/{majorId}"
@using DucAnhERP.Models
@using DucAnhERP.ViewModel
@using DucAnhERP.Components.Pages.Common
@using DucAnhERP.SeedWork
@using DucAnhERP.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigation
@inject UserManager<IdentityUser> UserManager
@attribute [Authorize]

<h3>Cài đặt số lượt duyệt</h3>

<div class="mb-2 text-center">
    <button class="btn btn-primary" @onclick="AddRow">Thêm dòng</button>
</div>

<div class="custom-table pl-2">
    <div class="table table-bordered table-striped">
        <div class="thead-dark">
            <div class="row">
                <div class="col bg-dark text-center border py-3">Chi Nhánh</div>
                <div class="col bg-dark text-center border py-3">Nghiệp Vụ</div>
                <div class="col bg-dark text-center border py-3">Phân Loại</div>
                <div class="col bg-dark text-center border py-3">Phòng Ban Duyệt</div>
                <div class="col bg-dark text-center border py-3">Loại Thao Tác</div>
                <div class="col bg-dark text-center border py-3">Nội Dung</div>
                <div class="col bg-dark text-center border py-3">Thứ Tự Duyệt</div>
                <div class="col bg-dark text-center border py-3">Actions</div>
            </div>
        </div>
        @foreach (var item in approvalRowWrappers)
        {
            <EditForm EditContext="item.EditContext" FormName="@item.ApprovalRow.Id" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.CompanyId)" Value="@item.ApprovalRow.CompanyId" ValueChanged="@((string value) => OnChangeCompany(item, value))">
                            <option value="">Chọn Chi Nhánh</option>
                            @foreach (var branch in listCompanies)
                            {
                                <option value="@branch.Id">@branch.CompanyName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.CompanyId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect id="parentMajor" disabled class="form-control" @bind-Value="item.ApprovalRow.MajorId">
                            @if (parentMajor != null)
                            {
                                <option selected value="@parentMajor.Id">@parentMajor.MajorName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.MajorId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.ScreenId)" Value="@item.ApprovalRow.ScreenId" ValueChanged="@((string value) => OnChangeScreenId(item, value))">
                            <option value="">Chọn Phân Loại</option>
                            @foreach (var major in listMajor)
                            {
                                <option value="@major.Id">@major.MajorName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.ScreenId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.DeptId)" Value="@item.ApprovalRow.DeptId" ValueChanged="@((string value) => OnChangeDepartment(item, value))">
                            <option value="">Chọn Phòng Ban Duyệt</option>
                            @foreach (var department in listDept)
                            {
                                <option value="@department.Id">@department.DeptName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.DeptId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.OperationType)" Value="@item.ApprovalRow.OperationType" ValueChanged="@((int value) => OnChangeOperation(item, value))">
                            <option selected value="0">Chọn Thao Tác</option>
                            <option value="1">Tạo mới</option>
                            <option value="2">Chỉnh sửa</option>
                            <option value="3">Xóa</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.OperationType)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputText class="form-control" @bind-Value="item.ApprovalRow.Content" @oninput="(e) => OnInputContent(item, e)" />
                        <ValidationMessage For="@(() => item.ApprovalRow.Content)" />
                        @if (!item.isDuplicate)
                        {
                            <div class="validation-message">Nội dung giữa các dòng phải khác nhau!</div>
                        }
                    </div>
                    <div class="col text-center border py-2">@item.ApprovalRow.ApprovalStep</div>
                    <div class="col text-center border py-2">
                        <button class="btn btn-danger" @onclick="() => RemoveRow(item)">Xóa dòng</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">Cài đặt đang hiệu lực với chi nhánh, nghiệp vụ đã chọn</h3>
    </div>
    <div class="card-body">
        @if (!listSetApprovalStep.Any())
        {
            <div class="pt-4 pl-4">
                <div class="callout callout-warning">
                    <h5>Không có cài đặt tương ứng với chi nhánh, nghiệp vụ đã chọn!</h5>
                </div>
            </div>
        }
        @if (listSetApprovalStep.Any())
        {
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Phân loại nghiệp vụ</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Phòng ban</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Loại thao tác</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Nội dung</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Thứ tự duyệt</div>
                        </th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var setting in listSetApprovalStep)
                    {
                        <tr>
                            <th class="text-center" scope="row">@(listSetApprovalStep.IndexOf(setting) + 1)</th>
                            <td class="text-center">@setting.CompanyName</td>
                            <td class="text-center">@setting.MajorName</td>
                            <td class="text-center">@setting.ScreenName</td>
                            <td class="text-center">@setting.DeptName</td>
                            <td class="text-center">@setting.OperationType</td>
                            <td class="text-center">@setting.Content</td>
                            <td class="text-center">@setting.ApprovalStep</td>
                        </tr>
                    }

                </tbody>

            </table>
        }

    </div>

</div>

<div class="mb-2 text-center pt-2">
    <button @onclick="SubmitAll" class="btn btn-primary">Thiết định</button>
    <button @onclick="GoToStepSetting" class="btn btn-primary">Đi tới cài đặt người duyệt</button>
</div>


<ErrorModal @ref="errorModal"></ErrorModal>
<ErrorModal @ref="permissionErrorModal" OnResponseClick="CheckPermission"></ErrorModal>
<SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
<ConfirmModal @ref="confirmModal" OnResponseClick="CreateSettings"></ConfirmModal>

@code {
    private ApprovalDeptSetting approvalDeptSetting { get; set; } = new();

    private List<MMajor> listMajor = new List<MMajor>();

    private List<MCompany> listCompanies = new List<MCompany>();

    private List<MDepartment> listDept = new List<MDepartment>();

    private List<ApprovalStepSettingModel> listSetApprovalStep = new List<ApprovalStepSettingModel>();

    private MMajor parentMajor;

    private DateTime baseTime;

    private IdentityUser loginUser;

    private bool contentCount = true;

    [Parameter, SupplyParameterFromQuery]
    public string? majorId { get; set; }

    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ErrorModal permissionErrorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    [Parameter]
    public ConfirmModal confirmDeleteModal { get; set; }

    private List<ApprovalStepWrapper> approvalRowWrappers = new List<ApprovalStepWrapper>();

    private void AddRow()
    {
        // Lấy giá trị đã chọn của dòng đầu tiên để gán cho các dòng tiếp theo
        var companyId = "";
        var screenId = "";
        var deptId = "";
        var operation = 0;
        if (approvalRowWrappers.Count > 0)
        {
            var firstRow = approvalRowWrappers.First().ApprovalRow;
            companyId = firstRow.CompanyId;
            screenId = firstRow.ScreenId;
            deptId = firstRow.DeptId;
            operation = firstRow.OperationType;

        }
        var newRow = new ApprovalStepSetting
            {
                Id = Guid.NewGuid().ToString(),
                CompanyId = companyId == "" ? "" : companyId,
                ScreenId = screenId == "" ? "" : screenId,
                DeptId = deptId == "" ? "" : deptId,
                OperationType = operation == 0 ? 0 : operation,
                MajorId = majorId,
                CreateAt = DateTime.Now,
                CreateBy = loginUser.UserName,
                IsActive = 1,
                ApprovalStep = approvalRowWrappers.Count + 1
            };
        approvalRowWrappers.Add(new ApprovalStepWrapper(newRow));
        StateHasChanged();
    }

    private void RemoveRow(ApprovalStepWrapper wrapper)
    {
        approvalRowWrappers.Remove(wrapper);
        for (int i = 0; i < approvalRowWrappers.Count; i++)
        {
            approvalRowWrappers[i].ApprovalRow.ApprovalStep = i + 1;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var isValid = await LoginService.CheckLogin();
        if (!isValid)
        {
            navigation.NavigateTo("/Account/Login", forceLoad: true);
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;
        loginUser = await UserManager.FindByNameAsync(userName);
        parentMajor = await MajorService.GetById(majorId);

        // Check quyền xem màn hình
        // var permission = await MajorUserPermissionService.CheckPermission("ff9590bc-7b3b-4f9b-a7fd-913c248beadf", "7d3ea4cc-b3dc-4adc-8411-a7f033935284", Constant.VIEW);

        // if (!permission)
        // {
        //     permissionErrorModal.Title = "Lỗi!";
        //     permissionErrorModal.message = "Bạn không có quyền truy cập nội dung này!";
        //     permissionErrorModal.openModal();
        //     return;
        // }

        if (parentMajor != null)
        {
            approvalDeptSetting.MajorId = parentMajor.Id;
        }
        listMajor = await MajorService.GetMajorByParentId(majorId);
        listCompanies = await CompanyService.GetAllCompanies();
        baseTime = DateTime.Now;
    }

    private async Task OnChangeCompany(ApprovalStepWrapper approvalRow, string value)
    {
        // Kiểm tra chi nhánh phải trùng nhau từ dòng thứ 2
        if (approvalRowWrappers.Count > 1 && approvalRow.ApprovalRow.ApprovalStep != 1)
        {
            var companyId = approvalRowWrappers.First().ApprovalRow.CompanyId;
            if (companyId != value)
            {
                errorModal.Title = "Lỗi";
                errorModal.message = "Chi nhánh giữa các dòng phải giống nhau!";
                errorModal.openModal();
                return;
            }
        }
        approvalRow.ApprovalRow.CompanyId = value;
        listDept = await DepartmentService.GetDepartmentsByCompany(value);
        await LoadSetData();
    }

    private async Task OnChangeScreenId(ApprovalStepWrapper approvalRow, string value)
    {
        // Kiểm tra phân loại nghiệp vụ phải trùng nhau từ dòng thứ 2
        if (approvalRowWrappers.Count > 1 && approvalRow.ApprovalRow.ApprovalStep != 1)
        {
            var screenId = approvalRowWrappers.First().ApprovalRow.ScreenId;
            if (screenId != value)
            {
                errorModal.Title = "Lỗi";
                errorModal.message = "Phân loại nghiệp vụ giữa các dòng phải giống nhau!";
                errorModal.openModal();
                return;
            }
        }
        approvalRow.ApprovalRow.ScreenId = value;
        await LoadSetData();
    }

    private async Task OnChangeDepartment(ApprovalStepWrapper approvalRow, string value)
    {
        // Kiểm tra phòng ban phải trùng nhau từ dòng thứ 2
        if (approvalRowWrappers.Count > 1 && approvalRow.ApprovalRow.ApprovalStep != 1)
        {
            var deptId = approvalRowWrappers.First().ApprovalRow.DeptId;
            if (deptId != value)
            {
                errorModal.Title = "Lỗi";
                errorModal.message = "Phòng ban giữa các dòng phải giống nhau!";
                errorModal.openModal();
                return;
            }
        }
        approvalRow.ApprovalRow.DeptId = value;
        await LoadSetData();
    }

    private async Task OnChangeOperation(ApprovalStepWrapper approvalRow, int value)
    {
        // Kiểm tra thao tác phải trùng nhau từ dòng thứ 2
        if (approvalRowWrappers.Count > 1 && approvalRow.ApprovalRow.ApprovalStep != 1)
        {
            var operation = approvalRowWrappers.First().ApprovalRow.OperationType;
            if (operation != value)
            {
                errorModal.Title = "Lỗi";
                errorModal.message = "Thao tác giữa các dòng phải giống nhau!";
                errorModal.openModal();
                return;
            }
        }
        approvalRow.ApprovalRow.OperationType = value;
        await LoadSetData();
    }

    private async Task OnInputContent(ApprovalStepWrapper approvalStep, ChangeEventArgs e)
    {
        approvalStep.ApprovalRow.Content = e.Value.ToString();
        // Kiểm tra nội dung phải khác nhau
        if (approvalRowWrappers.Count > 1)
        {
            approvalStep.isDuplicate = approvalRowWrappers.Select(wrapper => wrapper.ApprovalRow.Content).Distinct().Count() == approvalRowWrappers.Count;
        }
        StateHasChanged();

    }

    private async Task HandleSubmit(EditContext context)
    {


    }

    private async Task SubmitAll()
    {
        // Kiểm tra trạng thái tài khoản
        var isValid = await LoginService.CheckLogin();
        if (!isValid)
        {
            navigation.NavigateTo("/Account/Login", forceLoad: true);
        }


        // Check quyền
        // To do

        // Validate
        if (approvalRowWrappers.Count == 0)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Bạn phải thêm ít nhất một dòng thiết định!";
            errorModal.openModal();
            return;
        }

        foreach (var wrapper in approvalRowWrappers)
        {
            if (!wrapper.EditContext.Validate())
            {
                return;
            }
            if (!wrapper.isDuplicate)
            {
                return;
            }
        }

        bool allSameCompanyId = approvalRowWrappers.All(wrapper => wrapper.ApprovalRow.CompanyId == approvalRowWrappers.First().ApprovalRow.CompanyId);
        if (!allSameCompanyId)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Chi nhánh giữa các dòng phải giống nhau!";
            errorModal.openModal();
            return;
        }

        bool allSameScreenId = approvalRowWrappers.All(wrapper => wrapper.ApprovalRow.ScreenId == approvalRowWrappers.First().ApprovalRow.ScreenId);
        if (!allSameScreenId)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Phân loại nghiệp vụ giữa các dòng phải giống nhau!";
            errorModal.openModal();
            return;
        }

        bool allSameDept = approvalRowWrappers.All(wrapper => wrapper.ApprovalRow.DeptId == approvalRowWrappers.First().ApprovalRow.DeptId);
        if (!allSameDept)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Phòng ban giữa các dòng phải giống nhau!";
            errorModal.openModal();
            return;
        }

        // Kiểm tra xem có yêu cầu phê duyệt nào đang chờ duyệt không
        // To do

        // Hiển thị modal xác nhận đăng ký
        confirmModal.openModal();
    }

    private void CheckPermission(bool isConfirm)
    {
        navigation.NavigateTo("#");
    }

    private void GoToStepSetting()
    {
        navigation.NavigateTo($"/createLuotDuyet/{majorId}");
    }

    private void Redirect()
    {
        navigation.Refresh(forceReload: true);

    }

    private async Task CreateSettings(bool isRegister)
    {
        try
        {
            if (isRegister)
            {
                var result = await ApprovalStepSettingService.CreateApprovalStepSetting(approvalRowWrappers, baseTime);

                if (result)
                {
                    successModal.Title = "Thành công!";
                    successModal.message = "Cài đặt số lượt duyệt thành công!";
                    successModal.openModal();
                }
            }
            else
            {
                errorModal.Title = "Lỗi";
                errorModal.message = "Cài đặt số lượt duyệt thất bại!";
                errorModal.openModal();
            }
        }
        catch (Exception ex)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = ex.Message;
            errorModal.openModal();
        }

    }

    private async Task LoadSetData()
    {
        var companyId = approvalRowWrappers.First().ApprovalRow.CompanyId;
        var majorId = approvalRowWrappers.First().ApprovalRow.MajorId;
        var deptId = approvalRowWrappers.First().ApprovalRow.DeptId;
        var operation = approvalRowWrappers.First().ApprovalRow.OperationType;
        var screenId = approvalRowWrappers.First().ApprovalRow.ScreenId;

        listSetApprovalStep = await ApprovalStepSettingService.GetSetApprovalStep(companyId, majorId, deptId, operation, screenId);
    }



}
