@page "/createPhongBanDuyet"
@using DucAnhERP.Models
@using DucAnhERP.ViewModel
@using DucAnhERP.Components.Pages.Common
@using DucAnhERP.SeedWork
@using DucAnhERP.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigation
@inject UserManager<IdentityUser> UserManager
@attribute [Authorize]

<h3>Cài đặt phòng ban duyệt</h3>

<div class="mb-2 text-center">
    <button @onclick="SubmitAll" class="btn btn-primary">Lưu cài đặt</button>
    <button @onclick="Cancel" class="btn btn-warning">Hủy</button>
</div>

<div class="custom-table pl-2">
    <div class="table table-bordered table-striped">
        <div class="thead-dark">
            <button class="btn btn-primary" @onclick="AddRow">Thêm phòng ban</button>
            <div class="row">
                <div class="col bg-dark text-center border py-3">Chi Nhánh</div>
                <div class="col bg-dark text-center border py-3">Nghiệp Vụ</div>
                <div class="col bg-dark text-center border py-3">Phân Loại</div>
                <div class="col bg-dark text-center border py-3">Phòng Ban Duyệt</div>
                <div class="col bg-dark text-center border py-3">Thứ Tự Duyệt</div>
                <div class="col bg-dark text-center border py-3">Actions</div>
            </div>
        </div>
        @foreach (var item in approvalRowWrappers)
        {
            <EditForm EditContext="item.EditContext" FormName="@item.ApprovalRow.Id" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.CompanyId)" Value="@item.ApprovalRow.CompanyId" ValueChanged="@((string value) => OnChangeCompany(item, value))">
                            <option value="">Chọn Chi Nhánh</option>
                            @foreach (var branch in lisChiNhanhs)
                            {
                                <option value="@branch.Id">@branch.TenChiNhanh</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.CompanyId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.ParentMajorId)" Value="@item.ApprovalRow.ParentMajorId" ValueChanged="@((string value) => OnChangeParentMajorId(item, value))">
                            <option value="">Chọn Phân Loại</option>
                            @foreach (var major in listParentMajor)
                            {
                                <option value="@major.Id">@major.MajorName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.ParentMajorId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.MajorId)" Value="@item.ApprovalRow.MajorId" ValueChanged="@((string value) => OnChangeScreenId(item, value))">
                            <option value="">Chọn Phân Loại</option>
                            @foreach (var major in listMajor)
                            {
                                <option value="@major.Id">@major.MajorName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.MajorId)" />
                    </div>
                    <div class="col text-center border py-2">
                        <InputSelect class="form-control" ValueExpression="@(() => item.ApprovalRow.DeptId)" Value="@item.ApprovalRow.DeptId" ValueChanged="@((string value) => OnChangeDepartment(item, value))">
                            <option value="">Chọn Phòng Ban Duyệt</option>
                            @foreach (var department in listDept)
                            {
                                <option value="@department.Id">@department.DeptName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => item.ApprovalRow.DeptId)" />
                    </div>
                    <div class="col text-center border py-2">@item.ApprovalRow.ApprovalStep</div>
                    <div class="col text-center border py-2">
                        <button class="btn btn-danger" @onclick="() => RemoveRow(item)">Xóa</button>
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

<div class="card card-primary">
    <div class="card-body">
        @if (!listSetApprovalDept.Any())
        {
            <div class="pt-4 pl-4">
                <div class="callout callout-warning">
                    <h5>Không có cài đặt </h5>
                </div>
            </div>
        }
        @if (listSetApprovalDept.Any())
        {
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">
                                Chi nhánh
                            </div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Phân loại nghiệp vụ</div>
                        </th>
                        <th class="text-center" scope="col">
                            <div class="pb-3">Phòng ban</div>
                        </th>
                        <th class="text-center" rowspan="2">
                        </th>
                        @* <th class="text-center" scope="col">
                    <div class="pb-3">Thứ tự duyệt</div>
                    </th> *@
                    </tr>
                </thead>

                <tbody>
                    @foreach (var setting in listSetApprovalDept)
                    {
                        <tr>
                            <th class="text-center" scope="row">@(listSetApprovalDept.IndexOf(setting) + 1)</th>
                            <td class="text-center">@setting.CompanyId</td>
                            <td class="text-center">@setting.ParentMajorId</td>
                            <td class="text-center">@setting.MajorId</td>
                            <td class="text-center">@setting.DeptId</td>
                            <td class="d-flex flex-column text-center nowrap">
                                <div class="d-inline-block">
                                    <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(setting.IdMain)">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(setting.IdMain ,setting.DeptId )">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }

                </tbody>

            </table>
        }
    </div>
</div>


<ErrorModal @ref="errorModal"></ErrorModal>
<ErrorModal @ref="permissionErrorModal" OnResponseClick="CheckPermission"></ErrorModal>
<SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
<ConfirmModal @ref="confirmModal" OnResponseClick="CreateSettings"></ConfirmModal>
<ConfirmModal @ref="confirmDeleteModal" OnResponseClick="HandleResponseClick"></ConfirmModal>

@code {
    private ApprovalDeptSetting approvalDeptSetting { get; set; } = new();

    private List<Major> listParentMajor = new List<Major>();
    private List<Major> listMajor = new List<Major>();

    private List<ChiNhanh> lisChiNhanhs = new List<ChiNhanh>();

    private List<Department> listDept = new List<Department>();

    private List<ApprovalDeptSettingData> listSetApprovalDept = new List<ApprovalDeptSettingData>();

    private DateTime baseTime;
    private bool loai;

    private IdentityUser loginUser;
    private string TitleModal = "Thêm";

    public string? companyId { get; set; }
    public string? parentmajorId { get; set; }
    public string? majorId { get; set; }

    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ErrorModal permissionErrorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    [Parameter]
    public ConfirmModal confirmDeleteModal { get; set; }

    private List<ApprovalDeptWrapper> approvalRowWrappers = new List<ApprovalDeptWrapper>();
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    public string mainId { get; set; } = "";
    public string deleteId { get; set; } = "";
    public string idChiNhanh { get; set; }
    public string tenChiNhanh { get; set; }
    public DateTime createAt { get; set; }
    private ApplicationUser user;

    private void AddRow()
    {
        // Lấy giá trị đã chọn của dòng đầu tiên để gán cho các dòng tiếp theo

        if (mainId == "")
        {
            mainId = Guid.NewGuid().ToString();
        }
        if (approvalRowWrappers.Count > 0)
        {
            var firstRow = approvalRowWrappers.First().ApprovalRow;
            companyId = firstRow.CompanyId;
            parentmajorId = firstRow.ParentMajorId;
            majorId = firstRow.MajorId;
            createAt = DateTime.Now;
        }
        var newRow = new ApprovalDeptSetting
            {
                Id = Guid.NewGuid().ToString(),
                IdMain = mainId,
                GroupId = groupId,
                CompanyId = companyId == "" ? "" : companyId,
                ParentMajorId = parentmajorId,
                MajorId = majorId == "" ? "" : majorId,
                CreateAt = createAt,
                CreateBy = loginUser.Email,
                IsActive = 3,
                ApprovalStep = approvalRowWrappers.Count + 1
            };
        approvalRowWrappers.Add(new ApprovalDeptWrapper(newRow));
        StateHasChanged();
    }

    private void RemoveRow(ApprovalDeptWrapper wrapper)
    {
        approvalRowWrappers.Remove(wrapper);
        for (int i = 0; i < approvalRowWrappers.Count; i++)
        {
            approvalRowWrappers[i].ApprovalRow.ApprovalStep = i + 1;
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var isValid = await LoginService.CheckLogin();
        if (!isValid)
        {
            navigation.NavigateTo("/Account/Login", forceLoad: true);
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
            loginUser = await UserManager.FindByNameAsync(userName);

            if (user.CreateBy == "symtem")
            {
                userId = user.Id;
                groupId = user.GroupId;
                loginUser = await UserManager.FindByNameAsync(userName);

                listParentMajor = await MajorService.GetParentMajor();

                // if (parentMajor != null)
                // {
                //     approvalDeptSetting.MajorId = parentMajor.Id;
                // }

                listMajor = await MajorService.GetMajorByParentId(parentmajorId);
                lisChiNhanhs = await ChiNhanhService.GetAll(groupId);
                baseTime = DateTime.Now;
                await LoadSetData();
            }
            else
            {
                navigation.NavigateTo("/");
            }
        }
    }

    private async Task OnChangeCompany(ApprovalDeptWrapper approvalRow, string value)
    {
        // Kiểm tra chi nhánh phải trùng nhau từ dòng thứ 2
        if (approvalRowWrappers.Count > 1)
        {
            var sl = (from p in approvalRowWrappers
                      where p.ApprovalRow.CompanyId != value
                      select p).Count();
            if (sl > 0)
            {
                foreach (var item in approvalRowWrappers)
                {
                    item.ApprovalRow.CompanyId = value;
                }
            }
            else
            {
                approvalRow.ApprovalRow.CompanyId = value;
            }
        }
        else
        {
            approvalRow.ApprovalRow.CompanyId = value;
        }
        companyId = value;
        listDept = await DepartmentService.GetByChiNhanhs(value);
    }

    private async Task OnChangeParentMajorId(ApprovalDeptWrapper approvalRow, string value)
    {
        if (approvalRowWrappers.Count() > 0)
        {
            foreach (var item in approvalRowWrappers)
            {
                item.ApprovalRow.ParentMajorId = value;
                listMajor = await MajorService.GetMajorByParentId(value);
                item.ApprovalRow.MajorId = "";
            }
        }
        else
        {
            listMajor = await MajorService.GetMajorByParentId(value);
            approvalRow.ApprovalRow.ParentMajorId = value;
        }
        parentmajorId = value;
    }

    private async Task OnChangeScreenId(ApprovalDeptWrapper approvalRow, string value)
    {
        // Kiểm tra phân loại nghiệp vụ phải trùng nhau từ dòng thứ 2
        if (approvalRowWrappers.Count > 1)
        {
            var sl = (from p in approvalRowWrappers
                      where p.ApprovalRow.MajorId != value
                      select p).Count();
            if (sl > 0)
            {
                foreach (var item in approvalRowWrappers)
                {
                    item.ApprovalRow.MajorId = value;
                }
            }
            else
            {
                approvalRow.ApprovalRow.MajorId = value;
            }
        }
        else
        {
            approvalRow.ApprovalRow.MajorId = value;
        }
        majorId = value;
    }

    private async Task OnChangeDepartment(ApprovalDeptWrapper approvalRow, string value)
    {
        // Kiểm tra phòng ban phải khác nhau
        if (approvalRowWrappers.Count > 1)
        {
            var deptCount = approvalRowWrappers.Where(x => x.ApprovalRow.DeptId == value).Count();
            if (deptCount > 0)
            {
                // foreach (var item in approvalRowWrappers)
                // {
                //     item.ApprovalRow.DeptId = value;
                // }

                // approvalRow.ApprovalRow.DeptId = "";
                errorModal.Title = "Lỗi";
                errorModal.message = "Phòng ban giữa các dòng phải khác nhau!";
                errorModal.openModal();
                return;
            }
            else
            {
                approvalRow.ApprovalRow.DeptId = value;
            }
        }
        else
        {
            approvalRow.ApprovalRow.DeptId = value;
        }
        await LoadSetData();
    }

    private async Task HandleSubmit(EditContext context)
    {

    }

    private async Task HandleEdit(string id)
    {
        try
        {
            createAt = DateTime.Now;
            // Lấy giá trị đã chọn của dòng đầu tiên để gán cho các dòng tiếp theo
            var query = await ApprovalDeptSettingService.GetByMainId(id);
            approvalRowWrappers = new List<ApprovalDeptWrapper>();

            foreach (var item in query)
            {
                listDept = await DepartmentService.GetByChiNhanhs(item.CompanyId);
                listMajor = await MajorService.GetMajorByParentId(item.ParentMajorId);
                var newRow = new ApprovalDeptSetting
                    {
                        Id = Guid.NewGuid().ToString(),
                        IdMain = item.IdMain,
                        GroupId = item.GroupId,
                        CompanyId = item.CompanyId,
                        ParentMajorId = item.ParentMajorId,
                        MajorId = item.MajorId,
                        DeptId = item.DeptId,
                        CreateAt = createAt,
                        CreateBy = item.CreateBy,
                        IsActive = item.IsActive,
                        ApprovalStep = item.ApprovalStep
                    };
                approvalRowWrappers.Add(new ApprovalDeptWrapper(newRow));
                StateHasChanged();
            }

            createAt = DateTime.Now;
            mainId = id;
            loai = true;

            var firstRow = approvalRowWrappers.First().ApprovalRow;
            companyId = firstRow.CompanyId;
            parentmajorId = firstRow.ParentMajorId;
            majorId = firstRow.MajorId;
        }
        catch (Exception ex)
        {
            // ToastService.ShowToast(
            // "Thông báo",
            // ex.Message,
            // cssClass: "toast-danger",
            // iconClass: "fa fa-exclamation-circle",
            // progressBarClass: "bg-info",
            // duration: 7000
            // );
        }
    }
    private async Task ConfirmDelete(string id, string Ten)
    {
        var checkchoduyet = await ApprovalDeptSettingService.CheckChoDuyet(id);
        if (checkchoduyet.Count > 0)
        {
            errorModal.Title = "Lỗi!";
            errorModal.message = "Nghiệp vụ đang chờ duyệt, không thể xóa!";
            errorModal.openModal();
        }
        else
        {
            deleteId = id;
            confirmDeleteModal.Title = "Xác nhận xóa";
            confirmDeleteModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
            confirmDeleteModal.openModal();
        }
    }
    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    var query = ApprovalDeptSettingService.GetByMainId(deleteId);

                    var choduyet = await ApprovalDeptSettingService.CheckChoDuyet(deleteId);
                    if (choduyet.Count == 0)
                    {
                        var isValid = await ApprovalDeptSettingService.DeleteApprovalDeptSetting(deleteId);
                        if (isValid)
                        {
                            successModal.Title = "Xóa thành công!";
                            successModal.message = "Đã xóa cài đặt duyệt phòng ban!";
                            successModal.openModal();
                        }
                    }
                    else
                    {
                        errorModal.Title = "Lỗi!";
                        errorModal.message = "Bạn không thể xóa bản ghi khi nghiệp vụ đang chờ duyệt!";
                        errorModal.openModal();
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = ex.Message;
            errorModal.openModal();
        }
    }
    private async Task SubmitAll()
    {
        // Kiểm tra trạng thái tài khoản
        var isValid = await LoginService.CheckLogin();
        if (!isValid)
        {
            navigation.NavigateTo("/Account/Login", forceLoad: true);
        }


        // Check quyền
        // To do

        // Validate
        if (approvalRowWrappers.Count == 0)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Bạn phải thêm ít nhất một dòng thiết định!";
            errorModal.openModal();
            return;
        }

        foreach (var wrapper in approvalRowWrappers)
        {
            if (!wrapper.EditContext.Validate())
            {
                return;
            }
        }

        bool allSameCompanyId = approvalRowWrappers.All(wrapper => wrapper.ApprovalRow.CompanyId == approvalRowWrappers.First().ApprovalRow.CompanyId);
        if (!allSameCompanyId)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Chi nhánh giữa các dòng phải giống nhau!";
            errorModal.openModal();
            return;
        }

        bool allSameScreenId = approvalRowWrappers.All(wrapper => wrapper.ApprovalRow.MajorId == approvalRowWrappers.First().ApprovalRow.MajorId);
        if (!allSameScreenId)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Phân loại nghiệp vụ giữa các dòng phải giống nhau!";
            errorModal.openModal();
            return;
        }

        bool allUniqueDept = approvalRowWrappers.Select(wrapper => wrapper.ApprovalRow.DeptId).Distinct().Count() == approvalRowWrappers.Count;
        if (!allUniqueDept)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = "Phòng ban giữa các dòng phải khác nhau!";
            errorModal.openModal();
            return;
        }
        if (loai == true)
        {
            var checkchoduyet = await ApprovalDeptSettingService.CheckChoDuyet(mainId);
            if (checkchoduyet.Count > 0)
            {
                errorModal.Title = "Lỗi";
                errorModal.message = "Nghiệp vụ đang chờ duyệt không thể sửa!";
                errorModal.openModal();
                return;
            }
        }
        try
        {
            bool checktrung = await ApprovalDeptSettingService.CheckSave(companyId, majorId, mainId, loai);
        }
        catch (Exception ex)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = ex.Message;
            errorModal.openModal();
            return;
            throw;
        }

        // Hiển thị modal xác nhận đăng ký
        confirmModal.openModal();
    }

    private void CheckPermission(bool isConfirm)
    {
        navigation.NavigateTo("#");
    }

    private void Cancel()
    {
        loai = false;
        mainId = "";
        parentmajorId = "";
        companyId = "";
        approvalRowWrappers = new List<ApprovalDeptWrapper>();
    }

    private void Redirect()
    {
        navigation.Refresh(forceReload: true);

    }

    private async Task CreateSettings(bool isRegister)
    {
        try
        {
            if (isRegister)
            {
                var result = await ApprovalDeptSettingService.CreateApprovalDeptSetting(approvalRowWrappers, baseTime);

                if (result)
                {
                    loai = false;
                    successModal.Title = "Thành công!";
                    successModal.message = "Cài đặt phòng ban duyệt thành công!";
                    successModal.openModal();
                }
            }
        }
        catch (Exception ex)
        {
            errorModal.Title = "Lỗi";
            errorModal.message = ex.Message;
            errorModal.openModal();
        }

    }

    private async Task LoadSetData()
    {
        // var companyId = approvalRowWrappers.First().ApprovalRow.CompanyId;
        // var parentscreenId = approvalRowWrappers.First().ApprovalRow.ParentMajorId;
        // var majorId = approvalRowWrappers.First().ApprovalRow.MajorId;

        listSetApprovalDept = await ApprovalDeptSettingService.GetData(groupId);
    }
}
