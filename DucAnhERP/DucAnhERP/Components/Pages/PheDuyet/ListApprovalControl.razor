@page "/PheDuyet/ApprovalControls"

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject IApprovalControlRepository ApprovalControlService
@inject IMajorUserApprovalReponsitory MajorUserApprovalService

<div class="mx-5 my-2">
    <h3>Danh sách phân quyền cài đặt thao tác</h3>
    <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="@TitleModal" Size="modal-lg">
        <BodyTemplate>
            <EditForm Model="Input" id="formInput" OnValidSubmit="HandleValidSubmit">
                <div class="row">
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="CompanyId">Chi nhánh</label>
                        <Select2 Id="CompanyId" Items="@selectCompanyIdInput" OnChange="@OnSelectCompanyIdInput"></Select2>
                        <ValidationMessage For="()=>Input.CompanyId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="DeptId">Phòng ban</label>
                        <Select2 Id="DeptId" disabled="@(string.IsNullOrEmpty(Input.CompanyId))" Items="@selectDeptIdInput" OnChange="@OnSelectDeptIdInput"></Select2>
                        <ValidationMessage For="()=>Input.DeptId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ParentMajorId">Nghiệp vụ</label>
                        <Select2 Id="ParentMajorId"
                                 disabled="@(string.IsNullOrEmpty(Input.CompanyId))"
                                 Items="@selectParentMajorIdInput"
                                 OnChange="@OnSelectParentMajorIdInput">
                        </Select2>
                        <ValidationMessage For="()=>Input.ParentMajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="MajorId">Phân loại nghiệp vụ</label>
                        <Select2 Id="MajorId" disabled="@(string.IsNullOrEmpty(Input.ParentMajorId)|| string.IsNullOrEmpty(Input.DeptId))" Items="@selectMajorIdInput" OnChange="@OnSelectMajorIdInput"></Select2>
                        <ValidationMessage For="()=>Input.MajorId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="UserId">Người dùng</label>
                        <Select2 Id="UserId" disabled="@(string.IsNullOrEmpty(Input.DeptId))" Items="@selectUserIdInput" OnChange="@OnSelectUserIdInput"></Select2>
                        <ValidationMessage For="()=>Input.UserId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="PermissionId">Loại quyền</label>
                        <Select2 Id="PermissionId" disabled="@(string.IsNullOrEmpty(Input.MajorId))" Items="@selectPermissionInput" OnChange="@OnSelectPermissionIdInput"></Select2>
                        <ValidationMessage For="()=>Input.PermissionId"></ValidationMessage>
                    </div>
                    <div class="form-floating col-sm-6 col-md-3">
                        <label for="ApprovalStepId">Duyệt</label>
                        <Select2 Id="ApprovalStepId" disabled="@(string.IsNullOrEmpty(Input.PermissionId))" Items="@selectApprovalStepInput" OnChange="@OnSelectApprovalStepIdInput"></Select2>
                        <ValidationMessage For="()=>Input.ApprovalStepId"></ValidationMessage>
                    </div>

                </div>
                <DataAnnotationsValidator />
                <ValidationSummary />

            </EditForm>
        </BodyTemplate>
        <FooterTemplate>
            <div class="d-flex justify-content-end pr-5 py-3 modal-footer-with-border">
                <button class="btn btn-primary mr-2" form="formInput" type="submit">Save</button>
                <button class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
            </div>
        </FooterTemplate>
    </CustomModal>
    <div>
        <EditForm Model="pageModel" FormName="SearchData" id="SearchData" OnValidSubmit="@Search">
            <DataAnnotationsValidator />
            <div class="d-flex row">
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="CompanyIdSearch">Chi nhánh</label>
                    <Select2 Id="CompanyIdSearch" Items="@selectCompanyIdSearch" OnChange="@OnSelectCompanyIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.CompanyId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="ParentMajorIdSearch">Nghiệp vụ cha</label>
                    <Select2 Id="ParentMajorIdSearch" Items="@selectParentMajorIdSearch" OnChange="@OnSelectParentMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.ParentMajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="MajorIdSearch">Nghiệp vụ</label>
                    <Select2 Id="MajorIdSearch" Items="@selectMajorIdSearch" OnChange="@OnSelectMajorIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.MajorId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="DeptId">Bộ phận</label>
                    <Select2 Id="DeptId" Items="@selectDeptIdSearch" OnChange="@OnSelectDeptIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.DeptId"></ValidationMessage>
                </div>
                <div class="form-floating col-sm-3 col-md-3">
                    <label for="UserIdSearch">Người dùng</label>
                    <Select2 Id="UserIdSearch" Items="@selectUserIdSearch" OnChange="@OnSelectUserIdSearch"></Select2>
                    <ValidationMessage For="()=>pageModel.UserId"></ValidationMessage>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="submit" form="SearchData" class="btn btn-primary form-control">Tìm kiếm</button>
                </div>
                <div class="form-group ml-5">
                    <label>&nbsp;</label>
                    <button type="button" @onclick="ShowModal" class="btn btn-primary form-control">Tạo mới</button>
                </div>
            </div>
        </EditForm>
        <div class="row mt-3 our-table">
            <table class="table table-hover table-bordered">
                <thead class="bg-info">
                    <tr>
                        <th class="text-center" rowspan="2">
                        </th>
                        <th class="text-center" rowspan="2" scope="col">
                            <div class="pb-3">No.</div>
                        </th>
                        <th onclick="@(() => SortTable("CompanyId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Chi nhánh</div>
                            <span class="arrow @(GetSortStyle("CompanyId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ParentMajorId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ cha</div>
                            <span class="arrow @(GetSortStyle("ParentMajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("MajorId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Nghiệp vụ</div>
                            <span class="arrow @(GetSortStyle("MajorId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("DeptId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Phòng ban</div>
                            <span class="arrow @(GetSortStyle("DeptId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("UserId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Người dùng</div>
                            <span class="arrow @(GetSortStyle("UserId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("PermissionId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Loại quyền</div>
                            <span class="arrow @(GetSortStyle("PermissionId"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ApprovalOrder"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3">Thứ tự duyệt</div>
                            <span class="arrow @(GetSortStyle("ApprovalOrder"))"></span>
                        </th>
                        <th onclick="@(() => SortTable("ApprovalStepId"))" rowspan="2" class="text-left sortable" scope="col">
                            <div class="pb-3"> Duyệt</div>
                            <span class="arrow @(GetSortStyle("ApprovalStepId"))"></span>
                        </th>
                        @* <th onclick="@(() => SortTable("IsStatus"))" rowspan="2" class="text-left sortable" scope="col">
                        <div class="pb-3">Trạng thái</div>
                        <span class="arrow @(GetSortStyle("IsStatus"))"></span>
                        </th> *@
                    </tr>
                </thead>
                @if (listApprovalControlControl.Any())
                {
                    <tbody>
                        @{
                            int stt = 0;
                        }
                        @foreach (var item in listApprovalControlControl)
                        {
                            stt++;
                            <tr>
                                <td class="d-flex flex-column text-center nowrap">
                                    <div class="d-inline-block">
                                        <button class="btn btn-sm btn-primary m-1" title="Chỉnh sửa" @onclick="()=>HandleEdit(item.Id)">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger m-1" title="Xóa" @onclick="()=>ConfirmDelete(item.Id ,item.UserId )">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>

                                <td class="text-center" scope="row">@stt</td>
                                <td class="text-left">@item.CompanyId</td>
                                <td class="text-left">@item.ParentMajorId</td>
                                <td class="text-left">@item.MajorId</td>
                                <td class="text-left">@item.DeptId</td>
                                <td class="text-left">@item.UserId</td>
                                <td class="text-left">@item.PermissionId</td>
                                <td class="text-left">@item.ApprovalOrder</td>
                                <td class="text-left">@item.ApprovalStepId</td>
                                @* <td class="text-left">@item.IsStatus</td> *@
                            </tr>
                        }
                    </tbody>
                }
                else
                {
                    <tbody>
                        <tr>
                            <td class="text-danger" colspan="7">Không có dữ liệu</td>
                        </tr>
                    </tbody>
                }
            </table>
        </div>
        @if (listApprovalControlControl.Any())
        {
            <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage" ChangePageSize="ChangePageSize"></Pagination>
        }
    </div>
    <SuccessModal @ref="successModal" OnResponseClick="Redirect"></SuccessModal>
    <ErrorModal @ref="errorModal"></ErrorModal>
    <ConfirmModal @ref="confirmModal" OnResponseClick="HandleResponseClick"></ConfirmModal>
</div>
@code {
    private ApprovalControl Input = new();
    private List<DepartmentModel> listDepartment = new List<DepartmentModel>();
    private List<Major> listParentMajor = new List<Major>();
    private List<Major> listMajor = new List<Major>();
    private List<ChiNhanhModel>? listCompanyIdSearch = new();
    private List<ChiNhanh> listCompanyIdInput = new();
    public string CompanyIdText { get; set; } = "";
    public string ParentMajorIdText { get; set; } = "";
    public string DeptIdText { get; set; } = "";
    public string PermissionIdText { get; set; } = "";
    public string ApprovalStepIdText { get; set; } = "";
    public string validationMessage = "";
    private List<Major>? listParentMajorIdSearch = new List<Major>();
    private List<Major>? listMajorIdSearch = new List<Major>();
    public string MajorIdText { get; set; } = "";
    private List<ApplicationUserModel>? listUserIdSearch = new();
    private List<ApplicationUser> listUserIdInput = new();
    public string UserIdText { get; set; } = "";
    private bool isModalVisible = false;
    private bool isModalDetail = false;
    private bool isLoading = false;
    private string TitleModal = "Thêm";
    private bool isEdit = false;
    private DateTime baseTime;
    private string deleteId;
    public string userName { get; set; }
    public string userId { get; set; }
    public string groupId { get; set; }
    private ApplicationUser user;
    private List<Permission> listPermissions = new List<Permission>();
    private List<ApprovalStepSetting> listApprovalStepSetting = new List<ApprovalStepSetting>();
    private List<SelectedItem> selectCompanyIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectCompanyIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };

    private List<SelectedItem> selectPermissionInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectApprovalStepInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };

    private async Task OnSelectCompanyIdInput(SelectedItem selectedItem)
    {
        Input.CompanyId = selectedItem.Value;
        Input.DeptId = "";
        Input.ParentMajorId = "";
        Input.MajorId = "";
        Input.UserId = "";
        Input.ApprovalId = "";
        Input.ApprovalStepId = "";
        CompanyIdText = selectedItem.Text;
        listParentMajor = await ApprovalStepSettingService.LoadParentMajors(Input.CompanyId ?? "");
        selectParentMajorIdInput = listParentMajor.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectParentMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

        //chọn deptId
        listDepartment = !string.IsNullOrEmpty(Input.CompanyId) ? await DepartmentService.GetAllByVM(new DepartmentModel { CompanyId = Input.CompanyId }, groupId) : new();

        selectDeptIdInput = listDepartment.Select(item => new SelectedItem { Text = item.DeptName, Value = item.Id }).ToList();
        selectDeptIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

        selectMajorIdInput = new() { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        selectUserIdInput = new() { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        selectPermissionInput = new() { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        selectApprovalStepInput = new() { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        StateHasChanged();
    }

    private async Task OnSelectCompanyIdSearch(SelectedItem selectedItem)
    {
        pageModel.CompanyId = selectedItem.Value;
        pageModel.DeptId = "";
        pageModel.ParentMajorId = "";
        pageModel.MajorId = "";
        pageModel.UserId = "";
        pageModel.ApprovalId = "";
        pageModel.ApprovalStepId = "";
        listParentMajorIdSearch = await ApprovalStepSettingService.LoadParentMajors(pageModel.CompanyId ?? "");
        selectParentMajorIdSearch = listParentMajorIdSearch.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectParentMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

        selectDeptIdSearch = new();
        listDepartment = !string.IsNullOrEmpty(pageModel.CompanyId) ? await DepartmentService.GetAllByVM(new DepartmentModel { CompanyId = pageModel.CompanyId }, groupId) : new();
        selectDeptIdSearch = listDepartment.Select(item => new SelectedItem { Text = item.DeptName, Value = item.Id }).ToList();
        selectDeptIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

        selectMajorIdSearch = new() { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        selectUserIdSearch = new() { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };


        StateHasChanged();
    }

    private List<SelectedItem> selectParentMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectParentMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };

    private void OnSelectParentMajorIdInput(SelectedItem selectedItem)
    {
        Input.ParentMajorId = selectedItem.Value;
        ParentMajorIdText = selectedItem.Text;
        Input.MajorId = "";
        Input.ApprovalId = "";
        selectPermissionInput = new();
        listMajor = MajorService.GetMajorByParentId1(Input.ParentMajorId);
        selectMajorIdInput = listMajor.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectMajorIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        StateHasChanged();
    }

    private void OnSelectParentMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.ParentMajorId = selectedItem.Value;
        selectMajorIdSearch = new();
        pageModel.MajorId = "";
        pageModel.ApprovalId = "";
        listMajorIdSearch = MajorService.GetMajorByParentId1(pageModel.ParentMajorId);
        selectMajorIdSearch = listMajorIdSearch.Select(data => new SelectedItem
            {
                Value = data.Id,
                Text = data.MajorName
            }).ToList();
        selectMajorIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        StateHasChanged();
    }

    private List<SelectedItem> selectMajorIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectMajorIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private async void OnSelectMajorIdInput(SelectedItem selectedItem)
    {
        Input.MajorId = selectedItem.Value;
        MajorIdText = selectedItem.Text;
        Input.PermissionId = "";
        listPermissions = await ApprovalStepSettingService.LoadPermissionsByApprovalControl(Input);
        selectPermissionInput = new();
        selectPermissionInput = listPermissions.Select(item => new SelectedItem()
            {
                Value = item.Id,
                Text = item.PermissionName,
                IsSelected = false
            }).ToList();
        selectPermissionInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

        StateHasChanged();
    }
    private void OnSelectMajorIdSearch(SelectedItem selectedItem)
    {
        pageModel.MajorId = selectedItem.Value;
    }

    private List<SelectedItem> selectDeptIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectDeptIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private async Task OnSelectDeptIdInput(SelectedItem selectedItem)
    {
        Input.DeptId = selectedItem.Value;
        DeptIdText = selectedItem.Text;
        Input.PermissionId = "";

        selectPermissionInput = new();
        selectUserIdInput = new();
        if (string.IsNullOrEmpty(Input.DeptId))
        {
            selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
            selectPermissionInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
            StateHasChanged();
        }
        else
        {
            listUserIdSearch = await ApplicationUserService.GetAllByVM(new ApplicationUserModel { DeptId = Input.DeptId }, groupId);
            selectUserIdInput = listUserIdSearch.Select(item => new SelectedItem { Text = item.UserName, Value = item.Id, }).ToList();
            selectUserIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });

            listPermissions = await ApprovalStepSettingService.LoadPermissionsByApprovalControl(Input);
            selectPermissionInput = listPermissions.Select(item => new SelectedItem() { Value = item.Id, Text = item.PermissionName, }).ToList();
            selectPermissionInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            StateHasChanged();
        }
        selectApprovalStepInput = new(){new SelectedItem{Value ="",Text ="Chọn",IsSelected =true}};
        StateHasChanged();
    }
    private async Task OnSelectDeptIdSearch(SelectedItem selectedItem)
    {
        pageModel.DeptId = selectedItem.Value;
        selectUserIdSearch = new();
        if (string.IsNullOrEmpty(pageModel.DeptId))
        {
            selectUserIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
        }
        else
        {
            listUserIdSearch = await ApplicationUserService.GetAllByVM(new ApplicationUserModel { DeptId = pageModel.DeptId }, groupId);
            selectUserIdSearch = listUserIdSearch.Select(item => new SelectedItem { Text = item.UserName, Value = item.Id, }).ToList();
            selectUserIdSearch.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        }
        StateHasChanged();
    }

    private List<SelectedItem> selectUserIdInput = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private List<SelectedItem> selectUserIdSearch = new List<SelectedItem> { new SelectedItem { Value = "", Text = "Chọn", IsSelected = true } };
    private void OnSelectUserIdInput(SelectedItem selectedItem)
    {
        Input.UserId = selectedItem.Value;
        UserIdText = selectedItem.Text;
    }
    private void OnSelectUserIdSearch(SelectedItem selectedItem)
    {
        pageModel.UserId = selectedItem.Value;

    }

    private async void OnSelectPermissionIdInput(SelectedItem selectedItem)
    {
        Input.PermissionId = selectedItem.Value;
        Input.ApprovalStepId = "";
        listApprovalStepSetting = await ApprovalStepSettingService.LoadStepByApprovalControl(Input);
        selectApprovalStepInput = new();
        selectApprovalStepInput = listApprovalStepSetting.Select(item => new SelectedItem
            {
                Value = item.Id,
                Text = item.ApprovalStep + ". " + item.Content,
                IsSelected = false
            }).ToList();
        selectApprovalStepInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
        StateHasChanged();
    }

    private void OnSelectPermissionIdSearch(SelectedItem selectedItem)
    {
        // pageModel. = selectedItem.Value;
    }

    private async void OnSelectApprovalStepIdInput(SelectedItem selectedItem)
    {
        Input.ApprovalStepId = selectedItem.Value;
        ApprovalStepIdText = selectedItem.Text;
    }


    [Parameter]
    public SuccessModal successModal { get; set; }

    [Parameter]
    public ErrorModal errorModal { get; set; }

    [Parameter]
    public ConfirmModal confirmModal { get; set; }

    private void ShowModal()
    {
        isModalVisible = true;
        Input = new();
        Refresh();
    }
    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
        Input = new();
        isEdit = false;
        Refresh();
    }

    private void HandleSave()
    {
        isModalVisible = false;
    }
    private void HandleCancel()
    {
        isModalVisible = false;
        Input = new();
        isEdit = false;
        Refresh();
    }

    private void Refresh()
    {
        foreach (var item in selectCompanyIdInput)
        {
            item.IsSelected = item.Value == "";
        }
        selectParentMajorIdInput = new();
        selectMajorIdInput = new();
        selectUserIdInput = new();
        selectDeptIdInput = new();
        selectPermissionInput = new();
        selectApprovalStepInput = new();
        StateHasChanged();
    }
    public List<ApprovalControlModel> listApprovalControlControl
    {
        get;
        set;
    } = new();
    public List<ApprovalControlModel> listModel
    {
        get;
        set;
    } = new();
    [SupplyParameterFromForm(FormName = "SearchData")]
    public ApprovalControlModel pageModel
    {
        get;
        set;
    }
    public MetaData MetaData
    {
        get;
        set;
    }


    protected override async Task OnInitializedAsync()
    {

        var isValid = await LoginService.CheckLogin();
        if (!isValid)
        {
            navigation.NavigateTo("/Account/Login", forceLoad: true);
        }
        pageModel = new();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            userName = authState.User.Identity.Name;
            user = ApplicationUserService.GetByUserName(userName);
            userId = user.Id;
            groupId = user.GroupId;
            //Kiểm tra quyền
            userId = user.Id;
            groupId = user.GroupId;

            var lisChiNhanhs = await ChiNhanhService.GetAll(groupId);
            selectCompanyIdInput = lisChiNhanhs.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh
                }).ToList();
            selectCompanyIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = true });
            selectCompanyIdSearch = selectCompanyIdInput;
            baseTime = DateTime.Now;
        }
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            var checkquyen = await MajorUserApprovalService.CheckPermission(groupId, "", user, "607a49e3-62df-406e-987e-d38226684621");
            baseTime = DateTime.Now;

        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }
    private async Task HandleEdit(string id)
    {
        try
        {
            var checkquyen = await MajorUserApprovalService.CheckPermission(groupId, pageModel.CompanyId, user, "b54436c7-2bd0-47b0-a10f-afa7508c61d5");
            TitleModal = "Cập nhật";
            Input = await ApprovalControlService.GetById(id);
            selectCompanyIdInput = new();
            selectParentMajorIdInput = new();
            selectMajorIdInput = new();
            selectDeptIdInput = new();
            selectUserIdInput = new();
            selectApprovalStepInput = new();
            var lisChiNhanhs = await ChiNhanhService.GetAll(groupId);
            selectCompanyIdInput = lisChiNhanhs.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.TenChiNhanh,
                    IsSelected = data.Id == Input.CompanyId
                }).ToList();
            selectCompanyIdInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = false });

            var listpm = await ApprovalStepSettingService.LoadParentMajors(Input.CompanyId ?? "");
            selectParentMajorIdInput = listpm.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName,
                    IsSelected = data.Id == Input.ParentMajorId
                }).ToList();

            listMajor = MajorService.GetMajorByParentId1(Input.ParentMajorId);
            selectMajorIdInput = listMajor.Select(data => new SelectedItem
                {
                    Value = data.Id,
                    Text = data.MajorName,
                    IsSelected = data.Id == Input.MajorId
                }).ToList();

            listPermissions = await ApprovalStepSettingService.LoadPermissionsByApprovalControl(Input);
            selectPermissionInput = new();
            selectPermissionInput = listPermissions.Select(item => new SelectedItem()
                {
                    Value = item.Id,
                    Text = item.PermissionName,
                    IsSelected = item.Id == Input.PermissionId
                }).ToList();
            selectPermissionInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = false });

            listApprovalStepSetting = await ApprovalStepSettingService.LoadStepByApprovalControl(Input);
            selectApprovalStepInput = listApprovalStepSetting.Select(item => new SelectedItem
                {
                    Value = item.Id,
                    Text = item.ApprovalStep + ". " + item.Content,
                    IsSelected = item.Id == Input.ApprovalStepId
                }).ToList();
            selectApprovalStepInput.Insert(0, new SelectedItem { Value = "", Text = "Chọn", IsSelected = false });


            var listdept = !string.IsNullOrEmpty(Input.CompanyId) ? await DepartmentService.GetAllByVM(new DepartmentModel { CompanyId = Input.CompanyId }, groupId) : new();
            selectDeptIdInput = listdept.Select(item => new SelectedItem { Text = item.DeptName, Value = item.Id, IsSelected = item.Id == Input.DeptId }).ToList();

            var list = await ApplicationUserService.GetAllByVM(new ApplicationUserModel { DeptId = Input.DeptId }, groupId);
            selectUserIdInput = list.Select(item => new SelectedItem { Text = item.UserName, Value = item.Id, IsSelected = item.Id == Input.UserId }).ToList();

            isEdit = true;
            isModalVisible = true;
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }

    private async Task ConfirmDelete(string id, string Ten)
    {
        deleteId = id;
        confirmModal.Title = "Xác nhận xóa";
        confirmModal.message = $"Bạn có chắc chắn muốn xóa: {Ten}?";
        confirmModal.openModal();
    }
    private async Task HandleResponseClick(bool confirmed)
    {
        try
        {
            if (confirmed)
            {
                if (!string.IsNullOrEmpty(deleteId))
                {
                    var query = await ApprovalControlService.GetById(deleteId);
                    if (query.IsActive == 2)
                    {
                        ToastService.ShowToast(
                        "Thông báo",
                        "Thông tin bạn chọn đang chờ ",
                        cssClass: "toast-success",
                        iconClass: "fa fa-exclamation-circle",
                        progressBarClass: "bg-info",
                        duration: 7000
                        );
                    }
                    else
                    {
                        var checkDelete = await ApprovalControlService.CheckDelete(query);
                        var checkquyen = await MajorUserApprovalService.CheckPermission(groupId, pageModel.CompanyId, user, "ee0d5e31-f5d2-48e6-91d3-5f7acdd1f6c0");
                        string[] ids = { deleteId };
                        var isValid = await ApprovalControlService.CheckExclusive(ids, baseTime);
                        if (isValid)
                        {
                            query.IsActive = 100;
                            query.CreateAt = DateTime.Now;
                            query.CreateBy = userId;
                            await ApprovalControlService.Update(query, "");
                            string content = "";
                            content += "<h3>Thông tin xóa</h3>";
                            content += "<table class=\"table table-hover table-bordered\">";
                            content += "<thead class=\"bg-info\">";
                            content += "<tr>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Chi nhánh</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Phòng ban</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Người dùng</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Loại quyền</div>";
                            content += "</th>";
                            content += "<th>";
                            content += "<div class=\"pb-3\">Thứ tự duyệt</div>";
                            content += "</th>";
                            content += "</tr>";
                            content += "</thead>";
                            content += "<tbody>";
                            content += "<tr>";
                            content += "<td class=\"text-left\">" + CompanyIdText + "</td>";
                            content += "<td class=\"text-left\">" + ParentMajorIdText + "</td>";
                            content += "<td class=\"text-left\">" + MajorIdText + "</td>";
                            content += "<td class=\"text-left\">" + DeptIdText + "</td>";
                            content += "<td class=\"text-left\">" + UserIdText + "</td>";
                            content += "<td class=\"text-left\">" + PermissionIdText + "</td>";
                            content += "<td class=\"text-left\">" + ApprovalStepIdText + "</td>";
                            content += "</tr>";
                            content += "</tbody>";
                            content += "</table>";
                            var listInsert = new List<EmailHistory>();
                            var emailhistory = new EmailHistory()
                                {
                                    Id = Guid.NewGuid().ToString(),
                                    Receiver = UserIdText,
                                    Subject = "Phân quyền cài đặt - Xóa",
                                    Content = content,
                                    CompanyId = query.CompanyId,
                                    UserId = Input.UserId,
                                    ParentMajorId = Input.ParentMajorId,
                                    MajorId = Input.MajorId,
                                    IdCheck = query.Id,
                                    IdLog = "",
                                    IsMail = true,
                                    IsNotification = true,
                                    IsSMS = true,
                                    GroupId = groupId,
                                    CreateAt = DateTime.Now,
                                    CreateBy = user.Id,
                                    IsRead = 0
                                };
                            // await EmailService.Insert(emailhistory, "");
                            ToastService.ShowToast("Thông báo", "Xóa thành công.", cssClass: "toast-success", iconClass: "fa fa-check-circle", progressBarClass: "bg-info", duration: 5000);
                            await LoadData();
                            await Search();
                            deleteId = "";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var CompanyIdValid = await ChiNhanhService.CheckStatus(Input.CompanyId, CompanyIdText);
            var UserIdValid = await ApplicationUserService.CheckStatus(Input.UserId, UserIdText);
            Input.GroupId = groupId;
            Input.CreateBy = userId;
            Input.CreateAt = DateTime.Now;
            Input.IsActive = 1;

            // bool editcheck = (isEdit) || (isEdit == true && Input.IsActive == 3);
            bool editcheck = (isEdit && Input.Ordinarily > 0) || (isEdit && Input.Ordinarily == 0 && Input.IsActive == 3);
            if (editcheck)
            {
                string[] ids = { Input.Id };

                var isValid = await ApprovalControlService.CheckExclusive(ids, baseTime);
                var checkEdit = await ApprovalControlService.CheckEdit(Input);
                //PhanQuyenService.CheckPermission
                var checkquyen = await MajorUserApprovalService.CheckPermission(groupId, pageModel.CompanyId, user, "b54436c7-2bd0-47b0-a10f-afa7508c61d5");
                if (isValid)
                {
                    Input.Ordinarily = Input.IsActive == 3 ? Input.Ordinarily + 1 : Input.Ordinarily;
                    Input.IsActive = 1;
                    Input.ApprovalOrder = 1;
                    Input.DepartmentOrder = 1;
                    await ApprovalControlService.Update(Input, userId);

                    string content = "";
                    content += "<h3>Thông tin sửa</h3>";
                    content += "<table class=\"table table-hover table-bordered\">";
                    content += "<thead class=\"bg-info\">";
                    content += "<tr>";
                    content += "<th class=\"text-center\" rowspan=\"2\" scope=\"col\">";
                    content += "<div class=\"pb-3\">No.</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Chi nhánh</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Phòng ban</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Người dùng</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Loai quyền</div>";
                    content += "</th>";
                    content += "<th>";
                    content += "<div class=\"pb-3\">Duyệt</div>";
                    content += "</th>";
                    content += "</tr>";
                    content += "</thead>";
                    var IsValidModel = await ApprovalControlService.GetHistoryIsValidEdit(Input.Id);
                    @if (IsValidModel.Any())
                    {
                        content += "<tbody>";
                        int stt = 0;
                        @foreach (var item in IsValidModel)
                        {
                            stt++;
                            content += "<tr>";
                            content += "<td class=\"text-center\" scope=\"row\">";
                            content += stt == 1 ? "Dữ liệu cũ" : "Dữ liệu mới";
                            content += "</td>";
                            content += "<td class=\"text-left\">" + @item.CompanyId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.ParentMajorId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.MajorId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.DeptId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.UserId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.PermissionId + "" + "</td>";
                            content += "<td class=\"text-left\">" + @item.ApprovalStepId + "" + "</td>";
                            content += "</tr>";
                        };
                        content += "</tbody>";
                    }
                    else
                    {
                        content += "<tbody>";
                        content += "<tr>";
                        content += "<td class=\"text-danger\" colspan=\"7\">Không có dữ liệu</td>";
                        content += "</tr>";
                        content += "</tbody>";
                    }
                    content += "</table>";
                  
                    var emailhistory = new EmailHistory()
                        {
                            Id = Guid.NewGuid().ToString(),
                            Receiver = UserIdText,
                            Subject = "Phân quyền cài đặt thao tác - Sửa.",
                            Content = content,
                            CompanyId = Input.CompanyId,
                            UserId = Input.UserId,
                            ParentMajorId = Input.ParentMajorId,
                            MajorId = Input.MajorId,
                            IdCheck = Input.Id,
                            IdLog = "",
                            IsMail = true,
                            IsNotification = true,
                            IsSMS = true,
                            GroupId = groupId,
                            CreateAt = DateTime.Now,
                            CreateBy = user.Id,
                            IsRead = 0
                        };
                
                    // await EmailService.Insert(emailhistory, "");


                    ToastService.ShowToast(
                    "Thông báo",
                    "Cập nhật thành công.",
                    iconClass: "fa fa-check-circle",
                    progressBarClass: "bg-info",
                    duration: 5000
                    );
                    Input.Id = Guid.NewGuid().ToString();
                    await LoadData();
                    await Search();
                    isEdit = false;
                    isModalVisible = false;
                }
            }
            else
            {
                //thêm mới
                var checkEdit = await ApprovalControlService.CheckEdit(Input);
                var checkquyen = await MajorUserApprovalService.CheckPermission(groupId, pageModel.CompanyId, user, "49735f27-da2b-430e-82af-be52cc92cc6b");
                Input.ApprovalOrder = 1;
                Input.DepartmentOrder = 1;
                Input.Ordinarily = 0;
                if (isEdit)
                {
                    await ApprovalControlService.Update(Input, userId);
                }
                else
                {
                    await ApprovalControlService.Insert(Input, userId);
                }
               
                string content = "";
                content += "<h3>Thông tin thêm</h3>";
                content += "<table class=\"table table-hover table-bordered\">";
                content += "<thead class=\"bg-info\">";
                content += "<tr>";
                content += "<th>";
                content += "<div class=\"pb-3\">Chi nhánh</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Nghiệp vụ cha</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Nghiệp vụ</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Phòng ban</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Người dùng</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Loại quyền</div>";
                content += "</th>";
                content += "<th>";
                content += "<div class=\"pb-3\">Duyệt</div>";
                content += "</th>";
                content += "</tr>";
                content += "</thead>";
                content += "<tbody>";
                content += "<tr>";
                content += "<td class=\"text-left\">" + CompanyIdText + "</td>";
                content += "<td class=\"text-left\">" + ParentMajorIdText + "</td>";
                content += "<td class=\"text-left\">" + MajorIdText + "</td>";
                content += "<td class=\"text-left\">" + DeptIdText + "</td>";
                content += "<td class=\"text-left\">" + UserIdText + "</td>";
                content += "<td class=\"text-left\">" + PermissionIdText + "</td>";
                content += "<td class=\"text-left\">" + ApprovalStepIdText + "</td>";
                content += "</tr>";
                content += "</tbody>";
                content += "</table>";
                
                var emailhistory = new EmailHistory()
                    {
                        Id = Guid.NewGuid().ToString(),
                        Receiver = UserIdText,
                        Subject = "Phân quyền cài đặt thao tác - Thêm",
                        Content = content,
                        CompanyId = Input.CompanyId,
                        UserId = Input.UserId,
                        ParentMajorId = Input.ParentMajorId,
                        MajorId = Input.MajorId,
                        IdCheck = Input.Id,
                        IdLog = "",
                        IsMail = true,
                        IsNotification = true,
                        IsSMS = true,
                        GroupId = groupId,
                        CreateAt = DateTime.Now,
                        CreateBy = user.Id,
                        IsRead = 0
                    };
              
                // await EmailService.Insert(emailhistory, "");

                ToastService.ShowToast(
                "Thông báo",
                "Cập nhật thành công.",
                iconClass: "fa fa-check-circle",
                progressBarClass: "bg-info",
                duration: 5000
                );
                Input.Id = Guid.NewGuid().ToString();
                await LoadData();
                await Search();
                isEdit = false;
                isModalVisible = false;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowToast(
            "Thông báo",
            ex.Message,
            cssClass: "toast-danger",
            iconClass: "fa fa-exclamation-circle",
            progressBarClass: "bg-info",
            duration: 7000
            );
        }
    }

    public async Task Search()
    {
        var checkquyen = await MajorUserApprovalService.CheckPermission(groupId, pageModel.CompanyId, user, "9f33895c-b14c-4998-90ec-e8cddfd52697");
        pageModel.PageNumber = 1;
        listModel = await ApprovalControlService.GetAllByVM(pageModel, groupId);
        listApprovalControlControl = Paging(listModel);
    }
    private void SortTable(string columnName)
    {
        listModel = SortService.SortTable(listModel, columnName);
        pageModel.PageNumber = 1;
        Paging(listModel);
    }
    private string GetSortStyle(string columnName)
    {
        return SortService.GetSortStyle(columnName);
    }
    private void SelectedPage(int page)
    {
        pageModel.PageNumber = page;
        Paging(listModel);
    }
    private void ChangePageSize(int pageSize)
    {
        pageModel.PageNumber = 1;
        pageModel.pageSize = pageSize;
        Paging(listModel);
    }
    private List<ApprovalControlModel> Paging(List<ApprovalControlModel> list)
    {
        var count = list.Count();
        list = list.Skip((pageModel.PageNumber - 1) * pageModel.PageSize).Take(pageModel.PageSize).ToList();
        listApprovalControlControl.Clear();
        foreach (var item in list)
        {
            listApprovalControlControl.Add(item);
        }
        var pagelist = new PageList<ApprovalControlModel>(listApprovalControlControl, count, pageModel.PageNumber, pageModel.PageSize);
        MetaData = pagelist.MetaData;
        return list;
    }
    private void Redirect()
    {
        Input = new();
    }
}
