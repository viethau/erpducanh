@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DucAnhERP.Data
@using DucAnhERP.Models

@using DucAnhERP.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<IdentityUser> UserManager
@inject IUserStore<IdentityUser> UserStore
@inject SignInManager<IdentityUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject HttpClient HttpClient
@attribute [AllowAnonymous]

<PageTitle>Đăng ký sử dụng hệ thống</PageTitle>
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h1 class="text-center">Đăng ký sử dụng hệ thống</h1>
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />
                <div class="card">
                    <div class="card-body">
                        <h4>Thông tin cá nhân</h4>
                        <hr />
                        <div class="form-floating mb-3">
                            <label for="surname">Họ <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Input.LastName" class="form-control" id="surname" placeholder="Họ" />
                            <ValidationMessage For="() => Input.LastName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <label for="firstname">Tên đệm và tên <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Input.FirstName" class="form-control" id="firstname" placeholder="Tên đệm và tên" />
                            <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <label for="dob">Ngày sinh <span class="text-danger">*</span></label>
                            <InputDate @bind-Value="Input.Dob" class="form-control" id="dob" placeholder="Ngày sinh" />
                            <ValidationMessage For="() => Input.Dob" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <label for="phone">Số điện thoại <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Input.PhoneNumber" class="form-control" id="phone" placeholder="Số điện thoại" />
                            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <label for="email">Email <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Input.Email" class="form-control" id="email" placeholder="Email" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>
                        <h4>Thông tin doanh nghiệp</h4>
                        <hr />
                        <div class="form-floating mb-3">
                            <label for="companyName">Tên doanh nghiệp <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Input.CompanyName" class="form-control" id="companyName" placeholder="Tên doanh nghiệp" />
                            <ValidationMessage For="() => Input.CompanyName" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <label for="address">Địa chỉ <span class="text-danger">*</span></label>
                            <InputTextArea @bind-Value="Input.Address" class="form-control" id="address" placeholder="Địa chỉ" style="height: 100px;" />
                            <ValidationMessage For="() => Input.Address" class="text-danger" />
                        </div>
                        <div class="form-floating mb-3">
                            <label for="tax">Mã số thuế <span class="text-danger">*</span></label>
                            <InputText @bind-Value="Input.Tax" class="form-control" id="tax" placeholder="Mã số thuế" />
                            <ValidationMessage For="() => Input.Tax" class="text-danger" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Đăng ký</button>
                        <a href="/Account/Login" class="btn btn-default w-100 mt-1">Quay lại màn hình Đăng nhập</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private RegisterModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public string? Message;

    public async Task RegisterUser()
    {
        if (ApplicationUserService.GetByUserName(Input.Email) != null)
        {
            Message = "Lỗi: Email bạn nhập đã tồn tại trong hệ thống!";
            return;
        }

        if (ApplicationUserService.IsExistByPhoneNumber(Input.PhoneNumber))
        {
            Message = "Lỗi: Số điện thoại bạn nhập đã tồn tại trong hệ thống!";
            return;
        }
        string groupID = Guid.NewGuid().ToString();
        string companyTypeId = Guid.NewGuid().ToString();
        string idIT = Guid.NewGuid().ToString();
        var company = CreateCompany(groupID);
        var chinhanh = CreateChiNhanh(groupID);
        var department = CreateDepartmentDirector(groupID);
        var departmentit = CreateDepartmentIt(groupID, idIT);
        var companyType = CreateCompanyType(groupID);
        var approvalDeptSetting = CreateApprovalDeptSetting(groupID);
        var approvalDeptSettingIT = CreateApprovalDeptSettingIT(groupID, idIT);
        var user = CreateUser();
        var password = HelperService.GeneratePassword(8);
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var lockOutStore = GetLockoutStore();
        await lockOutStore.SetLockoutEnabledAsync(user, true, CancellationToken.None);
        var appUser = CreateAppUser(company.Id, user);

        await CompanyService.Insert(company, "");
        await ChiNhanhService.Insert(chinhanh, "");
        await DepartmentService.Insert(department, "");
        await DepartmentService.Insert(departmentit, "");
        await CompanyTypeService.Insert(companyType, "");
        await ApprovalDeptSettingService.Insert(approvalDeptSetting, "");
        await ApprovalDeptSettingService.Insert(approvalDeptSettingIT, "");
        var resultUser = await UserManager.CreateAsync(user, password);
        await ApplicationUserService.Insert(appUser, "");

        if (!resultUser.Succeeded)
        {
            identityErrors = resultUser.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // Gửi mail xác nhận đăng ký
        await SendMail(appUser, callbackUrl, password);

        RedirectManager.RedirectTo(
            "Account/RegisterConfirmation",
            new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });

    }

    private ApplicationUser CreateAppUser(string companyId, IdentityUser iUser)
    {
        try
        {
            var user = Activator.CreateInstance<ApplicationUser>();
            user.Id = iUser.Id;
            user.UserName = iUser.UserName;
            user.Address = Input.Address;
            user.Dob = (DateTime)Input.Dob;
            user.FirstName = Input.FirstName;
            user.LastName = Input.LastName;
            user.PhoneNumber = Input.PhoneNumber;
            user.IsActive = 0;
            user.IsFirstLogin = 2;
            user.CreateAt = DateTime.Now;
            user.CreateBy = "symtem";
            user.Email = Input.Email;
            user.CompanyId = companyId;
            user.GroupId = companyId;
            user.DeptId = "";

            user.Ordinarily = 1;
            user.ApprovalUserId = "";
            user.DateApproval = DateTime.Now;
            user.DepartmentId = "";
            user.DepartmentOrder = 1;
            user.ApprovalOrder = 1;
            user.ApprovalId = "";
            user.LastApprovalId = "";
            user.IsStatus = "Chờ kích hoạt";
            return user;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IdentityUser CreateUser()
    {
        try
        {
            var user = Activator.CreateInstance<IdentityUser>();
            user.PhoneNumber = Input.PhoneNumber;
            return user;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(IdentityUser)}'. " +
                $"Ensure that '{nameof(IdentityUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<IdentityUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<IdentityUser>)UserStore;
    }

    private IUserLockoutStore<IdentityUser> GetLockoutStore()
    {
        if (!UserManager.SupportsUserLockout)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserLockoutStore<IdentityUser>)UserStore;
    }

    private async Task SendMail(ApplicationUser user, string callBackUrl, string randomPassword)
    {
        // Tạo mới đối tượng
        var emailHistory = new EmailHistory();

        // Nội dung mail
        string content = "";

        content += "<div class=\"email-container\">";
        content += "<div class=\"header\">";
        content += "<h1>Đăng Ký Tài Khoản Thành Công</h1>";
        content += "</div>";
        content += "<div class=\"content\">";
        content += "";
        content += "<p>Xin chào,</p>";
        content += "<p>Bạn đã đăng ký sử dụng hệ thống quản lý doanh nghiệp thành công. Tài khoản của bạn là:</p>";
        content += "<p><strong>Tài khoản:</strong> " + user.Email + "</p>";
        content += "<p><strong>Mật khẩu:</strong> " + System.Net.WebUtility.HtmlEncode(randomPassword) + "</p>";
        content += "<p>Vui lòng truy cập theo đường dẫn dưới đây và thực hiện đăng nhập, đổi mật khẩu lần đầu tiên để kích hoạt tài khoản.</p>";
        content += "<p><a href=\"" + callBackUrl + "\">Click vào đây để kích hoạt</a></p>";
        content += "<p>Xin chân thành cảm ơn!</p>";
        content += "<p><strong>Lưu ý:</strong></p>";
        content += "<p>Tài khoản chỉ có hiệu lực trong vòng 1 tuần.</p>";
        content += "<p>Đây là email được gửi tự động từ hệ thống, vui lòng không trả lời vào địa chỉ này. Mọi thông tin thắc mắc xin vui lòng liên hệ: <a href=\"mailto:xxxxxxxx@gmail.com\">xxxxxxxx@gmail.com</a></p>";
        content += "</div>";
        content += "<div class=\"footer\">";
        content += "";
        content += "<p>Trân trọng,</p>";
        content += "<p>Công ty cổ phần xây dựng Đức Anh</p>";
        content += "</div>";
        content += "</div>";

        // Gán giá trị cho các thuộc tính
        emailHistory.Id = Guid.NewGuid().ToString();
        emailHistory.Receiver = user.Email;
        emailHistory.Subject = "Xác Nhận Đăng Ký Tài Khoản";
        emailHistory.Content = content;
        emailHistory.CompanyId = user.CompanyId;
        emailHistory.GroupId = user.CompanyId;
        emailHistory.MajorId = "";
        emailHistory.ParentMajorId = "";
        emailHistory.IsRead = 1;
        emailHistory.CreateAt = DateTime.Now;
        emailHistory.CreateBy = "system";

        // Thực hiện gửi mail
        await EmailService.SendEmail(emailHistory);
    }

    private CompanyType CreateCompanyType(string groupID)
    {
        try
        {
            var chinhanh = Activator.CreateInstance<CompanyType>();
            chinhanh.Id = groupID;
            chinhanh.TenLoaiChiNhanh = "Ban giám đốc";
            chinhanh.GroupId = groupID;
            chinhanh.Ordinarily = 1;
            chinhanh.CreateAt = DateTime.Now;
            chinhanh.CreateBy = "symtem";
            chinhanh.IsActive = 3;
            chinhanh.ApprovalUserId = "";
            chinhanh.DateApproval = DateTime.Now;
            chinhanh.DepartmentId = "";
            chinhanh.DepartmentOrder = 1;
            chinhanh.ApprovalOrder = 1;
            chinhanh.ApprovalId = "";
            chinhanh.LastApprovalId = "";
            chinhanh.IsStatus = "Đã duyệt";
            return chinhanh;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(CompanyType)}'. " +
                $"Ensure that '{nameof(CompanyType)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    private ChiNhanh CreateChiNhanh(string groupID)
    {
        try
        {
            var chinhanh = Activator.CreateInstance<ChiNhanh>();
            chinhanh.Id = groupID;
            chinhanh.ParentId = groupID;
            chinhanh.TenChiNhanh = Input.CompanyName;
            chinhanh.CompanyType = groupID;
            chinhanh.Phone = Input.PhoneNumber;
            chinhanh.Email = Input.Email;
            chinhanh.Address = Input.Address;
            chinhanh.GroupId = groupID;
            chinhanh.Ordinarily = 1;
            chinhanh.CreateAt = DateTime.Now;
            chinhanh.CreateBy = "symtem";
            chinhanh.IsActive = 3;
            chinhanh.ApprovalUserId = "";
            chinhanh.DateApproval = DateTime.Now;
            chinhanh.DepartmentId = "";
            chinhanh.DepartmentOrder = 1;
            chinhanh.ApprovalOrder = 1;
            chinhanh.ApprovalId = "";
            chinhanh.LastApprovalId = "";
            chinhanh.IsStatus = "Đã duyệt";
            return chinhanh;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ChiNhanh)}'. " +
                $"Ensure that '{nameof(ChiNhanh)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private MCompany CreateCompany(string groupID)
    {
        try
        {
            var company = Activator.CreateInstance<MCompany>();
            company.Id = groupID;
            company.ParentId = groupID;
            company.CompanyName = Input.CompanyName;
            company.CompanyType = Constant.HEAD_COMPANY;
            company.Phone = Input.PhoneNumber;
            company.Email = Input.Email;
            company.Address = Input.Address;
            company.GroupId = groupID;
            company.CreateAt = DateTime.Now;
            company.CreateBy = "symtem";
            company.IsActive = 3;
            return company;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(MCompany)}'. " +
                $"Ensure that '{nameof(MCompany)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private Department CreateDepartmentDirector(string groupID)
    {
        try
        {
            var department = Activator.CreateInstance<Department>();
            department.Id = groupID;
            department.CompanyId = groupID;
            department.DeptName = "Ban giám đốc";
            department.Phone = "0975666999";
            department.Email = "da@gmail.com";
            department.GroupId = groupID;
            department.Ordinarily = 0;
            department.CreateAt = DateTime.Now;
            department.CreateBy = "symtem";
            department.IsActive = 3;
            department.ApprovalUserId = "";
            department.DateApproval = DateTime.Now;
            department.DepartmentId = "";
            department.DepartmentOrder = 1;
            department.ApprovalOrder = 1;
            department.ApprovalId = "";
            department.LastApprovalId = "";
            department.IsStatus = "Đã duyệt";
            return department;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Department)}'. " +
                $"Ensure that '{nameof(Department)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    private Department CreateDepartmentIt(string groupID, string idIT)
    {
        try
        {
            var department = Activator.CreateInstance<Department>();
            department.Id = idIT;
            department.CompanyId = groupID;
            department.DeptName = "Công nghệ thông tin";
            department.Phone = "0975666999";
            department.Email = "viethau.nd@gmail.com";
            department.GroupId = groupID;
            department.Ordinarily = 0;
            department.CreateAt = DateTime.Now;
            department.CreateBy = "symtem";
            department.IsActive = 3;
            department.ApprovalUserId = "";
            department.DateApproval = DateTime.Now;
            department.DepartmentId = "";
            department.DepartmentOrder = 1;
            department.ApprovalOrder = 1;
            department.ApprovalId = "";
            department.LastApprovalId = "";
            department.IsStatus = "Đã duyệt";
            return department;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(Department)}'. " +
                $"Ensure that '{nameof(Department)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    private ApprovalDeptSetting CreateApprovalDeptSetting(string groupID)
    {
        try
        {
            var data = Activator.CreateInstance<ApprovalDeptSetting>();
            data.Id = groupID;
            data.IdMain = groupID;
            data.CompanyId = groupID;
            data.DeptId = groupID;
            data.ParentMajorId = "b24864bb-a435-44e4-bbf7-20814a099884";
            data.MajorId = "2beef307-7f25-4ae2-bd19-8bbfecd42334";
            data.ApprovalStep = 1;
            data.GroupId = groupID;
            data.Ordinarily = 1;
            data.CreateAt = DateTime.Now;
            data.CreateBy = "symtem";
            data.IsActive = 3;
            data.ApprovalUserId = "";
            data.DateApproval = DateTime.Now;
            data.DepartmentId = "";
            data.DepartmentOrder = 1;
            data.ApprovalOrder = 1;
            data.ApprovalId = "";
            data.LastApprovalId = "";
            data.IsStatus = "Đã duyệt";
            return data;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApprovalDeptSetting)}'. " +
                $"Ensure that '{nameof(ApprovalDeptSetting)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    private ApprovalDeptSetting CreateApprovalDeptSettingIT(string groupID, string idIT)
    {
        try
        {
            var data = Activator.CreateInstance<ApprovalDeptSetting>();
            data.Id = idIT;
            data.IdMain = groupID;
            data.CompanyId = groupID;
            data.DeptId = idIT;
            data.ParentMajorId = "b24864bb-a435-44e4-bbf7-20814a099884";
            data.MajorId = "2beef307-7f25-4ae2-bd19-8bbfecd42334";
            data.ApprovalStep = 2;
            data.GroupId = groupID;
            data.Ordinarily = 1;
            data.CreateAt = DateTime.Now;
            data.CreateBy = "symtem";
            data.IsActive = 3;
            data.ApprovalUserId = "";
            data.DateApproval = DateTime.Now;
            data.DepartmentId = "";
            data.DepartmentOrder = 1;
            data.ApprovalOrder = 1;
            data.ApprovalId = "";
            data.LastApprovalId = "";
            data.IsStatus = "Đã duyệt";
            return data;
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApprovalDeptSetting)}'. " +
                $"Ensure that '{nameof(ApprovalDeptSetting)}' is not an abstract class and has a parameterless constructor.");
        }
    }
    // private ApprovalStepSetting CreateApprovalStepSetting(string groupID)
    // {
    //     try
    //     {
    //         var data = Activator.CreateInstance<ApprovalStepSetting>();
    //         data.Id                 =  groupID;
    //         data.CompanyId          =  groupID;
    //         data.DeptId = groupID;
    //         data.ParentMajorId = "f2ee47e5-04b5-4f19-a5ac-3311e0122140";
    //         data.MajorId = "18688d53-9f67-4a85-a7c1-3e478ae65579";
    //         data.PermissionId       =  ;
    //         data.Content            =  ;
    //         data.ApprovalStep       =  ;
    //         data.GroupId = groupID;
    //         data.Ordinarily = 1;
    //         data.CreateAt = DateTime.Now;
    //         data.CreateBy = "symtem";
    //         data.IsActive = 3;
    //         data.ApprovalUserId = "";
    //         data.DateApproval = DateTime.Now;
    //         data.DepartmentId = "";
    //         data.DepartmentOrder = 1;
    //         data.ApprovalOrder = 1;
    //         data.ApprovalId = "";
    //         data.LastApprovalId = "";
    //         data.IsStatus = "Đã duyệt";
    //         return data;
    //     }
    //     catch
    //     {
    //         throw new InvalidOperationException($"Can't create an instance of '{nameof(ApprovalStepSetting)}'. " +
    //             $"Ensure that '{nameof(ApprovalStepSetting)}' is not an abstract class and has a parameterless constructor.");
    //     }
    // }
}