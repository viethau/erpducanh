@inherits LayoutComponentBase
@using DucAnhERP.Components.Account
@using DucAnhERP.Components.Account.Pages
@using DucAnhERP.Components.Pages.Common
@using DucAnhERP.Models
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using DucAnhERP.Data
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject SignInManager<IdentityUser> SignInManager
@inject IdentityRedirectManager RedirectManager


<CascadingAuthenticationState>

    <AuthorizeView Context="authContext">
        <Authorized>
            @if (isDisplay)
            {
                <CustomModal IsVisible="isModalVisible" OnClose="HandleModalClose" Title="Thông báo" Size="modal-lg">
                    <BodyTemplate>
                        <div class="modal-body">
                            @if (!listCategories.Any())
                            {
                                <div class="alert alert-warning" role="alert">
                                    Không có thông báo nào
                                </div>
                            }
                            else if (notificationCount == 0)
                            {
                                <div class="alert alert-info alert-autohide" role="alert">
                                    Bạn đã xem hết thông báo!
                                </div>
                            }

                            <div class="row" style="max-height: 630px;">
                                <div class="col-md-3">
                                    <div class="list-group">
                                        @if (listCategories.Any())
                                        {
                                            @foreach (var category in listCategories)
                                            {
                                                <button class="list-group-item list-group-item-action" @onclick="() => SelectCategory(category.Item1)">
                                                    @category.Item2
                                                    @if (@category.Item3 > 0)
                                                    {
                                                        <span class="badge badge-danger ml-1"> @category.Item3</span>
                                                    }
                                                </button>
                                            }
                                        }
                                    </div>
                                </div>

                                <div class="col-md-9" style="max-height: 630px; overflow-y: auto;">
                                    <table class="table table-bordered table-hover">
                                        @* <thead>
                                    <tr>
                                    <th>Tiêu đề</th>
                                    </tr>
                                    </thead> *@
                                        <tbody>
                                            @if (listNotificationsByCategory != null)
                                            {
                                                @foreach (var notification in listNotificationsByCategory)
                                                {
                                                    <tr data-widget="expandable-table" aria-expanded="false">
                                                        <td class="list-group-item list-group-item-action @((notification.IsRead == 1 ? "" : "list-group-item-danger"))" onclick="@(() => SelectNotification(notification))">@notification.Subject</td>
                                                    </tr>
                                                    <tr class="expandable-body d-none">
                                                        <td>
                                                            <p style="">
                                                                @((MarkupString)notification.Content)
                                                            </p>
                                                            <div class="row mt-3">
                                                                <div class="col-md-6">
                                                                    <!-- Thông tin ngày tạo -->
                                                                    <p class="text-muted">Ngày tạo: @notification.CreateAt.ToShortDateString() @notification.CreateAt.ToShortTimeString() </p>
                                                                </div>
                                                                <div class="col-md-6">
                                                                    <!-- Thông tin người tạo -->
                                                                    <p class="text-muted">Người tạo: @notification.CreateBy</p>
                                                                </div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </BodyTemplate>
                </CustomModal>

                <div class="wrapper">
                    <nav class="main-header navbar navbar-expand text-sm navbar-light bg-cyan">
                        <ul class="navbar-nav">
                            <li class="nav-item">
                                <a class="nav-link" data-widget="pushmenu" role="button"><i class="fas fa-bars"></i></a>
                            </li>
                        </ul>
                        <div class="ml-auto">
                            <nav class="navbar navbar-expand-lg text-white">
                                <Notification @ref="notification" OnResponseClick="ShowModal" />
                                <div class="collapse navbar-collapse" id="navbarNavDropdown">
                                    <ul class="navbar-nav">
                                        <li class="nav-item">
                                            <a class="nav-link dropdown-toggle text-white" href="#" id="navbarDropdownMenuLink" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                @user.LastName @user.FirstName
                                            </a>
                                            <div class="dropdown-menu align-content-center" aria-labelledby="navbarDropdownMenuLink">
                                                <a class="dropdown-item" href="#">Thông tin tài khoản</a>
                                                <a class="dropdown-item" href="/Account/Logout">Đăng xuất</a>
                                            </div>
                                        </li>
                                    </ul>
                                </div>
                            </nav>
                        </div>
                    </nav>
                </div>
                <NotificationModal @ref="notifModal" OnResponseClick="UpdateNotificationCount" />
                <div>
                    <NavMenu />
                    <div class="content-wrapper" style="min-height: 367.328px;height: 880px;overflow: scroll;">
                        <Toast />
                        @Body
                    </div>
                    <div id="sidebar-overlay"></div>
                </div>

            }
            else
            {

                @Body

                <div id="blazor-error-ui">
                    An unhandled error has occurred.
                    <a href="" class="reload">Reload</a>
                    <a class="dismiss">🗙</a>
                </div>
            }
        </Authorized>
        <NotAuthorized>

            @Body
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    private ApplicationUser user;
    private NotificationModal notifModal;
    private Notification notification;
    private bool isDisplay = false;
    private bool isDisplayModal = false;
    private bool isModalVisible = false;
    public string userName { get; set; }

    [Parameter]
    public EventCallback<bool> OnResponseClick { get; set; }
    private List<(string, string, int)> listCategories = new();
    private List<NotificationModel> listNotifications = new();
    private List<NotificationModel> listNotificationsByCategory = new();
    private NotificationModel? notificationModel;
    private int notificationCount { get; set; }


    private async Task ShowModal()
    {
        isModalVisible = true;
        listNotifications = await EmailService.GetAllNotiByUser(userName);
        listCategories = await EmailService.GetAllCategoriesByUser(userName);
        notificationCount = listCategories.Sum(category => category.Item3);
    }

    private void HandleModalClose(bool isVisible)
    {
        isModalVisible = isVisible;
    }

    // public async Task ShowModal()
    // {
    //     listNotifications = await EmailService.GetAllNotiByUser(userName);
    //     listCategories = await EmailService.GetAllCategoriesByUser(userName);
    //     notificationCount = listCategories.Sum(category => category.Item3);
    //     isDisplayModal = true;
    //     StateHasChanged();
    // }

    public void HideModal()
    {
        isDisplayModal = false;
        StateHasChanged();
    }

    private void SelectCategory(string majorId)
    {
        listNotificationsByCategory = listNotifications.Where(x => x.MajorId == majorId).OrderByDescending(x => x.CreateAt).ToList();
        notificationModel = null;
    }

    private async Task SelectNotification(NotificationModel notification)
    {
        notificationModel = notification;
        notificationModel.IsRead = 1;
        await EmailService.Update(notificationModel, "");
        listCategories = await EmailService.GetAllCategoriesByUser(userName);
        notificationCount = listCategories.Sum(category => category.Item3);
        await OnResponseClick.InvokeAsync(true);
        StateHasChanged();
    }

    private async Task UpdateStatus()
    {
        listNotifications = await EmailService.GetAllNotiByUser(userName);
        listCategories = await EmailService.GetAllCategoriesByUser(userName);
        notificationCount = listCategories.Sum(category => category.Item3);
    }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var isValid = await LoginService.CheckLogin();
            isDisplay = isValid ? true : false;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity.IsAuthenticated)
            {
                userName = authState.User.Identity.Name;
                user = ApplicationUserService.GetByUserName(userName);
                if (user == null)
                {
                    if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
                    {
                        // Clear the existing external cookie to ensure a clean login process
                        await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
                    }
                    await SignInManager.SignOutAsync();
                    RedirectManager.RedirectTo("Account/login");
                }
            }
        }
        catch (Exception)
        {
            if (HttpContext != null && HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
            await SignInManager.SignOutAsync();
            RedirectManager.RedirectTo("Account/login");
        }
    }

    private async Task UpdateNotificationCount(bool isUpdate)
    {
        await notification.UpdateNotificationCount();
    }
}